<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>lc第254场周赛</title>
    <link href="/posts/1920835834.html"/>
    <url>/posts/1920835834.html</url>
    
    <content type="html"><![CDATA[<p>这场周赛整体来说难度可以，快速幂那里的指数取模简直就是经典，虽然可以使用longlong飘过，时间卡的再死一点就更棒了</p><span id="more"></span><h1 id="T1：子字符串在字符串中出现数目（1967）"><a href="#T1：子字符串在字符串中出现数目（1967）" class="headerlink" title="T1：子字符串在字符串中出现数目（1967）"></a>T1：子字符串在字符串中出现数目（1967）</h1><p>这道题就没啥可说的，直接用语言自带的api也可以，手写也可以，kmp也可以，ac自动机也可以</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">numOfStrings</span><span class="hljs-params">(vector&lt;string&gt;&amp; patterns, string word)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> str:patterns)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(str,word))<br>            res++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(string str,string word)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>;l+str.<span class="hljs-built_in">size</span>()&lt;=word.<span class="hljs-built_in">size</span>();l++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;str.<span class="hljs-built_in">size</span>();k++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(word[l+k]!=str[k]) <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(k==str.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>这里的话是手写了一个系统自带的find函数</p><hr><h1 id="T2：构造元素不等于两相邻元素平均值的数组（1968）"><a href="#T2：构造元素不等于两相邻元素平均值的数组（1968）" class="headerlink" title="T2：构造元素不等于两相邻元素平均值的数组（1968）"></a>T2：构造元素不等于两相邻元素平均值的数组（1968）</h1><p>这里就是考到了一个贪心，我的思路就是先排序，然后从中点开始左边填一个，右边填一个，这样就能保证这个数组，一个大一个小，来保证不等于相邻元素的平均值</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">rearrangeArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; n)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(n.<span class="hljs-built_in">begin</span>(), n.<span class="hljs-built_in">end</span>());<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        <span class="hljs-keyword">int</span> s =(n.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)/<span class="hljs-number">2</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s <span class="hljs-number">-1</span> ,j = s+<span class="hljs-number">1</span>;j&lt;n.<span class="hljs-built_in">size</span>() &amp;&amp; i &gt;=<span class="hljs-number">0</span> ;j++,i-- )&#123;<br>            res.<span class="hljs-built_in">push_back</span>(n[j]);<br>            res.<span class="hljs-built_in">push_back</span>(n[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span>((n.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>) res.<span class="hljs-built_in">push_back</span>(n[n.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]);<br>        <br>        res.<span class="hljs-built_in">push_back</span>(n[s]);<br>        <span class="hljs-keyword">return</span> res;<br>        &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>赛后也看到了其他人的代码，先排完序，先填奇数序列，再填进去偶数，这样也保证了一个大一个小，觉得这个思路也蛮不错的</p><hr><h1 id="T3：-数组元素的最小非零乘积（1969）"><a href="#T3：-数组元素的最小非零乘积（1969）" class="headerlink" title="T3： 数组元素的最小非零乘积（1969）"></a>T3： 数组元素的最小非零乘积（1969）</h1><p>这里呢考到了一个快速幂加上指数取模。 也是一个贪心，但是这个贪心比较好看出来，因为均值不等式，俩个数越相近，乘积越大，在和为一定的时候，也就说明了在非零的情况下，一个是一，一个是最大值这样是最小的。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">1</span>%p;<br>        <span class="hljs-keyword">while</span> (b&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> ((b&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)&#123;res= (<span class="hljs-keyword">int</span>) (((<span class="hljs-keyword">long</span>)res*a)%p);&#125;<span class="hljs-comment">//按位与</span><br>                a=(<span class="hljs-keyword">int</span>)((<span class="hljs-keyword">long</span>)a*a%p);<br>                b&gt;&gt;=<span class="hljs-number">1</span>;<br>       &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minNonZeroProduct</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>        <span class="hljs-comment">// int res = 0;</span><br><br>    <span class="hljs-keyword">int</span> n = ( ( (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)<span class="hljs-number">1</span> &lt;&lt; p )- <span class="hljs-number">1</span>)% mod ;<br>    <span class="hljs-comment">// res = max(res , t);</span><br>    <span class="hljs-keyword">int</span>  t =( ( (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)<span class="hljs-number">1</span> &lt;&lt; (p - <span class="hljs-number">1</span>) )- <span class="hljs-number">1</span>) % (mod - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// int a = ((long long )1 &lt;&lt; p) % mod - 2;</span><br>    <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">qmi</span>(n - <span class="hljs-number">1</span> , t, mod);<br>    <span class="hljs-comment">// res = max(r , t);</span><br>    <span class="hljs-keyword">int</span> mn =(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)x * n % mod;<br>    <span class="hljs-comment">// res = max(res , h);</span><br>    <span class="hljs-keyword">return</span> mn;<br><br><br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>至于指数取模问题，讨论区上很多人写指数不要取模，其实不是这样的。</p><p>指数是可以取模的，但是不能直接取</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210816133711933.png" alt="image-20210816133711933"></p><p>这里提到的已经很详细了，在这里就是质数取模的特点，也就是p-1就ok了</p><hr><h1 id="T4：你能穿过矩阵的最后一天（1970）"><a href="#T4：你能穿过矩阵的最后一天（1970）" class="headerlink" title="T4：你能穿过矩阵的最后一天（1970）"></a>T4：你能穿过矩阵的最后一天（1970）</h1><p>这里我用的是多源bfs + 二分，看到题解说有并查集更快的做法，还没有仔细看之后会更新出来</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><br>   <br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// static const int N = 5e3 + 10;</span><br>    <br>    <span class="hljs-comment">// int dist[N][N];</span><br>    <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br>   <br>        <br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">latestDayToCross</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; cells)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> r = row * col;<br>        <span class="hljs-comment">// cout &lt;&lt; cells[0][0] &lt;&lt; cells[0][1] &lt;&lt; endl;</span><br>        <span class="hljs-keyword">bool</span> st[row +<span class="hljs-number">10</span>][col + <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">while</span> (l &lt; r)&#123;<br>            <span class="hljs-comment">// exit(0);</span><br>            <span class="hljs-keyword">int</span> mid = l+r + <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-number">1</span>  ;<br>            <span class="hljs-comment">// cout &lt;&lt; mid;</span><br>          <span class="hljs-keyword">bool</span>  flag = <span class="hljs-literal">false</span>;<br>          <br>            <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>        <span class="hljs-comment">// memset(dist, 0x3f, sizeof dist);</span><br>        queue&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; q;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mid; i ++ )&#123;<br>            <span class="hljs-comment">// q.push(&#123;cells[i][0], cells[i][1]&#125;);</span><br>            st[cells[i][<span class="hljs-number">0</span>]][cells[i][<span class="hljs-number">1</span>]] = <span class="hljs-literal">true</span>;<br>        &#125;<br>       <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= col; i ++ ) &#123;<br>            <span class="hljs-comment">// cout &lt;&lt; st[1][1] &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span>(!st[<span class="hljs-number">1</span>][i])&#123;<br>             q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">1</span>, i&#125;);<br>             <br>        &#125;<br>        &#125;<br>        <br><br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">auto</span> a = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-comment">// cout &lt;&lt; a.first &lt;&lt; a.second &lt;&lt; endl;</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++ )&#123;<br>                <span class="hljs-keyword">int</span> x = a.first + dx[i];<br>               <br>                <span class="hljs-keyword">int</span> y = a.second + dy[i];<br>                <span class="hljs-keyword">if</span>( x &gt; row || x &lt;= <span class="hljs-number">0</span> || y &gt; col || y &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <br>                <br>                <span class="hljs-keyword">if</span>(x == row) &#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                 <span class="hljs-keyword">break</span>;&#125; <br>                <span class="hljs-comment">//  if(mid = 3) exit(0);</span><br>                <span class="hljs-comment">// if(!)&#123;</span><br>                    <span class="hljs-keyword">if</span>(!st[x][y])&#123;<br>                        q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>                    st[x][y] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                    <br>                <span class="hljs-comment">// &#125;</span><br>                <br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">//  </span><br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; flag &lt;&lt; endl ;</span><br>        <span class="hljs-comment">// exit(0);</span><br>            <span class="hljs-keyword">if</span>(flag) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// </span><br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><hr><p class="note note-success">可能是个人能力问题，很不习惯lc这种函数式编程</p>]]></content>
    
    
    <categories>
      
      <category>lc周赛</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心</tag>
      
      <tag>快速幂</tag>
      
      <tag>多源bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于快排和归并排序</title>
    <link href="/posts/775143932.html"/>
    <url>/posts/775143932.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章会讲到最常用的排序算法–快排和归并排序（不是冒泡和选择！！），超详细的！！</p><span id="more"></span><h1 id="快排-amp-归并排序"><a href="#快排-amp-归并排序" class="headerlink" title="快排&amp;归并排序"></a>快排&amp;归并排序</h1><p>首先谈一谈为什么摒弃掉了冒泡和选择排序：</p><p>冒泡排序和选择排序在效率上是很低的，时间复杂度在o（n^2）这个量级。</p><p>所以说冒泡和选择就是一无是处了？</p><ol><li>从算法复杂性上来看，冒泡排序可以从生活中找到场景，实现逻辑相对简单、快速排序由于涉及到每趟都要更新分界值在理解上有一定的复杂度。</li><li>在稳定性来说，冒泡排序的时间复杂度是非常稳定的，快排在最坏的情况下也会达到n^2</li></ol><hr><p>那就正式讲一讲快排和归并排序：</p><h2 id="快速排序（quick-sort）o（nlogn）"><a href="#快速排序（quick-sort）o（nlogn）" class="headerlink" title="快速排序（quick sort）o（nlogn）"></a>快速排序（quick sort）o（nlogn）</h2><p>这个排序就如他的名字一样特别快,利用了分治的思想。</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>这个排序的主要思想是什么呢：</p><ul><li>首先在一个未排序的序列中选出一个分界值（随机选，一般我们选中间值或者是左一或右一）</li><li>然后把比这个分界值小的放在左边，比这个分界值大的放在右侧</li><li>以这个方法，递归排左边和右边</li></ul><p>听着抽象看一个动态图了解一下排序过程把：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1130_1196bbb27a-2.gif" alt="2.gif"></p><h3 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h3><p>给出一个代码模板，也就是我们俗称的板子</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[],<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>       <span class="hljs-keyword">if</span> (r&lt;=l)<span class="hljs-keyword">return</span>;<br>       <span class="hljs-keyword">int</span> standard=q[l];<br>       <span class="hljs-keyword">int</span> left=l-<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">int</span> right=r+<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>           <span class="hljs-keyword">while</span> (q[++left]&lt;standard);<span class="hljs-comment">//想要倒序就把这俩行的大于小于号反置</span><br>           <span class="hljs-keyword">while</span> (q[--right]&gt;standard);<br>          <span class="hljs-keyword">if</span> (left&lt;right)&#123;<br>               <span class="hljs-keyword">int</span> t = q[left];<br>               q[left] = q[right];<br>               q[right] = t;<br>           &#125;<br>       &#125;<br>       quickSort(q,l,right);<br>       quickSort(q,right+<span class="hljs-number">1</span>,r);<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>大家在写的时候，在15，16行这里可能会出现边界问题</p><p>我对边界做了一个总结：</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">quickSort(<span class="hljs-keyword">q</span>, l, j);<br>quickSort(<span class="hljs-keyword">q</span>, j + <span class="hljs-number">1</span>, r);<br>或<br><br>quickSort(<span class="hljs-keyword">q</span>, l, i - <span class="hljs-number">1</span>);<br>quickSort(<span class="hljs-keyword">q</span>, i, r);<br>是因为对于第一次处理后的数组，索引i左侧的数字都是小于等于<span class="hljs-keyword">x</span>，但不包括<span class="hljs-string">q[i]</span>。索引i右侧的数字都是大于等于<span class="hljs-keyword">x</span>，包括<span class="hljs-string">q[i]</span>。故区间分为[l,i-<span class="hljs-number">1</span>]和[i,r]。<br>同理，对于第一次处理后的数组，索引j左侧的数字都是小于等于<span class="hljs-keyword">x</span>，包括<span class="hljs-string">q[j]</span>。索引j右侧的数字都是大于等于<span class="hljs-keyword">x</span>，不包括<span class="hljs-string">q[j]</span>。故区间分为[l,j]和[j+<span class="hljs-number">1</span>,r]。<br><br>再对<span class="hljs-keyword">x</span>位置小结：<br><br>如果区间取[l,i-<span class="hljs-number">1</span>]和[i,r]这种，那么<span class="hljs-keyword">x</span>不应该取左边界(l、(l+r)/<span class="hljs-number">2</span>)。<br>应取 <span class="hljs-keyword">x</span> = <span class="hljs-string">q[r]</span>; <span class="hljs-keyword">x</span> = <span class="hljs-string">q[(l+r+1)/2]</span>;<br><br>如果区间取[l,j]和[j+<span class="hljs-number">1</span>,r]这种，那么<span class="hljs-keyword">x</span>不应该取右边界(如r、(l+r+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)。<br>应取 <span class="hljs-keyword">x</span> = <span class="hljs-string">q[l]</span>; <span class="hljs-keyword">x</span> = <span class="hljs-string">q[(l+r)/2]</span>;<br><br>自己选择其中一种即可。<br></code></pre></div></td></tr></table></figure><p>理解后背下一种即可</p><h3 id="时间复杂度分析："><a href="#时间复杂度分析：" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h3><p><strong>了解一个算法后，时间的复杂度分析环节必不可少呀！！</strong></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/20190418144938184.png" alt="img"></p><p>根据代码我们知道，每一层的递归操作次数为该次递归所传入的元素个数，忽略每次减去的枢轴（1个元素并没有给到下一层，但是每层这里减掉一个常数对复杂度的分析影响不大，所以暂时忽略），即：</p><p>第1层是n次，</p><p>第2层有2次递归，每次n/2次，共n次操作，</p><p>第3层有4次递归，每次n/4次，共n次操作，</p><p>……</p><p>（最后一层）第k层有k次递归，每次n/2^(k-1)次，共n次操作</p><p>由于递归结束的条件是只有一个元素，所以这里的n/2^(k-1)=1   =&gt;   k=logn+1 </p><p>即递归树的深度为logn</p><p>时间复杂度=每层的操作次数*树的深度=nlogn 即：O(nlgn);</p><p>这就得出了时间复杂度</p><p><strong>要注意的是，快排这里说的时间复杂度是平均时间复杂度，因为不可能每次都是对半分</strong></p><h2 id="归并排序（merge-sort）o（nlogn）"><a href="#归并排序（merge-sort）o（nlogn）" class="headerlink" title="归并排序（merge sort）o（nlogn）"></a>归并排序（merge sort）o（nlogn）</h2><p>归并也是利用到了分治的思想哦</p><h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>先看图解：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1024555-20161218163120151-452283750.png" alt="img"></p><p>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。</p><p>可以明确的看出，这个排序分俩个阶段，一个是分区间的阶段，一个是排序阶段，以下来一一解读</p><p>分阶段：</p><p><strong>分</strong>阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n。</p><p>治阶段：（重点，思想很重要，之后这种思想可能会一直出来）</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1024555-20161218194508761-468169540.png" alt="img"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1024555-20161218194621308-588010220.png" alt="img"></p><p>这就是治阶段的排序算法，是不是会联想到双指针算法呢，是的，就是典型的不同区间的双指针算法，之后还会写关于双指针算法的博客的</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>直接上板子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[],<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l&gt;=r) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">int</span> mid =l+r &gt;&gt;<span class="hljs-number">1</span>;<br>mergeSort(q, l, mid);<br>mergeSort(q, mid+<span class="hljs-number">1</span>, r);<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i&lt;=mid&amp;&amp;j&lt;=r) &#123;<br><span class="hljs-keyword">if</span> (q[i]&lt;=q[j]) t[k++]=q[i++];<span class="hljs-comment">//这里的符号反向就可以逆序输出</span><br><span class="hljs-keyword">else</span> t[k++]=q[j++];<br>&#125;<br><span class="hljs-keyword">while</span> (i&lt;=mid) &#123;<br>t[k++]=q[i++];<br>&#125;<br><span class="hljs-keyword">while</span> (j&lt;=r) &#123;<br>t[k++]=q[j++]; <br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j2 = <span class="hljs-number">0</span>,j3=l; j3 &lt;=r ; j2++,j3++) &#123;<br>q[j3]=t[j2];<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里的边界值处理也是挺蛋疼的，建议理解原理后，把模板直接背过</p><h3 id="时间复杂度的分析："><a href="#时间复杂度的分析：" class="headerlink" title="时间复杂度的分析："></a>时间复杂度的分析：</h3><p>这里的时间复杂度分析和快排非常相似</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/20170909101802866" alt="这里写图片描述"></p><p>从这个递归树可以看出，第一层时间代价为cn，第二层时间代价为cn/2+cn/2=cn…..每一层代价都是cn，总共有logn+1层。所以总的时间代价为cn*(logn+1).时间复杂度是o(nlogn).</p><p>我们分析快排和归并排序的时间复杂度的时候，一般用到的都是这种递归树</p><hr>所以快排和归并排序你学会了吗？😄]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021-7-11</title>
    <link href="/posts/1617049186.html"/>
    <url>/posts/1617049186.html</url>
    
    <content type="html"><![CDATA[<h2 id="每日心情和事情分享"><a href="#每日心情和事情分享" class="headerlink" title="每日心情和事情分享"></a>每日心情和事情分享</h2><span id="more"></span><p>最近给我的感觉就是过的很费，没有做什么实质性的东西，为了不挂科在学文化课，就是挺功利的。</p><p>就感觉是啥也没干一天就过去了，这样的日子已经持续了不下一周了，都快疯掉了。</p><p>并且之后要做的事真的很多，想赶出来时间早点去弄，却天天还在学文化课。</p><ul><li><input disabled="" type="checkbox"> 移动应用大赛</li><li><input disabled="" type="checkbox"> 算法提高</li><li><input disabled="" type="checkbox"> 剪辑视频</li><li><input disabled="" type="checkbox"> 讲解算法（在b站）</li><li><input disabled="" type="checkbox"> 大数据分析比赛（py三大库，matplotlib，numpy，pandas）</li><li><input disabled="" type="checkbox"> 排课系统的大创（要先学好redis和boot）</li><li><input disabled="" type="checkbox"> springboot</li><li><input disabled="" type="checkbox"> redis</li><li><input disabled="" type="checkbox"> 编译原理</li><li><input disabled="" type="checkbox"> 概率论</li><li><input disabled="" type="checkbox"> 驾照</li><li><input disabled="" type="checkbox"> c++（竞赛向）</li><li><input disabled="" type="checkbox"> Java新特性（lambda表达式等）</li></ul><p>属实是挺多的吧，但是也会努力在假期赶出很多。</p><p>希望等下学期来的时候我应该已经提升很多了吧，<strong>不是应该，是肯定！！！</strong></p><p>这篇文章不会删掉，假期回来后看看学了多少，之后也会发出对应的文章。</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>筛质数</title>
    <link href="/posts/2574143239.html"/>
    <url>/posts/2574143239.html</url>
    
    <content type="html"><![CDATA[<p>说到筛质数，大家想到的可能都会是那个暴力枚举的方法，这篇文章将讲述三种比暴力枚举好的方法：朴素筛，埃氏筛法，欧拉筛法</p><span id="more"></span><p>由一道题来引出三种筛质数的方法：</p><h2 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h2><blockquote><p>给定一个正整数 n，请你求出 1∼n 中质数的个数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含整数 n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示 1∼n1∼n 中质数的个数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^6</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure></blockquote><h3 id="比较暴力的解法：o（nlogn）"><a href="#比较暴力的解法：o（nlogn）" class="headerlink" title="比较暴力的解法：o（nlogn）"></a>比较暴力的解法：o（nlogn）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> shai;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>;<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cnt;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> primes[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> st[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> num=scanner.nextInt();<br><br>        get_primes(num);<br>        System.out.println(cnt);<br>        <span class="hljs-comment">//System.out.println(Arrays.toString(primes));</span><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i])&#123;<br>                primes[cnt++]=i;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>*i; j &lt;=n ; j+=i) &#123;<br>                    st[j]=<span class="hljs-keyword">true</span>;<br>            &#125;<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个primes数组来存质数；其实这个就比原来那个暴力的就好一点了，但是缺点还是比较明显的，就是为每一个数筛倍数的时候很明显是有可能和之前筛过的重复。举个例子</p><p>6这个数在2的时候会把6筛掉，4的时候也会去把6筛掉，很明显重复次数是非常多</p><p>这个时间复杂度怎么理解呢？</p><img src="http://jin-xuanjie.gitee.io/note-pad\image-20210707182426474.png" alt="image-20210707182426474" style="zoom:50%;" /><p>所有的次数就是第一行，然后把n提出来就是第二行的那个式子，第三行是怎么来的呢？</p><p>这时我们就要利用调和级数，就会得到最后一行，所以时间复杂度就得出了</p><h3 id="埃氏筛法：O-nloglogn"><a href="#埃氏筛法：O-nloglogn" class="headerlink" title="埃氏筛法：O(nloglogn)"></a>埃氏筛法：O(nloglogn)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i])&#123;<br>                primes[cnt++]=i;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>*i; j &lt;=n ; j+=i) &#123;<br>                st[j] = <span class="hljs-keyword">true</span>;<br>            &#125;&#125;<br><br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>这里比上面优化的一点是，不是每个数的自己的倍数都去改成true，而是只改质数的，<strong>毕竟所有的合数可以被质数整除</strong>，这个就是比朴素筛法的优化点，但是依旧不够，还是有冲突</p><p>21既是3的倍数也是7的倍数，那么3和7都会把他筛一遍，很明显是有浪费的，那么就会出现优化</p><p>这个时间复杂度计算用到了<strong>质数定理</strong>，具体可以去百度查，我这里放一个图片吧</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210707182335990.png" alt="image-20210707182335990"></p><p>这个质数定理，大概说了一件什么事呢？ 就是在n很大的时候，n以下的质数个数趋近于n/lgn</p><p>所以带进去时间复杂度就是O(nloglogn)</p><h3 id="线性筛法：-也叫欧拉筛-o-n"><a href="#线性筛法：-也叫欧拉筛-o-n" class="headerlink" title="线性筛法：(也叫欧拉筛)o(n)"></a>线性筛法：(也叫欧拉筛)o(n)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000010</span>;<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cnt;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> primes[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> st[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> num=scanner.nextInt();<br><br>        get_primes(num);<br>        System.out.println(cnt);<br>        <span class="hljs-comment">// System.out.println(Arrays.toString(primes));</span><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i]) &#123;<br>                primes[cnt++] = i;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>; primes[j] &lt;=n/i ; j++) &#123;<br>                st[primes[j]*i] = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">if</span> ·(i%primes[j]==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>主要思想是每个数都只能被自己的最小质因数排除,因为所有的合数都会被质数筛掉，这样每个数就不会被重复筛，那么理所当然的时间复杂度就是o（n）</p><hr><p>这时有人可能会说，有欧拉筛说这么多干嘛？</p><p>的确是的，以后我们用的都是时间最节约的欧拉筛，但是对于更多人而言，我觉得演变的思想理解，远比一个代码模板重要的多。</p><hr><p>所以筛质数的方法你理解了吗？😄</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021/7/6</title>
    <link href="/posts/3683252258.html"/>
    <url>/posts/3683252258.html</url>
    
    <content type="html"><![CDATA[<h2 id="每日的心情，和事情分享"><a href="#每日的心情，和事情分享" class="headerlink" title="每日的心情，和事情分享"></a>每日的心情，和事情分享</h2><span id="more"></span><p>之前见到的那个人今天又有见到，意外的是旁边还有人😄</p><hr><p>今天的状态还挺差的，就没有怎么学习，一下午等答辩最后都没有答上，也是挺难受的。</p><p>晚上去洗个澡，来写了这篇日记，没什么感慨的，就是总结一下今天，最近的状态挺糟糕的，希望能早点脱离出这种状态</p><p>之后为了算法竞赛和一些事情的考虑，准备转战c++了，又要忙一阵了，想了想这不就是我们这个年纪该做的事吗，如果现在做着80岁了还能做的事，到了那个年纪的我也会对自己很失望吧。</p><hr><p>之后我准备试着搭一下oj，不知道会不会成功hh</p><p>如果成功了，之后的教学就又会轻松很多，刷题也可以来我这里了，配着在B站的课程一起食用应该是不错</p><hr><p>有时候累了倦了就停下来休息休息，没什么的。</p><p><strong>我是这样觉得：开心的时候呢就笑，痛了就哭，困了就睡，喜欢就爱，饿了就吃，恨了就放手，累了就休息，生活不易，简单那才是最好</strong></p><p class="note note-success">希望看了这篇文章的人都能掌握自己的航舵，走向自己精彩的人生！！</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次献血</title>
    <link href="/posts/2673705868.html"/>
    <url>/posts/2673705868.html</url>
    
    <content type="html"><![CDATA[<p>今天第一次献血，也算是完成了自己之前比较怕的事情吧！</p><span id="more"></span><p>原本没有想着去，因为室友的一句话，就动了要去的念头。其实还真的蛮怕的，主要的恐惧还是因为未知，所以就想要挑战一下自己吧。</p><p>另一方面呢想了想，其实对于我们来说不会任何坏处，甚至会有好处，如果我们的这一点点的努力，真的可以让一些人得到帮助，我觉得就凭这个也值得我去做。</p><p>种种原因驱使着我去了献血······</p><p>献完血后，之前的恐惧也就烟消云散了，这算不算战胜了自己呢？hh</p><p>有时候我们拼了命的翻山越岭，去越过山头，有时候山的另一面可能真的没啥，或许还比山的这面还要差，有时候我们很怕的事情到头来也不过是过眼云烟</p><p><strong>不管怎样吧，常怀赤子之心，不坠青云之志，我觉得就够了，希望之后我在任何事情上，都会有今天的勇气去不断战胜自己，加油吧！</strong></p><p>献的时候忘记照相了，就附俩张献血证的照片吧hh：</p><img src="http://jin-xuanjie.gitee.io/note-pad\image-20210705185335114.png" alt="image-20210705185335114" style="zoom: 25%;" /><img src="http://jin-xuanjie.gitee.io/note-pad\image-20210705185434461.png" alt="image-20210705185434461" style="zoom:33%;" />]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL语句</title>
    <link href="/posts/3038647440.html"/>
    <url>/posts/3038647440.html</url>
    
    <content type="html"><![CDATA[<p>sql语句是操作对数据库和表增删改查的基础，并且sql语句是对任何关系型数据库系统都是通用的，本笔记以mysql为例子哦！</p><span id="more"></span><h1 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h1><h2 id="DQL语句"><a href="#DQL语句" class="headerlink" title="DQL语句"></a>DQL语句</h2><h3 id="简单的查询："><a href="#简单的查询：" class="headerlink" title="简单的查询："></a>简单的查询：</h3><p>select 字段名1，字段名2， from 表名。</p><p>提示：</p><ul><li>任何一条sql语句以；结尾</li><li>sql不区分大小写</li></ul><p>我们的字段可以参与数学运算</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210121616640.png" alt="image-20210210121616640"></p><p>也可以为这个数学运算后的字段重新改个名，如下：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210121712952.png" alt="image-20210210121712952"></p><p>若有中文要括上单引号；</p><p>标准sql语句中要求字符串使用单引号括起来。</p><p>查询所有字段：</p><p>实际开发中不建议使用。</p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>利用where来限制条件</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210122302072.png" alt="image-20210210122302072"></p><p>执行顺序：先from，然后where，最后select</p><p>对于不等于来说可以使用！=也可以使用&lt;&gt;，都是可以的。 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210123159560.png" alt="image-20210210123159560"></p><p>and可以</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210123325041.png" alt="image-20210210123325041"></p><p>between可以（between是闭区间）</p><p>between and使用的时候小数字在前，大数字在后。</p><p>between and也可以用在字符方面，此时是左闭右开<img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210124021482.png" alt="image-20210210124021482"></p><p>数据库中null不是一个值，代表什么都没有，为空</p><p>空不是一个值，不能用等号来衡量，</p><p>必须使用is null 或者is not null。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210125341124.png" alt="image-20210210125341124"></p><p>查询时or和and是由优先级的。</p><p>当运算符的优先级不确定的时候利用小括号。</p><p>in关键字：</p><p>in等同于or</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210125651759.png" alt="image-20210210125651759"></p><p>in后面的不是区间，而只是一个值。</p><p>当然有in 也就也有not in</p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>必须掌握%和_的使用</p><p>%代表任意多个字符，_代表任意的一个字符。</p><h3 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h3><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210134930895.png" alt="image-20210210134930895"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210135420494.png" alt="image-20210210135420494"></p><p>执行顺序，oredr by是最后执行的。</p><h3 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h3><p>输入一行，输出一行。</p><p>只要数学表达式中有null出现，最终结果就必须是null</p><p>ifnull（）空处理函数</p><p>ifnull（可能为null的数据，被当做什么处理）：单行处理</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210154445168.png" alt="image-20210210154445168"></p><h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><ul><li>count 技术</li><li>sum求和</li><li>avg平均值</li><li>max最大值</li><li>min最小值</li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210153555737.png" alt="image-20210210153555737"></p><p>也叫多行处理函数：输入多行，最终输出结果是一行。</p><p>分组函数会自动忽略空（null）。</p><h3 id="group-by-和having"><a href="#group-by-和having" class="headerlink" title="group by 和having"></a>group by 和having</h3><p>group by：按照某个字段或者某些字段进行分组</p><p>having：对分组之后的数据进行再次的过滤。</p><p>分组函数都会和group一起使用。分组函数都会在group by结束之后再执行的。没有group by整张表就自成一组。</p><p>where后面不能用分组函数。</p><p>再写一遍顺序：</p><ol><li>from</li><li>where</li><li>group by</li><li>having</li><li>select</li><li>order by</li></ol><p>若一条sql语句中有group by的话，select后面只能加分组函数和分组的字段，其他的一律不行。</p><p>多个字段可以联合起来分组</p><p> <img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210191259506.png" alt="image-20210210191259506"></p><p>可以用where过滤的话，尽量在where就把数据过滤掉。</p><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210192727699.png" alt="image-20210210192727699"></p><p>distinct只能出现在所有字段的最前面，如果多条字段说明是联合去重。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210194456287.png" alt="image-20210210194456287"></p><h3 id="完整的dql语句："><a href="#完整的dql语句：" class="headerlink" title="完整的dql语句："></a>完整的dql语句：</h3><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210192537089.png" alt="image-20210210192537089"></p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>一一般来说。大部分都不是从单表中查询数据，一般都是多张联合取出的最终结果，在实际开发中，一般一个业务都会对应多张表。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210194906219.png" alt="image-20210210194906219"> </p><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><p>根据语法：</p><ul><li>sql92</li><li>sql99</li></ul><p>根据连接方式</p><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li><li>全连接（很少用）</li></ul><h5 id="笛卡尔积现象"><a href="#笛卡尔积现象" class="headerlink" title="笛卡尔积现象"></a>笛卡尔积现象</h5><p>当俩张表进行连接查询的时候，没有任何条件限制，最终查询结果条数是俩张表记录条数的乘积。</p><p>关于表的别名：</p><ul><li>执行效率高</li><li>可读性好</li></ul><p>避免笛卡尔现象的方法是加条件来进行过滤。</p><p>但是要注意的是，避免了笛卡尔积现象，并不会减少记录的匹配次数，只不过显示的时候显示的是有效数据。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210203216468.png" alt="image-20210210203216468"></p><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p>条件是等量关系</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210212925382.png" alt="image-20210210212925382"></p><p>上述是sql99语法</p><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210224100786.png" alt="image-20210210224100786"></p><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210231319594.png" alt="image-20210210231319594"></p><p>假象复制一份相同的，然后自连接。</p><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>假设a，b表进行连接，使用外连接的话，ab俩张表中一张是主表，一张是副表，主要查询主表上的数据，捎带着查询副表，当副表中没有和主表数据匹配上的自动模拟出null来与之匹配。 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211075820541.png" alt="image-20210211075820541"></p><h4 id="三张以上表查询"><a href="#三张以上表查询" class="headerlink" title="三张以上表查询"></a>三张以上表查询</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211081708047.png" alt="image-20210211081708047"></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>select语句嵌套select语句查询</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211085057173.png" alt="image-20210211085057173"></p><p>where里嵌套（上述）</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211105112132.png" alt="image-20210211105112132"></p><p>这个是from里嵌套</p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>可以将查询结果集相加</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211162901983.png" alt="image-20210211162901983"></p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>limit可以限制条数</p><p>语法是 limit 起点，个数</p><p>分页查询全靠这玩意。</p><p>limit是sql语句中最后执行的一个环节。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211164115218.png" alt="image-20210211164115218"></p><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>建表语句语法格式：</p><p>create table 表名{</p><p>​    字段名 1 数据类型，</p><p>​    字段名 2 数据类型，</p><p>​    字段名 3 数据类型，</p><p>}</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211164701465.png" alt="image-20210211164701465"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211180423765.png" alt="image-20210211180423765"></p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>insert语句：</p><p>insert into 表名（字段名1，2，3，4） values（值1，2，3，4）；</p><p>字段如果只写部分的，就会为其他的字段附上null</p><p>可以省略前面的字段，但是要按照顺序，并且全写。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211182040917.png" alt="image-20210211182040917"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211182618059.png" alt="image-20210211182618059"></p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>可以用default来设定默认值</p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>update</p><p>update 表名 set 字段名=值······ where 条件</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211183216776.png" alt="image-20210211183216776"></p><p>没有限制条件，整张表所有字段全部更新。</p><h2 id="删除数据（表）"><a href="#删除数据（表）" class="headerlink" title="删除数据（表）"></a>删除数据（表）</h2><p>删除表：drop table 表名</p><p>语法格式</p><p>delete from 表名 where 条件；</p><p>没有条件将全部删除</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211184212309.png" alt="image-20210211184212309"></p><h2 id="对于表结构的修改"><a href="#对于表结构的修改" class="headerlink" title="对于表结构的修改"></a>对于表结构的修改</h2><p> 使用工具完成就可以了，因为实际开发中，表一旦设计好，对表结构的修改是很少的。</p><p>增删改查有一个术语：crud操作</p><p>create（增） retrieve（检索） update（修改） delete（删除）</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>添加约束的目的时为了保证表的数据的合法性，有效性，完整性。</p><p>常见的约束：</p><ul><li>非空约束（not null）</li><li>唯一约束（unique）唯一性但可以为null</li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211200536663.png" alt="image-20210211200536663"></p><ul><li>主键约束（primary key）不可为空也不能重复 </li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211201831871.png" alt="image-20210211201831871"></p><p>主键应该不和业务挂钩。<img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211202657776.png" alt="image-20210211202657776"></p><p>可以以这种方式，自动添加自增的主键。</p><ul><li>外键约束（foreign key）</li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211203647137.png" alt="image-20210211203647137"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211204005433.png" alt="image-20210211204005433"></p><p>外键值可以为null</p><p>被引用的字段可以不用为主键，但至少要有unique约束，是独一无二的。</p><ul><li>检查约束（check）：oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</li></ul><h2 id="悲观锁（行级锁）和乐观锁"><a href="#悲观锁（行级锁）和乐观锁" class="headerlink" title="悲观锁（行级锁）和乐观锁"></a>悲观锁（行级锁）和乐观锁</h2><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210213222734274.png" alt="image-20210213222734274"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>sql语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>mysql</tag>
      
      <tag>sql语言</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK动态代理</title>
    <link href="/posts/3755745285.html"/>
    <url>/posts/3755745285.html</url>
    
    <content type="html"><![CDATA[<p> 之后我们学到的AOP（面向切面编程）的底层就是这个哦，而这个的底层就是反射机制，至少要看一看反射机制再来看看这个呀！</p><span id="more"></span><h1 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h1><p>动态代理基于反射机制</p><p>掌握程度：</p><ul><li>什么是动态代理</li><li>知道动态代理能作什么</li></ul><p>使用代理模式的作用：</p><ul><li>功能增强：在原有的功能上，增加了额外的功能。新增加的功能叫做功能增强</li><li>控制访问：代理类不让你访问目标，例如商家不让用户访问厂家</li></ul><p>实现代理的方式：</p><ul><li>静态代理：<ul><li>自己手工实现，自己创建一个代理类</li><li>代理的目标类也是确定的<ul><li>实现简单，容易理解 </li></ul></li></ul></li><li>动态代理：在程序的执行过程中，使用jdk的反射机制，创建代理类对象，并动态的指定要代理的目标类<ul><li>静态代理中当目标类很多的时候，我们会使用动态代理<ul><li>因为目标类即使很多，代理类可以很少</li><li>当你修改了接口中的方法，不会影响代理类</li></ul></li></ul></li></ul><p>说白一点，动态代理就是具有创建对象的能力</p><h2 id="jdk动态代理的实现"><a href="#jdk动态代理的实现" class="headerlink" title="jdk动态代理的实现"></a>jdk动态代理的实现</h2><ul><li>jdk动态代理：<ul><li>使用java反射包中的类和接口实现动态代理功能</li><li>反射包java.lang.reflect，里面有三个类：<ul><li>invocationhandler<ul><li><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322185518876.png" alt="image-20210322185518876"></li></ul></li><li>Method<ul><li><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322185550552.png" alt="image-20210322185550552"></li></ul></li><li>Proxy<ul><li><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322185613718.png" alt="image-20210322185613718"></li></ul></li></ul></li></ul></li><li>cglib动态代理（了解）<ul><li>cglib是第三方的工具库，创建代理对象 </li><li>cglib原理是继承，通过继承目标类来创建它的子类，在子类中重写父类方法，实现功能的修改</li><li>正因为cgliv是继承，所以要求目标类和方法不是final的</li><li>cglib在很多框架中使用</li></ul></li></ul><p>cglib在代理效率上高于jdk。</p><p>但是一般的开发中不适用cglib，只需要理解即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tett1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        HelloService helloService=new HelloService();</span><br><span class="hljs-comment">//        helloService.sayHello(&quot;jxj&quot;);</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class c=Class.forName(<span class="hljs-string">&quot;com.jxj.HelloService&quot;</span>);<br>            Object obj=c.newInstance();<br>            Method m1 =c.getDeclaredMethod(<span class="hljs-string">&quot;sayHello&quot;</span>,String.class);<br>            Object retValue =m1.invoke(obj,<span class="hljs-string">&quot;jxj&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Class.forname后的参数必须带包名</p><p>上述是利用反射机制调用方法</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322190225001.png" alt="image-20210322190225001"></p><p>handler</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-comment">//必须实现InvocationHandler接口，完成代理类要做的功能(1.调用目标方法，2.执行功能增强)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySellHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Object target=<span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MySellHandler</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>   <span class="hljs-comment">// float price =factory.sell(amount);</span><br>        Object res =<span class="hljs-keyword">null</span>;<br><br>       res= method.invoke(target,args);<br>       <span class="hljs-keyword">if</span> (res!=<span class="hljs-keyword">null</span>)&#123;<br>           Float price = (Float) res;<br>           price+=<span class="hljs-number">25</span>;<br>           res=price;<br><br><br>       &#125;<br>        System.out.println(<span class="hljs-string">&quot;返你一个优惠卷&quot;</span>);<br><span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>mainshop</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainShop</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UsbSell factory =<span class="hljs-keyword">new</span> factory();<br>        InvocationHandler handler=<span class="hljs-keyword">new</span> MySellHandler(factory);<br>     Object proxy=   Proxy.newProxyInstance(factory.getClass().getClassLoader(),factory.getClass().getInterfaces(),handler);<br>        UsbSell usbSell=(UsbSell)proxy;<br>        <span class="hljs-keyword">float</span> price= usbSell.sell(<span class="hljs-number">1</span>);<br>        System.out.println(price);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322230835265.png" alt="image-20210322230835265"></p><h2 id="动态代理的功能"><a href="#动态代理的功能" class="headerlink" title="动态代理的功能"></a>动态代理的功能</h2><p>可以在不改目标方法功能的前提下，可以在代理中增强自己的代码。</p><p>动态代理必须要有自己的接口</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>原生JAVAWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>计算机技术</tag>
      
      <tag>模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/posts/2414116852.html"/>
    <url>/posts/2414116852.html</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>想用java连接数据库吗，jdbc就是原生的连接数据库技术噢！</p><p>需先了解一种数据库，本笔记以mysql为例子</p><span id="more"></span><p>JDBC:java database connectivity（java语言连接数据库）</p><p>JDBC的本质：jdbc是sun公司指定的一套接口 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210160127732.png" alt="image-20210210160127732"></p><h2 id="JDBC开发前的准备工作"><a href="#JDBC开发前的准备工作" class="headerlink" title="JDBC开发前的准备工作"></a>JDBC开发前的准备工作</h2><p>先有对应的jar包，先从官网下载对应的驱动jar包，然后将其配置到环境变量classpath中。</p><h2 id="JDBC编程六步"><a href="#JDBC编程六步" class="headerlink" title="JDBC编程六步"></a>JDBC编程六步</h2><ol><li><p>注册驱动（告诉java程序，即将连接的是哪个数据库）</p></li><li><p>获取链接（jvm与数据库进程之间的进程打开了，重量级的，所以一定要记得关闭）</p></li><li><p>获取数据库操作对象（专门执行sql语句的对象）</p></li><li><p>执行sql语句（DQL,DML）</p></li><li><p>处理查询结果集（只有处理的是select这种查询语句的时候，才有这个第五步）</p></li><li><p>释放资源（使用完资源要记得关闭资源，java和数据库属于进程间的东西，使用完要关闭）</p></li></ol><p>连接实例：（如下）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test103</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Statement stmt =<span class="hljs-keyword">null</span>;<br>Connection connection =<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>        Driver driver =<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver();<br><br>            DriverManager.registerDriver(driver);<br>            String url=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>;<br>            String user=<span class="hljs-string">&quot;root&quot;</span>;<br>            String password=<span class="hljs-string">&quot;jxj123456&quot;</span>;<br><br>            connection=DriverManager.getConnection(url,user,password);<br>            System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>+connection);<br>stmt=connection.createStatement();<span class="hljs-comment">//statement专门执行sql语句的</span><br>String sql =<span class="hljs-string">&quot;insert into t_student(name) values(&#x27;jxj&#x27;)&quot;</span>;<br><span class="hljs-keyword">int</span> count =stmt.executeUpdate(sql);<span class="hljs-comment">//是影响数据库的记录条数</span><br>System.out.println(count ==<span class="hljs-number">0</span>?<span class="hljs-string">&quot;保存失败&quot;</span>:<span class="hljs-string">&quot;保存成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(stmt !=<span class="hljs-keyword">null</span>)&#123;<br>stmt.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(connection !=<span class="hljs-keyword">null</span>)&#123;<br>connection.close();<br>&#125;&#125;<span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>jdbc中sql语句的最后不需要有分号； 写上报错</p><p>上述的注册驱动不常用，常用的注册驱动使用反射机制，因为这个接收的是字符串，我们可以使用配置文件。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210212234248396.png" alt="image-20210212234248396"></p><h2 id="url："><a href="#url：" class="headerlink" title="url："></a>url：</h2><p>统一资源定位符（网络中某个资源的绝对路径）</p><p>url包括协议+ip+端口+资源名</p><h2 id="使用资源绑定器-删除"><a href="#使用资源绑定器-删除" class="headerlink" title="使用资源绑定器(删除)"></a>使用资源绑定器(删除)</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test103</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ResourceBundle bundle =ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>String driver =bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>String url =bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>String user =bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>String password =bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br>Statement stmt =<span class="hljs-keyword">null</span>;<br>Connection connection =<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>Class.forName(driver);<br>       connection=DriverManager.getConnection(url,user,password);<br>            System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>+connection);<br>stmt=connection.createStatement();<span class="hljs-comment">//statement专门执行sql语句的</span><br>String sql =<span class="hljs-string">&quot;delete from t_student where name =&#x27;jxj&#x27; &quot;</span>;<br><span class="hljs-keyword">int</span> count =stmt.executeUpdate(sql);<span class="hljs-comment">//是影响数据库的记录条数，executeupdate只能进行增删改</span><br>System.out.println(count ==<span class="hljs-number">0</span>?<span class="hljs-string">&quot;删除失败&quot;</span>:<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(stmt !=<span class="hljs-keyword">null</span>)&#123;<br>stmt.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(connection !=<span class="hljs-keyword">null</span>)&#123;<br>connection.close();<br>&#125;&#125;<span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>jdbv.properties:</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/bjpn</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">jxj123456</span><br></code></pre></div></td></tr></table></figure><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210213001734130.png" alt="image-20210213001734130"></p><p>sql语句结果集的本质（上图）</p><p>jdbc中所有的下标都从1开始</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test103</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ResourceBundle bundle =ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>String driver =bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>String url =bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>String user =bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>String password =bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>Statement stmt =<span class="hljs-keyword">null</span>;<br>Connection connection =<span class="hljs-keyword">null</span>;<br>ResultSet rs =<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><br><br>           Class.forName(driver);<br>            <br><br>            connection=DriverManager.getConnection(url,user,password);<br>            System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>+connection);<br>stmt=connection.createStatement();<span class="hljs-comment">//statement专门执行sql语句的</span><br>String sql =<span class="hljs-string">&quot;select * from t_student &quot;</span>;<br>rs =stmt.executeQuery(sql);<span class="hljs-comment">//是影响数据库的记录条数</span><br><span class="hljs-keyword">while</span>(rs.next())&#123;<br>System.out.println(rs.getString(<span class="hljs-string">&quot;no&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;classno&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;sex&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;birth&quot;</span>));<br>&#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(rs !=<span class="hljs-keyword">null</span>)&#123;<br>rs.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(stmt !=<span class="hljs-keyword">null</span>)&#123;<br>stmt.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(connection !=<span class="hljs-keyword">null</span>)&#123;<br>connection.close();<br>&#125;&#125;<span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>查询数据库数据</p><p>增删改数据时返回的是int</p><p>查询时返回的是结果集</p><p>利用getstring的方法来获取，参数可以是列数也可以是字段名称</p><p>还可以以其他类型获取，比如用getint获取可以进行运算。</p><h2 id="IDEA-jdbc环境的准备"><a href="#IDEA-jdbc环境的准备" class="headerlink" title="IDEA jdbc环境的准备"></a>IDEA jdbc环境的准备</h2><p>先有jdbc的jar包，然后右键模块点open module setting 然后点加号把jar包引进来即可</p><h3 id="powerdesigner的下载和破解"><a href="#powerdesigner的下载和破解" class="headerlink" title="powerdesigner的下载和破解"></a>powerdesigner的下载和破解</h3><p>将破解文件替换入安装目录当中即可</p><p>简单的使用看：</p><p><a href="https://www.bilibili.com/video/BV1Bt41137iB?p=16">JDBC从入门到精通视频教程-JDBC实战精讲_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><h3 id="连接jdbc去登陆的案例"><a href="#连接jdbc去登陆的案例" class="headerlink" title="连接jdbc去登陆的案例"></a>连接jdbc去登陆的案例</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><span class="hljs-keyword">import</span> com.mysql.cj.protocol.Resultset;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Map&lt;String,String&gt; userLoginInfo=initUI();<br>        <span class="hljs-keyword">boolean</span> a =login(userLoginInfo);<br>        System.out.println(a?<span class="hljs-string">&quot;登录成功&quot;</span>:<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>&#123;<br>        Connection conn =<span class="hljs-keyword">null</span>;<br>        Statement stmt =<span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>            stmt =conn.createStatement();<br>            String sql=<span class="hljs-string">&quot;select * from t_user where loginName=&#x27;&quot;</span>+userLoginInfo.get(<span class="hljs-string">&quot;loginName&quot;</span>)+<span class="hljs-string">&quot;&#x27;and loginPwd=&#x27;&quot;</span>+userLoginInfo.get(<span class="hljs-string">&quot;loginPwd&quot;</span>)+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            rs=  stmt.executeQuery(sql);<br>            <span class="hljs-keyword">if</span> (rs.next())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title">initUI</span><span class="hljs-params">()</span> </span>&#123;<br>        Scanner s =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>        String loginName =s.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>        String loginPwd =s.nextLine();<br>        Map&lt;String,String&gt; userLoginInfo =<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginName&quot;</span>,loginName);<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginPwd&quot;</span>,loginPwd);<br>        <span class="hljs-keyword">return</span> userLoginInfo;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>上述的验证方法很容易产生sql注入</p><p>用户输入的信息中包含sql语句的关键字，这些关键字参与sql语句的编译过程。进而达到黑进去的目的。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210213115833311.png" alt="image-20210213115833311"></p><p>如何不会产生sql注入</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><br><span class="hljs-keyword">import</span> com.mysql.cj.protocol.Resultset;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Map&lt;String,String&gt; userLoginInfo=initUI();<br>        <span class="hljs-keyword">boolean</span> a =login(userLoginInfo);<br>        System.out.println(a?<span class="hljs-string">&quot;登录成功&quot;</span>:<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>&#123;<br>        Connection conn =<span class="hljs-keyword">null</span>;<br>        PreparedStatement ps =<span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        String loginName =userLoginInfo.get(<span class="hljs-string">&quot;loginName&quot;</span>);<br>        String loginPwd=userLoginInfo.get(<span class="hljs-string">&quot;loginPwd&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>            String sql=<span class="hljs-string">&quot;select * from t_user where loginName= ? and loginPwd= ?&quot;</span>;<br>            ps=conn.prepareStatement(sql);<br>            ps.setString(<span class="hljs-number">1</span>,loginName);<br>            ps.setString(<span class="hljs-number">2</span>,loginPwd);<br>            rs=  ps.executeQuery();<br>            <span class="hljs-keyword">if</span> (rs.next())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ps.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title">initUI</span><span class="hljs-params">()</span> </span>&#123;<br>        Scanner s =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>        String loginName =s.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>        String loginPwd =s.nextLine();<br>        Map&lt;String,String&gt; userLoginInfo =<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginName&quot;</span>,loginName);<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginPwd&quot;</span>,loginPwd);<br>        <span class="hljs-keyword">return</span> userLoginInfo;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>利用preparestatement预编译的方法来预防。</p><h3 id="preparestatement和statement的对比"><a href="#preparestatement和statement的对比" class="headerlink" title="preparestatement和statement的对比"></a>preparestatement和statement的对比</h3><ul><li>后者存在sql注入问题，前者完美解决</li><li>后者编译一次执行一次，前者只编译一次，效率高</li><li>前者会在编译时进行安全检查</li><li>综上preparestatement使用较多</li></ul><p>那什么时候使用statement呢？</p><ul><li>在业务方面需要进行sql语句拼接的。必须使用statement</li></ul><h2 id="jdbc的事务处理"><a href="#jdbc的事务处理" class="headerlink" title="jdbc的事务处理"></a>jdbc的事务处理</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        PreparedStatement ps =<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>            conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>            String sql=<span class="hljs-string">&quot;update t_account set Money =? where Account =?&quot;</span>;<br>            ps =conn.prepareStatement(sql);<br>            ps.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>);<br>            ps.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;111&quot;</span>);<br>            <span class="hljs-keyword">int</span> count =ps.executeUpdate();<br>            ps.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">20000</span>);<br>            ps.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;222&quot;</span>);<br>             count +=ps.executeUpdate();<br>             conn.commit();<br>            System.out.println(count ==<span class="hljs-number">2</span>?<span class="hljs-string">&quot;转账成功&quot;</span>:<span class="hljs-string">&quot;转账失败&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            <span class="hljs-keyword">if</span> (conn !=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.rollback();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;&#125;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ps!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<span class="hljs-keyword">if</span> (conn!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>重点：</p><ul><li>conn.setAutoCommit(false);</li><li>conn.commit;</li><li>conn.rollback;</li></ul><h2 id="建立util来简化代码"><a href="#建立util来简化代码" class="headerlink" title="建立util来简化代码"></a>建立util来简化代码</h2><p>DBUtil：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc.DBUtil;<br><br><span class="hljs-keyword">import</span> com.mysql.cj.protocol.Resultset;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DBUtil</span> </span>&#123;<br>    <span class="hljs-comment">//为什么要用私有的构造方法呢？</span><br>    <span class="hljs-comment">//为了防止你new对象。</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">DBUtil</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br><br>         Connection conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>         <span class="hljs-keyword">return</span> conn;<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;<br>         <span class="hljs-keyword">if</span> (rs !=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 rs.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">if</span> (ps !=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 ps.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">if</span> (conn !=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 conn.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br>         &#125;<br>     &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>主方法调用，并且使用模糊查询：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><br><span class="hljs-keyword">import</span> com.bjpn.jdbc.DBUtil.DBUtil;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        PreparedStatement ps=<span class="hljs-keyword">null</span>;<br>        ResultSet rs=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>           conn= DBUtil.getConnection();<br>            String sql=<span class="hljs-string">&quot;select ename from emp where ename like ?&quot;</span>;<br>            ps=conn.prepareStatement(sql);<br>            ps.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;_A%&quot;</span>);<br>            rs=ps.executeQuery();<br>            <span class="hljs-keyword">while</span> (rs.next())&#123;<br>                System.out.println(rs.getString(<span class="hljs-string">&quot;ename&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            DBUtil.close(conn,ps,rs);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="DAO封装"><a href="#DAO封装" class="headerlink" title="DAO封装"></a>DAO封装</h2><p>DAO是database Access Object 数据库访问对象</p><p>作用：数据库访问对象在开发时提供针对某张表的操作细节</p><p>优点：代码简洁</p><p>DAO类：提供数据库访问对象的类</p><h3 id="DAO类开发规则"><a href="#DAO类开发规则" class="headerlink" title="DAO类开发规则"></a>DAO类开发规则</h3><ul><li>一个DAO类封装的是一张表的开发细节</li><li>DAO类命名规则：表名+Aao</li><li>DAO类所在包命名规则：公司网站域名（倒过来）.dao</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>原生JAVAWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>计算机技术</tag>
      
      <tag>连接数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/posts/2691471937.html"/>
    <url>/posts/2691471937.html</url>
    
    <content type="html"><![CDATA[<p>准备做一些博客的说明，也宣传一下假期准备在b站做视频了！</p><span id="more"></span><h2 id="博客说明："><a href="#博客说明：" class="headerlink" title="博客说明："></a>博客说明：</h2><p>7月末我会在b站做基础的数据结构和算法视频，此博客也会用作辅助教学的工具，在这里发布相关材料和题解，笔记等等,欢迎大家来观看。</p><p><strong>也会在这里分享每天学习和生活的趣事，心情，毕竟生活才是主旋律嘛，比任何东西都要重要得多。</strong></p><hr><p>如果觉得我分享的东西好，可以长期关注这个博客，会持续更新的！！</p><br><p>b站地址在页面底部哦👇👇👇👇👇👇，欢迎来一起学习和讨论</p><p class="note note-success">此博客也仅仅用作学习，和交流，如果有什么建议，欢迎给我留言</p>]]></content>
    
    
    <categories>
      
      <category>关于博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客说明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/posts/3084993745.html"/>
    <url>/posts/3084993745.html</url>
    
    <content type="html"><![CDATA[<p>本文介绍了到目前为止，几乎可以见到的排序算法，共十种。</p><span id="more"></span><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><ul><li>内部排序：指将需要的数据加载到内存来进行排序<ul><li>插入排序<ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>选择排序<ul><li>简单选择排序</li><li>堆排序</li></ul></li><li>交换排序<ul><li>冒泡排序</li><li>快速排序</li></ul></li><li>归并排序</li><li>基数排序</li></ul></li><li>外部排序：数据量很大时，会使用这个</li></ul><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间频度：</p><ul><li>一个算法花费时间与算法中语句的执行次数成正比，那个算法中语句执行次数多，他花费时间就多。</li><li>一个算法中执行的语句次数称为时间频度<ul><li>可以忽略常数项</li><li>可以忽略系数</li><li>可以忽略低次项</li></ul></li></ul><p>忽略后的东西就是时间复杂度，也可以想成时间复杂度是时间频度的超级简略版</p><h3 id="常数阶："><a href="#常数阶：" class="headerlink" title="常数阶："></a>常数阶：</h3><p>无论代码执行了多少行，只要没有循环等复杂结构，整个代码的时间复杂度就是o(1)</p><h3 id="对数阶：以2为底数的对数为例"><a href="#对数阶：以2为底数的对数为例" class="headerlink" title="对数阶：以2为底数的对数为例"></a>对数阶：以2为底数的对数为例</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>i*=<span class="hljs-number">2</span>;&#125;<br></code></pre></div></td></tr></table></figure><p>上述的时间复杂度就是以二为底数，可以尝试着这么理解</p><p>假设x次之后循环推出了，2的x次方=n。也就是说x=以二为底数的对数</p><h3 id="线性阶："><a href="#线性阶：" class="headerlink" title="线性阶："></a>线性阶：</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>j=i;<br>j++&#125;<br></code></pre></div></td></tr></table></figure><p>这段代码会执行n遍，会随着n的变化而变化</p><h3 id="线性对数阶"><a href="#线性对数阶" class="headerlink" title="线性对数阶"></a>线性对数阶</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(m=<span class="hljs-number">1</span>;m&lt;n;m++)&#123;<br>i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>i*=<span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里嵌套了一层，一个线性和对数，所以这就是线性对数阶</p><h3 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h3><p>就是双层的for循环就不提了，还有高次方阶到最后其实是一个道理，都是一样的东西</p><h2 id="空间复杂度（简略）"><a href="#空间复杂度（简略）" class="headerlink" title="空间复杂度（简略）"></a>空间复杂度（简略）</h2><ul><li>类似于时间复杂度的讨论，一个算法的空间复杂度定义为该算法所耗费的存储空间，他也是问题规模n的函数</li><li>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的亮度，有的算法占用的空间规模和n有关</li><li>在做算法分析的时候，主要讨论的还是时间复杂度，从用户体验上看，更看重的是程序执行的速度，一些缓存产品和算法本质就是用空间换时间</li></ul><h2 id="冒泡排序（bubble-sorting）"><a href="#冒泡排序（bubble-sorting）" class="headerlink" title="冒泡排序（bubble sorting）"></a>冒泡排序（bubble sorting）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length-<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">boolean</span> flag =<span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>                <span class="hljs-keyword">if</span>(arr[j+<span class="hljs-number">1</span>]&lt;arr[j])&#123;<br>                    flag=<span class="hljs-keyword">true</span>;<br>                    swap(arr,j+<span class="hljs-number">1</span>,j);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag==<span class="hljs-keyword">false</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a:arr)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;\t%d&quot;</span>,a);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> i1)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        temp=arr[i];<br>        arr[i]=arr[i1];<br>        arr[i1]=temp;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这个排序的本质是以俩俩邻着的兑换，每一次把最后的那个数排成自己想要的顺序，以此来排成顺序。</p><p>当然了，很容易看出，如果这个序列刚开始就比较整齐，那么这么多次循环简直是在浪费，所以就可以提出优化这个概念</p><p>所以上述代码上打了一个布尔标记，那么每一次小循环中，一旦换了位置那么必定说明，flag为true，也就是说还没有规整好，若一次都没有进去过就可以直接退出了</p><p>可以用System.currentTimeMills这个方法来获取1970到现在的毫秒</p><p>然后相减可以得到程序运行的时间差 </p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChooseSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,-<span class="hljs-number">1000</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">23</span>,<span class="hljs-number">45</span>,<span class="hljs-number">3</span>,<span class="hljs-number">53</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">512</span>,<span class="hljs-number">5</span>,<span class="hljs-number">45</span>,<span class="hljs-number">1235</span>,<span class="hljs-number">213</span>,<span class="hljs-number">5</span>,<span class="hljs-number">23</span>,<span class="hljs-number">523</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">321</span>,<span class="hljs-number">432</span>,<span class="hljs-number">14231</span>,<span class="hljs-number">432</span>,<span class="hljs-number">4</span>,<span class="hljs-number">12</span>,<span class="hljs-number">6534</span>,<span class="hljs-number">764</span>,<span class="hljs-number">856</span>,<span class="hljs-number">23</span>,<span class="hljs-number">12321</span>,<span class="hljs-number">3</span>,<span class="hljs-number">213</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">123</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">123</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">int</span> min =arr[i];<br>            <span class="hljs-keyword">int</span> minindex=i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i;j&lt;arr.length;j++)&#123;<br>                <span class="hljs-keyword">if</span> (min&gt;arr[j])&#123;<br>                min=arr[j];<br>                minindex=j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (arr[i]!=min)&#123;<br>                arr[minindex]=arr[i];<br>                arr[i]=min;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i:arr)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;\t%d&quot;</span>,i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> i1)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        temp=arr[i];<br>        arr[i]=arr[i1];<br>        arr[i1]=temp;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>从前面开始排序，有小的就直接换到前面来</p><h2 id="插入排序（insertion-sorting）"><a href="#插入排序（insertion-sorting）" class="headerlink" title="插入排序（insertion sorting）"></a>插入排序（insertion sorting）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertSort</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> arr[]= &#123;<span class="hljs-number">2</span>,<span class="hljs-number">65</span>,<span class="hljs-number">6</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">123</span>,<span class="hljs-number">213</span>,<span class="hljs-number">12</span>,<span class="hljs-number">675</span>&#125;;<br>insertSort(arr);<br>System.out.println(Arrays.toString(arr));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br><span class="hljs-comment">//这里把要排进去的值存起来</span><br><span class="hljs-comment">//然后永远跟自己的前一个进行比较</span><br><span class="hljs-keyword">int</span> insertvalue=arr[i];<br><span class="hljs-keyword">int</span> insertindex=i-<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (insertindex&gt;=<span class="hljs-number">0</span>&amp;&amp;insertvalue&lt;arr[insertindex]) &#123;<br>arr[insertindex+<span class="hljs-number">1</span>]=arr[insertindex];<br>insertindex--;<br>&#125;<br><span class="hljs-keyword">if</span> (insertindex!=i-<span class="hljs-number">1</span>) &#123;<br>arr[++insertindex]=insertvalue;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>排序算法的的时间好于冒泡排序，劣于选择排序</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>交换法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.function.IntPredicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">int</span>[] arr=&#123;<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">42</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">423</span>,<span class="hljs-number">4</span>,<span class="hljs-number">324</span>,<span class="hljs-number">32</span>,<span class="hljs-number">123</span>&#125;;<br>shellSort(arr);<br> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-comment">//      int temp=0;</span><br>      <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap =arr.length/<span class="hljs-number">2</span>; gap&gt;<span class="hljs-number">0</span>; gap/=<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i-gap; j &gt;=<span class="hljs-number">0</span>; j-=gap) &#123;<br><span class="hljs-keyword">if</span> (arr[j]&gt;arr[j+gap]) &#123;<br>swap(arr, j, j+gap);<br>&#125;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;希尔排序:&quot;</span>+(++count)+<span class="hljs-string">&quot;轮&quot;</span>+Arrays.toString(arr));<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp=arr[i];<br>    arr[i]=arr[j];<br>    arr[j]=temp;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>移位法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.function.IntPredicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>arr[i]=(<span class="hljs-keyword">int</span>)( Math.random()*<span class="hljs-number">800000</span>);<br>&#125;<br><span class="hljs-keyword">long</span> begin=System.currentTimeMillis();<br>shellSort(arr);<br><span class="hljs-keyword">long</span> end=System.currentTimeMillis(); <br>System.out.println(<span class="hljs-string">&quot;花费了：&quot;</span>+(end-begin));<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-comment">//      int temp=0;</span><br>      <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap =arr.length/<span class="hljs-number">2</span>; gap&gt;<span class="hljs-number">0</span>; gap/=<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">int</span> value =arr[i];<br><span class="hljs-keyword">int</span> index=i;<br><span class="hljs-keyword">while</span> (index-gap&gt;=<span class="hljs-number">0</span>&amp;&amp;arr[index-gap]&gt;value) &#123;<br>arr[index]=arr[index-gap];<br>index -=gap;<br>&#125;<br>arr[index]=value;<br>&#125;<br><span class="hljs-comment">//System.out.println(&quot;希尔排序:&quot;+(++count)+&quot;轮&quot;+Arrays.toString(arr));</span><br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp=arr[i];<br>    arr[i]=arr[j];<br>    arr[j]=temp;<br><br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这里和交换法最大的不同就是只要小就换位置，不管是否是正确位置，移位法利用着一个辅助指针来精确找到位置插进去，第二种这个希尔排序，快到离谱。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">800000</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">800000</span>; i++) &#123;<br>            arr[i]=(<span class="hljs-keyword">int</span>)( Math.random()*<span class="hljs-number">800000</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> begin=System.currentTimeMillis();<br>        quickSort(arr, <span class="hljs-number">0</span>, arr.length-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">long</span> end=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费了：&quot;</span>+(end-begin));<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-comment">// low,high 为每次处理数组时的首、尾元素索引</span><br><br>        <span class="hljs-comment">// 当low==high是表示该序列只有一个元素，不必排序了</span><br>        <span class="hljs-keyword">if</span> (low &gt;= high) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 选出哨兵元素和基准元素。这里左边的哨兵元素也是基准元素</span><br>        <span class="hljs-keyword">int</span> i = low, j = high, base = arr[low];<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-comment">// 右边哨兵从后向前找</span><br>            <span class="hljs-keyword">while</span> (arr[j] &gt;= base &amp;&amp; i &lt; j) &#123;<br>                j--;<br>            &#125;<br>            <span class="hljs-comment">// 左边哨兵从前向后找</span><br>            <span class="hljs-keyword">while</span> (arr[i] &lt;= base &amp;&amp; i &lt; j) &#123;<br>                i++;<br>            &#125;<br>            swap(arr, i, j); <span class="hljs-comment">// 交换元素</span><br>        &#125;<br>        swap(arr, low, j); <span class="hljs-comment">// 基准元素与右哨兵交换</span><br><br>        <span class="hljs-comment">// 递归调用，排序左子集合和右子集合</span><br>        quickSort(arr, low, j - <span class="hljs-number">1</span>);<br>        quickSort(arr, j + <span class="hljs-number">1</span>, high);<br><br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[],<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp=arr[i];<br>        arr[i]=arr[j];<br>        arr[j]=temp;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这个时间是非常快的</p><p>为什么哨兵元素和基准元素交换的时候是肯定符合顺序的？</p><p>因为是右边的元素先移动</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> []arr=&#123;<span class="hljs-number">8</span>,<span class="hljs-number">123</span>,<span class="hljs-number">21</span>,<span class="hljs-number">321</span>,<span class="hljs-number">3</span>,<span class="hljs-number">213</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">int</span> []temp=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br>        mergeSort(<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>,temp,arr);<br>        System.out.println(Arrays.toString(arr));<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span>[] temp,<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (left&lt;right)&#123;<br>            <span class="hljs-keyword">int</span> mid =(left+right)/<span class="hljs-number">2</span>;<br>            mergeSort(left,mid,temp,arr);<br>            mergeSort(mid+<span class="hljs-number">1</span>,right,temp,arr);<br>            merge(arr,left,mid,right,temp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> mid,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> []temp)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i=left;<br>        <span class="hljs-keyword">int</span> j=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<span class="hljs-comment">//指向temp数组的当前索引</span><br>        <span class="hljs-keyword">while</span> (i&lt;=mid&amp;&amp;j&lt;=right)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i]&lt;=arr[j])&#123;<br>                temp[t]=arr[i];<br>                t++;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                temp[t]=arr[j];<br>                t++;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (i&lt;=mid)&#123;<br>            temp[t]=arr[i];<br>            i++;<br>            t++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (j&lt;=right)&#123;<br>            temp[t]=arr[j];<br>            t++;<br>            j++;<br>        &#125;<br>        t=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tempLeft=left;<br>        <span class="hljs-keyword">while</span> (tempLeft&lt;=right)&#123;<br>            arr[tempLeft]=temp[t];<br>            t++;<br>            tempLeft++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>归并排序，可以说是一种分治，先把这个序列拆开，然后一点一点排然后最后合上</p><p>这里的速度来说的话和快速排序是不相上下的</p><h2 id="基数排序（桶排序）"><a href="#基数排序（桶排序）" class="headerlink" title="基数排序（桶排序）"></a>基数排序（桶排序）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RadixSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">800000</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">800000</span>; i++) &#123;<br>            arr[i]=(<span class="hljs-keyword">int</span>)( Math.random()*<span class="hljs-number">800000</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> begin=System.currentTimeMillis();<br>        radixSort(arr);<br><br>        <span class="hljs-keyword">long</span> end=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费了：&quot;</span>+(end-begin));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> max=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i]&gt;max)&#123;<br>                max=arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> maxLength=(max+<span class="hljs-string">&quot;&quot;</span>).length();<br>        <span class="hljs-keyword">int</span>[] bucketElementCounts=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">int</span>[][] bucket=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][arr.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,n=<span class="hljs-number">1</span>;i&lt;maxLength;i++,n*=<span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length;j++)&#123;<br>                <span class="hljs-keyword">int</span> digitOfElement=arr[j]/n%<span class="hljs-number">10</span>;<br>                bucket[digitOfElement][bucketElementCounts[digitOfElement]++]=arr[j];<br>            &#125;<br>            <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">10</span>;k++)&#123;<br>                <span class="hljs-keyword">if</span> (bucketElementCounts[k]!=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;bucketElementCounts[k];j++)<br>                    arr[index++]=bucket[k][j];<br>                &#125;<br>                bucketElementCounts[k]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>相当的快，要想知道这个有几位数，+””.length即可 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210419185958600.png" alt="image-20210419185958600"></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序是利用堆这种数据结构来设计的一种排序算法，堆排序是一种选择排序。 </p><p>堆是具有如下性质的完全二叉树：</p><ul><li>每个结点的值都等于或大于左右子节点就叫做大顶堆</li><li>反之就叫做小顶堆</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
