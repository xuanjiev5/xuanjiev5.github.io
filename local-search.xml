<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>容斥原理</title>
    <link href="/posts/3138397678.html"/>
    <url>/posts/3138397678.html</url>
    
    <content type="html"><![CDATA[<p>本文将讲述容斥原理的证明与应用</p><span id="more"></span><h1 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h1><p><strong>容斥原理看的时候真的很像小学的算面积的感觉，好多面积重叠后还学要减去并计算。其实背后是存在一个数论原理在的</strong></p><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><blockquote><p>在计数时，必须注意没有重复，没有遗漏。为了使重叠部分不被重复计算，人们研究出一种新的计数方法，这种方法的基本思想是：先不考虑重叠的情况，把包含于某内容中的所有对象的数目先计算出来，然后再把计数时重复计算的数目排斥出去，使得计算的结果既无遗漏又无重复，这种计数的方法称为容斥原理。</p></blockquote><p>以上呢是百度百科的原话，说个人话吧😁😁</p><p>说白了不就是要不重不漏的算出所有要计算的东西咯~</p><h2 id="给出一个例子方便理解"><a href="#给出一个例子方便理解" class="headerlink" title="给出一个例子方便理解"></a>给出一个例子方便理解</h2><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20211107222407285.png" alt="image-20211107222407285"></p><p>相信大家在初高中一定学过韦恩图，这个东西在各个地方以好理解著称频繁出现，那么我也用这个来解释一下~</p><p>现在抛出一个题目，我们要计算这三个圆占据的总面积，如何计算呢？</p><p>其实很简单：</p><p>s = 1 + 2 + 3 - 4 - 5 - 6 + 7；</p><p>那么我们很容易想到，会不会有一个通项公式去做出这个答案呢？</p><p>这时<strong>容斥原理</strong>就登场了：</p><p>​    <img src="http://jin-xuanjie.gitee.io/note-pad/image-20211107223345726.png" alt="image-20211107223345726"></p><h2 id="咋证明的呀？"><a href="#咋证明的呀？" class="headerlink" title="咋证明的呀？"></a>咋证明的呀？</h2><p>用到了组合数恒等式，之后会整理出来，先不说证明了。</p><h2 id="看一看题吧："><a href="#看一看题吧：" class="headerlink" title="看一看题吧："></a>看一看题吧：</h2><blockquote><p>给定一个整数 n 和 m 个不同的质数 p1,p2,…,pm。</p><p>请你求出 1∼n 中能被 p1,p2,…,pm 中的至少一个数整除的整数有多少个。</p><p>输入格式<br>第一行包含整数 n 和 m。</p><p>第二行包含 m 个质数。</p><p>输出格式<br>输出一个整数，表示满足条件的整数的个数。</p><p>数据范围<br>1≤m≤16,<br>1≤n,pi≤109<br>输入样例：<br>10 2<br>2 3<br>输出样例：<br>7</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-keyword">int</span> n, m;<br>LL res;    <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ ) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; m; i ++ ) <br>    &#123;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>, cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;&gt; j &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((LL)t * q[j] &lt;= n)<br>                &#123;<br>                    t *= q[j];<br>                    cnt ++ ;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <br>                &#123;<br>                    t = <span class="hljs-number">-1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cnt % <span class="hljs-number">2</span>)<br>            &#123;<br>                res += n / t;<br>            &#125;<br>            <span class="hljs-keyword">else</span> res -= n / t;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实考察容斥原理的这类题目吧，也不会很难，主要是考察你到底懂不懂这个东西</p><p>很多数论的定理和小学数奥的结论还是要多积累呀！！😃😃</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stringstream用法</title>
    <link href="/posts/1102605851.html"/>
    <url>/posts/1102605851.html</url>
    
    <content type="html"><![CDATA[<p>本文将介绍c++中stringstream类在算法竞赛中的常用方法</p><span id="more"></span><h1 id="stringstream"><a href="#stringstream" class="headerlink" title="stringstream"></a>stringstream</h1><p>首先呢使用stringstream之前我们要先包含进来一个头文件</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstring&gt;</span><span class="hljs-comment">//这个库里面不仅stringstream，我们只会用到stringstream</span></span><br></code></pre></div></td></tr></table></figure><p>那我们都能用这个做啥呢？让我娓娓道来😀</p><hr><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>大家有时候会有一个烦恼，你拿出了一个数字你想把他转成字符串，又或者你想把一个字符串转成数字，那么stringstream将满足你</p><p>看看代码吧：</p><h3 id="int-–-gt-string"><a href="#int-–-gt-string" class="headerlink" title="int –&gt;string"></a>int –&gt;string</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    stringstream sstream;<br>    string strResult;<br>    <span class="hljs-keyword">int</span> nValue = <span class="hljs-number">1000</span>;<br> <br>    <span class="hljs-comment">// 将int类型的值放入输入流中</span><br>    sstream &lt;&lt; nValue;<br>    <span class="hljs-comment">// 从sstream中抽取前面插入的int类型的值，赋给string类型</span><br>    sstream &gt;&gt; strResult;<br> <br>    cout &lt;&lt; <span class="hljs-string">&quot;[cout]strResult is: &quot;</span> &lt;&lt; strResult &lt;&lt; endl;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[printf]strResult is: %s\n&quot;</span>, strResult.<span class="hljs-built_in">c_str</span>());<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="string-–-gt-int"><a href="#string-–-gt-int" class="headerlink" title="string –&gt; int"></a>string –&gt; int</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br>   <span class="hljs-function">istringstream <span class="hljs-title">inbuf</span><span class="hljs-params">(<span class="hljs-string">&quot;-10&quot;</span>)</span></span>;<br>    nbuf &gt;&gt; n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;n = &quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>这里有个坑点，如果想多次进行类型转换，请把stringstream清空哈，说一下如何清空</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">ssin.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//重置状态标志</span><br>ssin.<span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//清空数据，因为这个很占内存，要及时清空数据</span><br></code></pre></div></td></tr></table></figure><h2 id="分割一行中的空格制表符等（课上讲过了）"><a href="#分割一行中的空格制表符等（课上讲过了）" class="headerlink" title="分割一行中的空格制表符等（课上讲过了）"></a>分割一行中的空格制表符等（课上讲过了）</h2><p>通用模板：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">string line;<br><br><span class="hljs-built_in">getline</span>(cin, line);<br><br><span class="hljs-function">stringstream <span class="hljs-title">ssin</span><span class="hljs-params">(line)</span></span>;<br><br>string node;<br><br><span class="hljs-keyword">while</span> (ssin &gt;&gt; node)<br>&#123;<br><span class="hljs-comment">//处理输入细节</span><br>&#125;<br><span class="hljs-comment">//处理离线细节</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="多个字符串的拼接"><a href="#多个字符串的拼接" class="headerlink" title="多个字符串的拼接"></a>多个字符串的拼接</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    stringstream sstream;<br> <br>    <span class="hljs-comment">// 将多个字符串放入 sstream 中</span><br>    sstream &lt;&lt; <span class="hljs-string">&quot;first&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;string,&quot;</span>;<br>    sstream &lt;&lt; <span class="hljs-string">&quot; second string&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;strResult is: &quot;</span> &lt;&lt; sstream.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br> <br>    <span class="hljs-comment">// 清空 sstream</span><br>    sstream.<span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    sstream &lt;&lt; <span class="hljs-string">&quot;third string&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;After clear, strResult is: &quot;</span> &lt;&lt; sstream.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>利用+运算符也是可以的啦~~😀😀（区别是有的，但是先不讲，在算法竞赛中不会卡这么死）</p><p class="note note-success">stringstream，你学会了吗😁😁</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++教案</title>
    <link href="/posts/182611664.html"/>
    <url>/posts/182611664.html</url>
    
    <content type="html"><![CDATA[<p>本文分享琴理工作室算法组c++教案</p><span id="more"></span><p>此c++教案只针对于算法竞赛入门使用，几乎涵盖了算法竞赛中c++的所有用法，请认真观看呀~</p><p><a href="https://gitlab.jxj777.top/usr/img/in_out.docx">c++中的输入输出与顺序结构</a></p><p><a href="https://gitlab.jxj777.top/usr/img/if_structure.docx">c++中的判断</a></p><p><a href="https://gitlab.jxj777.top/usr/img/for_while.docx">c++中的循环</a></p><p><a href="https://gitlab.jxj777.top/usr/img/array.docx">c++中的数组</a></p><p><a href="https://gitlab.jxj777.top/usr/img/string.docx">c++中的字符串</a></p><p><a href="https://gitlab.jxj777.top/usr/img/bitOperation_funcution.docx">c++中的函数</a></p><p><a href="https://gitlab.jxj777.top/usr/img/STL.docx">c++中的stl模板库</a></p><p><a href="https://gitlab.jxj777.top/usr/img/struct_quote_pointer.docx">c++中的指针，结构体，引用</a></p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>琴理工作室选拔赛题解</title>
    <link href="/posts/3009977438.html"/>
    <url>/posts/3009977438.html</url>
    
    <content type="html"><![CDATA[<p>本文是琴理工作室算法组第一次选拔赛的题解</p><span id="more"></span><h1 id="题解？（给出思路）"><a href="#题解？（给出思路）" class="headerlink" title="题解？（给出思路）"></a>题解？（给出思路）</h1><p>本文不会出现任何代码，若想观看代码，请移步▶▶ <a href="https://gitee.com/jin-xuanjie/qin-li-studio-algorithm-group/tree/master/firstTrials">选拔赛代码</a></p><h2 id="难度？"><a href="#难度？" class="headerlink" title="难度？"></a>难度？</h2><p>还好吧，几乎都是秒出思路的题</p><h3 id="T1（签到题）"><a href="#T1（签到题）" class="headerlink" title="T1（签到题）"></a>T1（签到题）</h3><blockquote><p>其实就是扫描一遍数组去找<strong>是否存在</strong>这个特定的值。可能是好多人题目没读懂？</p></blockquote><h3 id="T2（中档题）"><a href="#T2（中档题）" class="headerlink" title="T2（中档题）"></a>T2（中档题）</h3><blockquote><p>利用哈希的思想（不懂的也没关系）</p><p>先从头到尾扫描一遍，然后记录出每个字符出现的次数，然后再次扫描，扫描出字符个数为1的那个字符直接输出然后结束就可以了</p><p>若没有输出NO就可以了。既然有可能没有，那么必须要打布尔标记咯~</p></blockquote><h3 id="T3-困难题，其实就是在防ak，防的是c语言选手的ak，java选手表示太简单"><a href="#T3-困难题，其实就是在防ak，防的是c语言选手的ak，java选手表示太简单" class="headerlink" title="T3 (困难题，其实就是在防ak，防的是c语言选手的ak，java选手表示太简单)"></a>T3 (困难题，其实就是在防ak，防的是c语言选手的ak，java选手表示太简单)</h3><blockquote><p>这里的不确定因素就是第一个和第二个串谁长，所以到后来要一直分类讨论。</p><p>这类问题有一个通用的解法，不管是谁长，我们都把长的交换到第一个串，这样之后会免掉分类讨论这一环。</p><p>判断子串的方式呢就是双指针算法了，可以使用每个位置比对的暴力方法，有能力者当然也可以使用kmp算法。</p></blockquote><h3 id="T4-签到题"><a href="#T4-签到题" class="headerlink" title="T4(签到题)"></a>T4(签到题)</h3><blockquote><p>按照题目指示做就可以了，没啥难的</p><p>唯一的难点就在于如何分解每一位数，利用 %10 /10这个方法来分解每一位数</p><p>也可以用我给大家提供的标程，char数组的方法来处理，也比较好理解</p></blockquote><h3 id="T5（防ak题，思维题（贪心题））"><a href="#T5（防ak题，思维题（贪心题））" class="headerlink" title="T5（防ak题，思维题（贪心题））"></a>T5（防ak题，思维题（贪心题））</h3><blockquote><p>这一步要先把题看懂%%%</p><p>假设这里你已经把题看懂了，看懂后思考片刻大家就会发现一个事情，想让自己存在某个科目的分并不是最低的，有一个万能构造法就是，第一个科目所有人降序排列分，第二个科目所有人升序排列分，那么一定有人某个会比自己的分数低。</p><p>想懂了这个其实就很简单了，但是比赛中却没有人碰这道题😦😦😦</p></blockquote><h3 id="T6（中档题）"><a href="#T6（中档题）" class="headerlink" title="T6（中档题）"></a>T6（中档题）</h3><blockquote><p>如果你把这个东西乘上 10的要求位数的次幂，一定会超出int 或者是long long 的范围，那必然会有一些数据算不出来。</p><p>如果你会高精算我没说（<strong>java选手，py选手哼哧一笑</strong>）</p><p>如果你是c语言或者是c++，那么就要手写高精，这工作量将巨大</p><p>这里给出一个方法就是，利用我们小学列竖式的方法去一步一步算出那位小数，具体可以观看代码，明天会讲这个解法。</p></blockquote><h3 id="T7（签到题）"><a href="#T7（签到题）" class="headerlink" title="T7（签到题）"></a>T7（签到题）</h3><blockquote><p>按照题目标准枚举就好了</p></blockquote><h3 id="T8（中档题）"><a href="#T8（中档题）" class="headerlink" title="T8（中档题）"></a>T8（中档题）</h3><blockquote><p>用到了一个高中阶段的数学结论—-<strong>n元均值不等式</strong></p><p>利用这个不等式，告诉我们在和为一定的时候，当三个数越靠近乘积越大，通过这个想法来说这道题不久解决了😀😀</p></blockquote><h3 id="T9（防爆零题）"><a href="#T9（防爆零题）" class="headerlink" title="T9（防爆零题）"></a>T9（防爆零题）</h3><blockquote><p>不多讲了，大家都会！</p></blockquote><h3 id="T10（签到题）"><a href="#T10（签到题）" class="headerlink" title="T10（签到题）"></a>T10（签到题）</h3><blockquote><p>其实就是对x和y坐标取一个绝对值判断它是否小于1就完事了，不多讲了，大家也都会</p></blockquote><hr><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>这样看完大家还觉得很难吗，希望大家通过之后的学习，都可以对这套题目哼哧一笑，露出非常不屑的表情。😎😎</p><p>之后的训练赛还有很多，希望大家加油呀！！</p><p>所以这套题目，你学会了吗😉😉😉</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>选拔赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数位dp</title>
    <link href="/posts/227678581.html"/>
    <url>/posts/227678581.html</url>
    
    <content type="html"><![CDATA[<p>本文将讲述在dp中比较难的part–数位dp，这类dp考虑条件偏多，难思考，考到的知识点繁杂，希望这篇文章可以带来一些帮助</p><span id="more"></span><h1 id="数位dp"><a href="#数位dp" class="headerlink" title="数位dp"></a>数位dp</h1><p>给出一个数位dp的定义：</p><blockquote><p>数位dp是一种计数用的dp，一般就是要统计一个区间[le,ri]内满足一些条件数的个数</p></blockquote><hr><p>其实是这样，大家会发现数位dp问的是这么一种问题，是在一个区间内满足条件数的个数。</p><p>首先在这类题中会应用到几个技巧：</p><h3 id="技巧："><a href="#技巧：" class="headerlink" title="技巧："></a>技巧：</h3><h4 id="类前缀和的思想："><a href="#类前缀和的思想：" class="headerlink" title="类前缀和的思想："></a>类前缀和的思想：</h4><p>因为如果在这个区间内去求解解集，显然是较费劲的，而且也很难思考，这时我们就会使用类前缀和思想，让俩个端点和1做区间求出[1,l - 1], [1, r]。这样把这俩个直接相减就可以了</p><h4 id="预处理思想："><a href="#预处理思想：" class="headerlink" title="预处理思想："></a>预处理思想：</h4><p>其实在做题的过程中你会发现一些东西会被反复用到，如之后的例题中的组合数，提前用dp处理好的条件（详情可见下题）</p><h4 id="树形分类讨论思想："><a href="#树形分类讨论思想：" class="headerlink" title="树形分类讨论思想："></a>树形分类讨论思想：</h4><p>一般来说都会对每一位是否可填最高位进行分类讨论，进行讨论时，那个图形特别像树形，所以这里暂时取名叫做树形😁</p><p>其实懂了这些想解出题目还是有些费劲，那么就让我们再看看例题吧</p><hr><blockquote><p>科协里最近很流行数字游戏。</p><p>某人命名了一种不降数，这种数字必须满足从左到右各位数字呈非下降关系，如 123，446。</p><p>现在大家决定玩一个游戏，指定一个整数闭区间 [a,b]，问这个区间内有多少个不降数。</p><p>输入格式<br>输入包含多组测试数据。</p><p>每组数据占一行，包含两个整数 a 和 b。</p><p>输出格式<br>每行给出一组测试数据的答案，即 [a,b] 之间有多少不降数。</p><p>数据范围<br>1≤a≤b≤2^31−1<br>输入样例：<br>1 9<br>1 19<br>输出样例：<br>9<br>18</p></blockquote><p>这道题首先一看就是一道典型的数位dp，并且说到了不降数，估计就是要讨论每位数字和上一位数字的递推。</p><p>这里我们给出一个标程：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">15</span>;<br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-comment">//预处理出共i位，最高位位j的所有方案书</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i ++ ) f[<span class="hljs-number">1</span>][i] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">9</span>; j ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j; k &lt;= <span class="hljs-number">9</span>; k ++ )<br>                f[i][j] += f[i - <span class="hljs-number">1</span>][k];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!n) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <br>    vector&lt;<span class="hljs-keyword">int</span>&gt; nums;<br>    <br>    <span class="hljs-keyword">while</span> (n) nums.<span class="hljs-built_in">push_back</span>(n % <span class="hljs-number">10</span>), n /= <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> last = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x = nums[i];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = last; j &lt; x; j ++ )<br>            res += f[i + <span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">if</span> (x &lt; last) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//是否下降</span><br>            last = x;<br>            <br>            <span class="hljs-keyword">if</span> (!i) res ++ ;<span class="hljs-comment">//本身的方案数也算一个</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <br>    <span class="hljs-keyword">int</span> l, r;<br>    <br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; l &gt;&gt; r) cout &lt;&lt; <span class="hljs-built_in">dp</span>(r) - <span class="hljs-built_in">dp</span>(l - <span class="hljs-number">1</span>) &lt;&lt; endl;<span class="hljs-comment">//类前缀和思想</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这道题其实也是可以使用记忆化搜索的（其实记忆化搜索就是dp）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> A,B,a[<span class="hljs-number">11</span>],f[<span class="hljs-number">11</span>][<span class="hljs-number">10</span>];    <span class="hljs-comment">//f存储在没有贴合上界的情况下，从第i位开始且前一位是j的不降数方案数</span><br>                            <span class="hljs-comment">//因为f是没有贴合上界的情况下，即剩下i位可以从00…00~99…99随便填，所以无论数a[]是多少都可以适用</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> pre,<span class="hljs-keyword">bool</span> lim)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (~f[i][pre] &amp;&amp; !lim) <span class="hljs-keyword">return</span> f[i][pre];    <span class="hljs-comment">//f是没有贴合上界的情况下，即!lim</span><br>    <span class="hljs-keyword">int</span> up=lim ? a[i]:<span class="hljs-number">9</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=pre ; k&lt;=up ; k++)               <span class="hljs-comment">//枚举可以填的数</span><br>     ans+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,k,lim &amp;&amp; k==up);<br>    <span class="hljs-keyword">if</span> (!lim) f[i][pre]=ans;                    <span class="hljs-comment">//f是没有贴合上界的情况下，即!lim</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;        <span class="hljs-comment">//拆分每一位</span><br>    <span class="hljs-keyword">if</span> (!x) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> ( ; x ; x/=<span class="hljs-number">10</span>) a[++len]=x%<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(len,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> f);<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;A&gt;&gt;B) cout&lt;&lt;<span class="hljs-built_in">solve</span>(B)-<span class="hljs-built_in">solve</span>(A<span class="hljs-number">-1</span>)&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr>这类题要做到分类讨论的时候不重不漏，这也是这类题最难的地方，一不小心就漏掉一个部分，如果多加训练应该会做的出来了吧。（至少现在给我一个新题，我估计我应该是做不出来）<hr><p><strong>希望这篇文章会让你们对数位dp有一个更深的了解吧</strong></p><hr><h2 id="再给出一道练习题吧："><a href="#再给出一道练习题吧：" class="headerlink" title="再给出一道练习题吧："></a>再给出一道练习题吧：</h2><blockquote><p>求给定区间 [X,Y] 中满足下列条件的整数个数：这个数恰好等于 K 个互不相等的 B 的整数次幂之和。</p><p>例如，设 X=15,Y=20,K=2,B=2，则有且仅有下列三个数满足题意：</p><p>17=24+20<br>18=24+21<br>20=24+22<br>输入格式<br>第一行包含两个整数 X 和 Y，接下来两行包含整数 K 和 B。</p><p>输出格式<br>只包含一个整数，表示满足条件的数的个数。</p><p>数据范围<br>1≤X≤Y≤2^31−1,<br>1≤K≤20,<br>2≤B≤10<br>输入样例：<br>15 20<br>2<br>2<br>输出样例：<br>3</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">35</span>;<br><br><span class="hljs-keyword">int</span> K, B;<br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j ++ )<br>            <span class="hljs-keyword">if</span> (!j) f[i][j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> f[i][j] = f[i - <span class="hljs-number">1</span>][j] + f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; nums;<br>    <span class="hljs-keyword">while</span> (n) nums.<span class="hljs-built_in">push_back</span>(n % B), n /= B;<br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x = nums[i];<br>        <span class="hljs-keyword">if</span> (x)  <span class="hljs-comment">// 求左边分支中的数的个数</span><br>        &#123;<br>            res += f[i][K - last];<br>            <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (K - last - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>) res += f[i][K - last - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                last ++ ;<br>                <span class="hljs-keyword">if</span> (last &gt; K) <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!i &amp;&amp; last == K) res ++ ;   <span class="hljs-comment">// 最右侧分支上的方案</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br><br>    <span class="hljs-keyword">int</span> l, r;<br>    cin &gt;&gt; l &gt;&gt; r &gt;&gt; K &gt;&gt; B;<br><br>    cout &lt;&lt; <span class="hljs-built_in">dp</span>(r) - <span class="hljs-built_in">dp</span>(l - <span class="hljs-number">1</span>) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p class="note note-success">所以数位dp你学会了吗😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区间合并</title>
    <link href="/posts/795397410.html"/>
    <url>/posts/795397410.html</url>
    
    <content type="html"><![CDATA[<p>这里讲到无序区间的合并的代码，板子和原理</p><span id="more"></span><h1 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h1><p>首先大家想到区间合并的时候觉得，<strong>啊~这个好简单</strong> 。是不是这样想？</p><p>我最开始也是这样的，这个东西如果自己有积累过的确是很简单的一个思想和代码，如果没有接触过在考试中或比赛中现场想还是比较费劲的。</p><p>这里首先给出一个区间合并的模板代码</p><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br>vector&lt;PII&gt; q;<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;PII&gt; res;<br>    <span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-keyword">int</span> st = <span class="hljs-number">-2e9</span>, en = <span class="hljs-number">-2e9</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> a : q)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(en &lt; a.x)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, en&#125;);<br>            st = a.x;<br>            en = a.y;<br>        &#125;<br>        <span class="hljs-keyword">else</span> en = <span class="hljs-built_in">max</span>(en, a.y);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, en&#125;);<br>    <br>    q = res;<br>    <br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <br>        q.<span class="hljs-built_in">push_back</span>(&#123;l, r&#125;);<br>    &#125;<br>    <br>    <span class="hljs-built_in">merge</span>();<br>    <br>    cout &lt;&lt; q.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里呢是这样，利用了贪心的思想给左端点排序，然后逐步合并，并且维护者右端点和左端点，这个东西第一次还是较难写出来的，推荐大家背过把！！</p><hr><h2 id="usaco题目："><a href="#usaco题目：" class="headerlink" title="usaco题目："></a>usaco题目：</h2><p>这里在分享一道usaco的一道题来结束这个知识点：</p><blockquote><p>每天早上 5 点，三名农夫去牛场给奶牛们挤奶。</p><p>现在从 5 点开始按秒计时，第一名农夫在第 300 秒开始给牛挤奶，并在第 1000 秒停止挤奶。</p><p>第二名农夫在第 700 秒开始给牛挤奶，并在第1200 秒停止挤奶。</p><p>第三名农夫在第 1500 秒开始给牛挤奶，并在第 2100 秒停止挤奶。</p><p>从开始挤奶到挤奶完全结束，这一期间，至少存在一名农夫正在挤奶的连续时间段的长度最长为 900 秒（第 300 秒至第 1200 秒），完全没有任何农夫在挤奶的连续时间段的长度最长为 300 秒（第 1200秒至第 1500 秒）。</p><p>现在给你 N 名农夫挤 N 头奶牛的工作时间表，请你求出：</p><ol><li>至少存在一名农夫正在挤奶的连续时间段的最长长度。</li><li>没有任何农夫在挤奶的连续时间段的最长长度。</li></ol><p><strong>注意</strong>：本题中给出的所有时间均为时刻（时间点），因此在本题中挤奶区间 [100，200][100，200] 和 [201,300][201,300] 中间会有长度为 1 秒的间歇时间。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 N，表示农夫数量。</p><p>接下来 N 行，每行包含两个非负整数 l,r，表示农夫挤奶的开始时刻和结束时刻。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含两个整数，分别表示最长连续挤奶时间以及最长连续无人挤奶时间。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤5000<br>1≤l≤r≤10^6</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">300 </span><span class="hljs-number">1000</span><br><span class="hljs-symbol">700 </span><span class="hljs-number">1200</span><br><span class="hljs-symbol">1500 </span><span class="hljs-number">2100</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">900 </span><span class="hljs-number">300</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5010</span>;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br>PII q[N];<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-keyword">int</span> max_1, max_2;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i].x &gt;&gt; q[i].y;<br>    <br>    <span class="hljs-built_in">sort</span>(q, q + n);<br>    <br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">-2e9</span>, r = <span class="hljs-number">-2e9</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (r &lt; q[i].x)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(l != <span class="hljs-number">-2e9</span>)<br>            &#123;<br>            max_2 = <span class="hljs-built_in">max</span>(q[i].x - r, max_2);<br>            max_1 = <span class="hljs-built_in">max</span>(r - l, max_1);<br>            r = q[i].x;<br>            &#125;<br>            <br>        l = q[i].x, r = q[i].y;<br>            <br>        &#125;<br>        <span class="hljs-keyword">else</span> r = <span class="hljs-built_in">max</span>(q[i].y, r);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(l != <span class="hljs-number">-2e9</span>) max_1 = <span class="hljs-built_in">max</span>(r - l, max_1);<br>    <br>    cout &lt;&lt; max_1 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; max_2 &lt;&lt; endl;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>好了，区间合并就完事了！😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于子集的状压dp</title>
    <link href="/posts/3960819418.html"/>
    <url>/posts/3960819418.html</url>
    
    <content type="html"><![CDATA[<p>本文将分享一个状压dp的一类题：基于子集的动态规划</p><span id="more"></span><h2 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h2><p>写此篇文章的原因也是因为在周赛遇到了此问题，当时用的是dfs+剪枝解决，后来观看一些人的题解发现利用了状压dp，也学到了很多的东西</p><h1 id="状压dp"><a href="#状压dp" class="headerlink" title="状压dp"></a>状压dp</h1><p>其实，状压 DP 就是枚举所有情况的 「 暴力 」。</p><p>状态压缩，其实就是将每个任务 <code>task[i]</code> 看作某个 「 十进制数字 」 的<strong>二进制上的第 <code>i</code> 位</strong>，<code>1</code> 表示该任务被选择，反之不被选择。</p><p><strong>Tips</strong>： 十进制数字是多少我们根本不用关心，我们关心的是它的二进制长啥样。</p><p>状态压缩可以简单的理解为把一个布尔 boolean 数组压缩到了一个十进制数字上，之后便可以使用位运算的各种技巧来简化代码逻辑，这可比布尔数组好用多了！(๑•̀ㅂ•́)و✧</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// m =&gt; 总状态数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-comment">// 枚举状态 i 的二进制子集</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &gt; <span class="hljs-number">0</span>; j = (j - <span class="hljs-number">1</span>) &amp; i) &#123;<br>        <span class="hljs-comment">// To Do..</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实状压dp并不会很难，然后这里是主要想说明一个枚举自己的一个方式，就是 j = (j - 1) &amp; i) </p><p>如果不会这步暴力来写的话：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// m =&gt; 总状态数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-comment">// 从 [1, i] 就可以了，后面的一定不会是 i 的子集</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>        <span class="hljs-comment">// 检查状态 j 是不是状态 i 的二进制子集</span><br>        <span class="hljs-keyword">if</span> ((i | j) == i) &#123;<br>            <span class="hljs-comment">// To Do..</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>很明显的看出，第二个代码有些许的笨重并且没有任何美感hhh</p><h3 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h3><p>其实我想了想写程序的我们不就是追求美感和效率吗？</p><p>当二者兼顾的时候，那应该已经超过很多人了把hhh，个人理解</p><hr><p>所以这个枚举子集的方法你学会了吗？😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IEEE754</title>
    <link href="/posts/2366819883.html"/>
    <url>/posts/2366819883.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章将介绍IEEE754 浮点数二进制存储标准</p><span id="more"></span><h1 id="浮点数存储"><a href="#浮点数存储" class="headerlink" title="浮点数存储"></a>浮点数存储</h1><p>由一个我的经历来引出今天的博文</p><p>今天在看算法题解的时候看见一个人把double类型的初值赋值成了1e20，这个引起了我的深思，因为double同long long同为8字节存储，但是long long却只能存储最大到1e18这个数量级，而这个double通过查询居然可以过分的存储到1e308，这我完全是蒙圈的。所以通过学习就有了这篇博客。</p><h2 id="IEEE浮点数二进制算数标准"><a href="#IEEE浮点数二进制算数标准" class="headerlink" title="IEEE浮点数二进制算数标准"></a>IEEE浮点数二进制算数标准</h2><p>通过学习我发现浮点数拥有一个新的存储标准，这个标准就是IEEE754</p><h3 id="组成（此文都以单精度浮点数为例）"><a href="#组成（此文都以单精度浮点数为例）" class="headerlink" title="组成（此文都以单精度浮点数为例）"></a>组成（此文都以单精度浮点数为例）</h3><p>在IEEE 754标准中浮点数由三部分组成：</p><ul><li>符号位（sign bit）</li><li>有偏指数（biased exponent）</li><li>小数（fraction）</li></ul><p>浮点数分为两种，单精度浮点数（single precision）和双精度浮点数（double precision），它们两个所占的位数不同。</p><p>单精度浮点数（共32位）：<br>1个符号位<br>8个指数位<br>23个小数位</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1070689-20190310165139947-1347641585.png" alt="img"></p><p>双精度浮点数：</p><p>1个符号位</p><p>11个指数为</p><p>52个小数位</p><h4 id="符号位："><a href="#符号位：" class="headerlink" title="符号位："></a>符号位：</h4><p>符号位决定符号，这个很好理解</p><h4 id="指数位："><a href="#指数位：" class="headerlink" title="指数位："></a>指数位：</h4><p>这里是利用了移码的存储规则，也就是说是存在偏移量的，-3 在单精度浮点中会被偏移成124</p><h4 id="小数位："><a href="#小数位：" class="headerlink" title="小数位："></a>小数位：</h4><p>这里是以2的负几次幂分之以来表示，从而会出现精度问题。</p><h4 id="二进制原码："><a href="#二进制原码：" class="headerlink" title="二进制原码："></a>二进制原码：</h4><p>二进制原数 = （-1）^ 符号位 * （2）^ 阶码真值 * 尾数真值</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>例如178.125</p><ol><li><p>先把浮点数分别把整数部分和小数部分转换成2进制</p><ol><li>整数部分用除2取余的方法，求得：10110010</li><li>小数部分用乘2取整的方法，求得：001</li><li>合起来即是：10110010.001</li><li>转换成二进制的浮点数，即把小数点移动到整数位只有1，即为：1.0110010001 * 2^111，111是二进制，由于左移了7位，所以是111</li></ol></li><li><p>把浮点数转换二进制后，这里基本已经可以得出对应3部分的值了</p><ol><li><p>数符：由于浮点数是整数，故为0.(负数为1)</p></li><li><p>阶码 : 阶码是需要作移码运算，在转换出来的二进制数里，阶数是111(十进制为7)，对于单精度的浮点数，偏移值为01111111(127)[偏移量的计算是：2^(e-1)-1, e为阶码的位数，即为8，因此偏移值是127]，即：111+01111111 = 10000110</p></li><li><p>尾数：小数点后面的数，即0110010001</p></li><li><p>最终根据位置填到对位的位置上：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20211101151638074.png" alt="image-20211101151638074"></p></li></ol></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>因为小数位是以2的负几次幂的存储方式，必定会有精度差，所以我们判断小数是否相等的时候是不就必定不能用双等了呢？</p><p>答案是肯定的</p><hr><p>所以IEEE754规则你学会了吗？😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>计算机原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>计算机原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可持久化数据结构</title>
    <link href="/posts/849974245.html"/>
    <url>/posts/849974245.html</url>
    
    <content type="html"><![CDATA[<p>本文将分享俩个我们常见的可持久化数据结构：主席树，可持久化字典树</p><span id="more"></span><h1 id="可持久化数据结构："><a href="#可持久化数据结构：" class="headerlink" title="可持久化数据结构："></a>可持久化数据结构：</h1><p>首先要提的一点是，可持久化说到底是一种思想。</p><p>可持久化说白了就可以存下来修改的历史版本（有点像git工具）</p><ul><li>可持久化的前提：<ul><li>在修改的过程中，数据结构本身的拓扑结构不会发生改变。</li></ul></li><li>可持久化的数据结构例子：<ul><li>trie树，线段树——主席树，堆，树状数组</li></ul></li><li>不可持久化的数据结构例子：<ul><li>平衡树（左旋右旋后，拓扑结构会发生改变）</li></ul></li><li>可持久化数据结构解决的问题：<ul><li>我们希望把每次修改的版本都记录下来（类似git工具）</li></ul></li><li>核心思想：<ul><li>只会记录每一个版本与前一个版本不一样的结点</li></ul></li></ul><h2 id="可持久化字典树"><a href="#可持久化字典树" class="headerlink" title="可持久化字典树"></a>可持久化字典树</h2><p>也是举出一道经典的例题：最大异或和</p><blockquote><p>给定一个非负整数序列 a，初始长度为 N。</p><p>有 M 个操作，有以下两种操作类型：</p><ol><li><code>A x</code>：添加操作，表示在序列末尾添加一个数 x，序列的长度 N 增大 1。</li><li><code>Q l r x</code>：询问操作，你需要找到一个位置 p，满足 l≤p≤r，使得：a[p] xor a[p+1] xor … xor a[N] xor x 最大，输出这个最大值。</li></ol><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 N，M，含义如问题描述所示。</p><p>第二行包含 N个非负整数，表示初始的序列 A。</p><p>接下来 M 行，每行描述一个操作，格式如题面所述。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每个询问操作输出一个整数，表示询问的答案。</p><p>每个答案占一行。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>N,M≤3×10^5,0≤a[i]≤10^7</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">5</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">A</span> <span class="hljs-number">1</span> <br><span class="hljs-attribute">Q</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <br><span class="hljs-attribute">A</span> <span class="hljs-number">4</span> <br><span class="hljs-attribute">Q</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <br><span class="hljs-attribute">Q</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br>5<br>6<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">6e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = N * <span class="hljs-number">25</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-keyword">int</span> s[N];<br><span class="hljs-keyword">int</span> tr[M][<span class="hljs-number">2</span>], max_id[M];<br><span class="hljs-keyword">int</span> root[N], idx;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        max_id[q] = i;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> v = s[i] &gt;&gt; k &amp; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (p) tr[q][v ^ <span class="hljs-number">1</span>] = tr[p][v ^ <span class="hljs-number">1</span>]; <span class="hljs-comment">//因为上一个版本存在，我们要把附带信息一起带过来</span><br>    tr[q][v] = ++ idx;<br>    <span class="hljs-built_in">insert</span> (i, k - <span class="hljs-number">1</span>, tr[p][v], tr[q][v]);<br>    max_id[q] = <span class="hljs-built_in">max</span>(max_id[tr[q][<span class="hljs-number">0</span>]], max_id[tr[q][<span class="hljs-number">1</span>]]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p = root;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">23</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = C &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (max_id[tr[p][v ^ <span class="hljs-number">1</span>]] &gt;= L) p = tr[p][v ^ <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> p = tr[p][v];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> C ^ s[max_id[p]];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-comment">//首先要初始化最开始，因为0节点是不存在的节点所存储的地方，所以我们要对0节点进行一些初始化</span><br>    max_id[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    root[<span class="hljs-number">0</span>] = ++ idx;<br>    <span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>, <span class="hljs-number">23</span>, <span class="hljs-number">0</span>, root[<span class="hljs-number">0</span>]);<br>  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        cin &gt;&gt; x;<br>        <br>        s[i] = s[i - <span class="hljs-number">1</span>] ^ x;<br>        <br>        root[i] = ++ idx;<br>        <span class="hljs-built_in">insert</span>(i, <span class="hljs-number">23</span>, root[i - <span class="hljs-number">1</span>], root[i]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">char</span> op;<br>        <span class="hljs-keyword">int</span> l, r, x;<br>        cin &gt;&gt; op;<br>        <br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;A&#x27;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            n ++ ;<br>            s[n] = s[n - <span class="hljs-number">1</span>] ^ x;<br>            root[n] = ++ idx;<br>            <span class="hljs-built_in">insert</span>(n, <span class="hljs-number">23</span>, root[n - <span class="hljs-number">1</span>], root[n]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;<br>            cout &lt;&lt; <span class="hljs-built_in">query</span>(root[r - <span class="hljs-number">1</span>], s[n] ^ x, l - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里呢用到了一个前缀和的转换加贪心的一个做法</p><p>所以什么是持久化trie呢？</p><p><img src="https://img-blog.csdnimg.cn/20181209112435987.png" alt="在这里插入图片描述"></p><p>是利用了每次存储改变信息，保留原有信息的方式建立成的一个字典树，这道题里使用了二进制串来当这个字符串，并且维护了一个max_id来看当前这个版本是否在这个区间里头，从而来判断是否使用这个节点</p><h2 id="主席树（可持久化权值线段树）"><a href="#主席树（可持久化权值线段树）" class="headerlink" title="主席树（可持久化权值线段树）"></a>主席树（可持久化权值线段树）</h2><p>权值线段树的本质是线段树维护桶</p><p>我们知道，普通线段树维护的信息是数列的区间信息，比如区间和、区间最大值、区间最小值等等。在维护序列的这些信息的时候，我们更关注的是这些数本身的信息，换句话说，我们要维护区间的最值或和，我们最关注的是这些数统共的信息。而权值线段树<strong>维护一列数中数的个数</strong>。</p><p>拿出我们的经典例题，第k小数</p><blockquote><p>给定长度为 N 的整数序列 AA，下标为 1∼N</p><p>现在要执行 M 次操作，其中第 ii 次操作为给出三个整数 li,ri,ki，求 A[li],A[li+1],…,A[ri] (即 A 的下标区间 [li,ri][li,ri])中第 ki 小的数是多少。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 N 和 M。</p><p>第二行包含 N 个整数，表示整数序列 A。</p><p>接下来 M 行，每行包含三个整数 li,ri,ki，用以描述第 i 次操作。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每次操作输出一个结果，表示在该次操作中，第 k 小的数的数值。</p><p>每个结果占一行。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>N≤10^5,M≤10^4,|A[i]|≤10^9</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">5<br>6<br>3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> a[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; nums;<span class="hljs-comment">//离散化</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l, r;<span class="hljs-comment">//并不是区间，而是左右儿子</span><br>    <span class="hljs-keyword">int</span> cnt;<br>&#125;tr[N * <span class="hljs-number">4</span> + N * <span class="hljs-number">17</span>];<br><br><span class="hljs-keyword">int</span> root[N], idx;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lower_bound</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), x) - nums.<span class="hljs-built_in">begin</span>();<br>&#125;<br><br><br><span class="hljs-comment">//建立好骨架，供每个版本的insert</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p = ++ idx;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> p;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    tr[p].l = <span class="hljs-built_in">build</span>(l, mid), tr[p].r = <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> q = ++ idx;<br>    tr[q] = tr[p];<span class="hljs-comment">//这一步是在复制上一个版本</span><br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        tr[q].cnt ++ ;<br>        <span class="hljs-keyword">return</span> q;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) tr[q].l = <span class="hljs-built_in">insert</span>(tr[p].l, l, mid, x);<br>    <span class="hljs-keyword">else</span> tr[q].r = <span class="hljs-built_in">insert</span>(tr[p].r, mid + <span class="hljs-number">1</span>, r, x);<br>    <br>    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;<br>    <span class="hljs-keyword">return</span> q;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> r;<br>    <span class="hljs-keyword">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(k &lt;= cnt) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(tr[q].l, tr[p].l, l, mid, k);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(tr[q].r, tr[p].r, mid + <span class="hljs-number">1</span>, r, k - cnt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        nums.<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>    nums.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>()), nums.<span class="hljs-built_in">end</span>());<br>    <br>    root[<span class="hljs-number">0</span>] = <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        root[i] = <span class="hljs-built_in">insert</span>(root[i - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, <span class="hljs-built_in">find</span>(a[i]));<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> l, r, k;<br>        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;<br>        cout &lt;&lt; nums[<span class="hljs-built_in">query</span>(root[r], root[l - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, k)] &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>权值线段树和普通线段树不同，权值线段树维护的是一个个的桶，而普通线段树维护的是每个区间的具体信息</p><p>这道题作为经典题解法是蛮多的</p><ul><li>划分树</li><li>树套数</li></ul><p>之后我学到这些再去更新这些吧</p><p class="note note-success">可持久化数据结构，你懂了吗😁😁</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异或解题技巧</title>
    <link href="/posts/3254579777.html"/>
    <url>/posts/3254579777.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章将介绍异或的解题技巧</p><span id="more"></span><h1 id="异或技巧"><a href="#异或技巧" class="headerlink" title="异或技巧"></a>异或技巧</h1><p>首先说一下异或这个运算的性质：</p><ul><li><strong>结合律</strong></li><li><strong>交换律</strong></li><li><strong>x ^ x =0, x ^ 0 = x;</strong></li></ul><p>接着由一道题引出思考：</p><blockquote><p><strong>1-1000放在含有1001个元素的数组中，只有唯一的一个元素值重复，其它均只出现</strong><br><strong>一次。每个数组元素只能访问一次，设计一个算法，将它找出来；不用辅助存储空</strong><br><strong>间，能否设计一个算法实现？</strong></p></blockquote><h2 id="解法1：求sum相减"><a href="#解法1：求sum相减" class="headerlink" title="解法1：求sum相减"></a>解法1：求sum相减</h2><p>这个技巧的用法就和名字一样，直接求和相减就可以找出这个缺失的数字，算法也非常的好</p><p>缺点也很明显，如果数列过大那么溢出的风险也是巨大的</p><h2 id="解法2：异或"><a href="#解法2：异或" class="headerlink" title="解法2：异或"></a>解法2：异或</h2><p>这个方法就没有溢出的风险</p><p>将所有的数全部异或，得到的结果与1^2^3^…^1000的结果进行异或，得到的结果就是重复数。</p><p>这个为什么是对的呢？ 是这样，因为异或满足交换律，我们可以把所有的数都交换成 1^1 ^2^2^3^3^4^4^5^5^6^6^7^7 …… 1000^1000</p><p>又从上面的性质可知x ^ x =0, x ^ 0 = x; 也就是说落单的就是那个重复的数，其他的都为0 了</p><p>方法是不是非常的妙呢</p><p>我们从这个方法可以推出一系列题的解法：</p><blockquote><p>给定两个字符串 s 和 t，它们只包含小写字母。</p><p>字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。</p><p>请找出在 t 中被添加的字母。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">findTheDifference</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i ++ )&#123;<br>            res ^= s[i];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t.<span class="hljs-built_in">size</span>(); i ++ )&#123;<br>            res ^= t[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>        <br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>那这道题的原理的背景就是上面的那个证明，只不过利用了字符串来转换，利用ascll码转换一下就可直接找出那个添加的字母</p><p>所以这类题的做法你学会了吗？😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>破链成环方法</title>
    <link href="/posts/2182568315.html"/>
    <url>/posts/2182568315.html</url>
    
    <content type="html"><![CDATA[<p>本文将分享一个破链成环的方法</p><span id="more"></span><p>由一道题引出今天破链成环方法的技巧</p><blockquote><p>一天可以被分为 n 个时段。</p><p>一个工人的每日工作安排可以用一个长度为 n 的 0101 序列 a1,a2,…,an 来表示。</p><p>ai 为 00 表示第 ii 个时间段是工作时间ai 为 1 表示第 i个时间段是休息时间。</p><p>工人日复一日的严格按照这个工作安排来进行工作和休息。</p><p>请问，工人的最长连续休息时间有多长（单位：时段）？</p><p>注意，连续休息时间可能跨天。</p><p>保证工人至少在一个时间段处于工作状态。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 T，表示共有 T 组测试数据。</p><p>每组数据第一行包含整数 n。</p><p>第二行包含 n 个整数 a1,a2,…,an</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每组数据输出一行结果，表示最长连续休息时间。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤T≤10<br>1≤n≤2×105<br>0≤ai≤1<br>同一测试点内所有 n 的和不超过 2×1052×105。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">6</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br>2<br>3<br>0<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">400010</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> w[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br>            w[n + i] = w[i];<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, s = <span class="hljs-number">0</span>; i &lt; n * <span class="hljs-number">2</span>; i ++ )<br>            <span class="hljs-keyword">if</span> (w[i])<br>            &#123;<br>                s ++ ;<br>                res = <span class="hljs-built_in">max</span>(res, s);<br>            &#125;<br>            <span class="hljs-keyword">else</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>题意：休息时间可以跨天，那么就是告诉我们这个的数据背景就是一个环，日复一日的在循环，这里如果我们硬做的话，我们需要特判最后的那个，并且也非常的麻烦，在这道题可能还没啥，所以我们会用到以上的这个破链成环的方法，开俩倍区间，然后这个序列循环俩次，来算出正确答案</p><p>第一次做的时候没有想到这个方法，用的是分类讨论，这个方法是真的非常好用</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc第254场周赛</title>
    <link href="/posts/1920835834.html"/>
    <url>/posts/1920835834.html</url>
    
    <content type="html"><![CDATA[<p>这场周赛整体来说难度可以，快速幂那里的指数取模简直就是经典，虽然可以使用longlong飘过，时间卡的再死一点就更棒了</p><span id="more"></span><h1 id="T1：子字符串在字符串中出现数目（1967）"><a href="#T1：子字符串在字符串中出现数目（1967）" class="headerlink" title="T1：子字符串在字符串中出现数目（1967）"></a>T1：子字符串在字符串中出现数目（1967）</h1><p>这道题就没啥可说的，直接用语言自带的api也可以，手写也可以，kmp也可以，ac自动机也可以</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">numOfStrings</span><span class="hljs-params">(vector&lt;string&gt;&amp; patterns, string word)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> str:patterns)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(str,word))<br>            res++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(string str,string word)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>;l+str.<span class="hljs-built_in">size</span>()&lt;=word.<span class="hljs-built_in">size</span>();l++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;str.<span class="hljs-built_in">size</span>();k++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(word[l+k]!=str[k]) <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(k==str.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>这里的话是手写了一个系统自带的find函数</p><hr><h1 id="T2：构造元素不等于两相邻元素平均值的数组（1968）"><a href="#T2：构造元素不等于两相邻元素平均值的数组（1968）" class="headerlink" title="T2：构造元素不等于两相邻元素平均值的数组（1968）"></a>T2：构造元素不等于两相邻元素平均值的数组（1968）</h1><p>这里就是考到了一个贪心，我的思路就是先排序，然后从中点开始左边填一个，右边填一个，这样就能保证这个数组，一个大一个小，来保证不等于相邻元素的平均值</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">rearrangeArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; n)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(n.<span class="hljs-built_in">begin</span>(), n.<span class="hljs-built_in">end</span>());<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        <span class="hljs-keyword">int</span> s =(n.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)/<span class="hljs-number">2</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s <span class="hljs-number">-1</span> ,j = s+<span class="hljs-number">1</span>;j&lt;n.<span class="hljs-built_in">size</span>() &amp;&amp; i &gt;=<span class="hljs-number">0</span> ;j++,i-- )&#123;<br>            res.<span class="hljs-built_in">push_back</span>(n[j]);<br>            res.<span class="hljs-built_in">push_back</span>(n[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span>((n.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>) res.<span class="hljs-built_in">push_back</span>(n[n.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]);<br>        <br>        res.<span class="hljs-built_in">push_back</span>(n[s]);<br>        <span class="hljs-keyword">return</span> res;<br>        &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>赛后也看到了其他人的代码，先排完序，先填奇数序列，再填进去偶数，这样也保证了一个大一个小，觉得这个思路也蛮不错的</p><hr><h1 id="T3：-数组元素的最小非零乘积（1969）"><a href="#T3：-数组元素的最小非零乘积（1969）" class="headerlink" title="T3： 数组元素的最小非零乘积（1969）"></a>T3： 数组元素的最小非零乘积（1969）</h1><p>这里呢考到了一个快速幂加上指数取模。 也是一个贪心，但是这个贪心比较好看出来，因为均值不等式，俩个数越相近，乘积越大，在和为一定的时候，也就说明了在非零的情况下，一个是一，一个是最大值这样是最小的。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">1</span>%p;<br>        <span class="hljs-keyword">while</span> (b&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> ((b&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)&#123;res= (<span class="hljs-keyword">int</span>) (((<span class="hljs-keyword">long</span>)res*a)%p);&#125;<span class="hljs-comment">//按位与</span><br>                a=(<span class="hljs-keyword">int</span>)((<span class="hljs-keyword">long</span>)a*a%p);<br>                b&gt;&gt;=<span class="hljs-number">1</span>;<br>       &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minNonZeroProduct</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>        <span class="hljs-comment">// int res = 0;</span><br><br>    <span class="hljs-keyword">int</span> n = ( ( (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)<span class="hljs-number">1</span> &lt;&lt; p )- <span class="hljs-number">1</span>)% mod ;<br>    <span class="hljs-comment">// res = max(res , t);</span><br>    <span class="hljs-keyword">int</span>  t =( ( (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)<span class="hljs-number">1</span> &lt;&lt; (p - <span class="hljs-number">1</span>) )- <span class="hljs-number">1</span>) % (mod - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// int a = ((long long )1 &lt;&lt; p) % mod - 2;</span><br>    <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">qmi</span>(n - <span class="hljs-number">1</span> , t, mod);<br>    <span class="hljs-comment">// res = max(r , t);</span><br>    <span class="hljs-keyword">int</span> mn =(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)x * n % mod;<br>    <span class="hljs-comment">// res = max(res , h);</span><br>    <span class="hljs-keyword">return</span> mn;<br><br><br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>至于指数取模问题，讨论区上很多人写指数不要取模，其实不是这样的。</p><p>指数是可以取模的，但是不能直接取</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210816133711933.png" alt="image-20210816133711933"></p><p>这里提到的已经很详细了，在这里就是质数取模的特点，也就是p-1就ok了</p><hr><h1 id="T4：你能穿过矩阵的最后一天（1970）"><a href="#T4：你能穿过矩阵的最后一天（1970）" class="headerlink" title="T4：你能穿过矩阵的最后一天（1970）"></a>T4：你能穿过矩阵的最后一天（1970）</h1><p>这里我用的是多源bfs + 二分，看到题解说有并查集更快的做法，还没有仔细看之后会更新出来</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><br>   <br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// static const int N = 5e3 + 10;</span><br>    <br>    <span class="hljs-comment">// int dist[N][N];</span><br>    <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br>   <br>        <br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">latestDayToCross</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; cells)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> r = row * col;<br>        <span class="hljs-comment">// cout &lt;&lt; cells[0][0] &lt;&lt; cells[0][1] &lt;&lt; endl;</span><br>        <span class="hljs-keyword">bool</span> st[row +<span class="hljs-number">10</span>][col + <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">while</span> (l &lt; r)&#123;<br>            <span class="hljs-comment">// exit(0);</span><br>            <span class="hljs-keyword">int</span> mid = l+r + <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-number">1</span>  ;<br>            <span class="hljs-comment">// cout &lt;&lt; mid;</span><br>          <span class="hljs-keyword">bool</span>  flag = <span class="hljs-literal">false</span>;<br>          <br>            <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>        <span class="hljs-comment">// memset(dist, 0x3f, sizeof dist);</span><br>        queue&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; q;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mid; i ++ )&#123;<br>            <span class="hljs-comment">// q.push(&#123;cells[i][0], cells[i][1]&#125;);</span><br>            st[cells[i][<span class="hljs-number">0</span>]][cells[i][<span class="hljs-number">1</span>]] = <span class="hljs-literal">true</span>;<br>        &#125;<br>       <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= col; i ++ ) &#123;<br>            <span class="hljs-comment">// cout &lt;&lt; st[1][1] &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span>(!st[<span class="hljs-number">1</span>][i])&#123;<br>             q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">1</span>, i&#125;);<br>             <br>        &#125;<br>        &#125;<br>        <br><br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">auto</span> a = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-comment">// cout &lt;&lt; a.first &lt;&lt; a.second &lt;&lt; endl;</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++ )&#123;<br>                <span class="hljs-keyword">int</span> x = a.first + dx[i];<br>               <br>                <span class="hljs-keyword">int</span> y = a.second + dy[i];<br>                <span class="hljs-keyword">if</span>( x &gt; row || x &lt;= <span class="hljs-number">0</span> || y &gt; col || y &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <br>                <br>                <span class="hljs-keyword">if</span>(x == row) &#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                 <span class="hljs-keyword">break</span>;&#125; <br>                <span class="hljs-comment">//  if(mid = 3) exit(0);</span><br>                <span class="hljs-comment">// if(!)&#123;</span><br>                    <span class="hljs-keyword">if</span>(!st[x][y])&#123;<br>                        q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>                    st[x][y] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                    <br>                <span class="hljs-comment">// &#125;</span><br>                <br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">//  </span><br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; flag &lt;&lt; endl ;</span><br>        <span class="hljs-comment">// exit(0);</span><br>            <span class="hljs-keyword">if</span>(flag) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// </span><br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="更新一个并查集的做法："><a href="#更新一个并查集的做法：" class="headerlink" title="更新一个并查集的做法："></a>更新一个并查集的做法：</h4><p>并查集 + 时光倒流</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> p[N + <span class="hljs-number">2</span>];<br><span class="hljs-keyword">bool</span> st[N];<br><br><br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>   <span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> x == p[x] ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> fx = <span class="hljs-built_in">find</span>(x), fy = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (fx == fy)<br>            <span class="hljs-keyword">return</span>;<br><br>        p[fx] = fy;<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">latestDayToCross</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; cells)</span> </span>&#123;<br>        <span class="hljs-comment">// cout &lt;&lt; (++i) &lt;&lt; endl;</span><br><span class="hljs-comment">//   cout &lt;&lt;st[1] &lt;&lt; endl;</span><br><br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row * col + <span class="hljs-number">2</span>; i ++ ) p[i] = i;<br><br>    <span class="hljs-keyword">int</span> S = row * col;<br>    <span class="hljs-keyword">int</span> E = row * col + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = row * col - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )&#123;<br>        <span class="hljs-keyword">int</span> ax = cells[i][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>, ay = cells[i][<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br><br>        st[ax * col + ay] = <span class="hljs-literal">true</span>; <br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j ++ )&#123;<br>            <span class="hljs-keyword">int</span> x = ax + dx[j];<br>            <span class="hljs-keyword">int</span> y = ay + dy[j];<br>            <br>            <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span> || x &gt;= row || y &lt; <span class="hljs-number">0</span> || y &gt;= col || !st[x * col + y]) <span class="hljs-keyword">continue</span>;<br>            <br>            <span class="hljs-built_in">add</span>(ax * col + ay, x * col + y);            <br>        &#125;<br>       <span class="hljs-keyword">if</span>(ax == <span class="hljs-number">0</span>)<span class="hljs-built_in">add</span>(S, ax * col + ay);<br>            <span class="hljs-keyword">if</span>(ax == row - <span class="hljs-number">1</span>) <span class="hljs-built_in">add</span>(ax * col + ay, E);<br><br>             <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(S) == <span class="hljs-built_in">find</span>(E)) <span class="hljs-keyword">return</span> i;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>这里呢要求第一行到最后一行是否有可行通路，那么我们逆向走的方法，利用超级源点和汇点来操作，如果源点和汇点联通了，那么就表示可以了</p><hr><p class="note note-success">可能是个人能力问题，很不习惯lc这种函数式编程</p>]]></content>
    
    
    <categories>
      
      <category>lc周赛</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心</tag>
      
      <tag>快速幂</tag>
      
      <tag>多源bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于快排和归并排序</title>
    <link href="/posts/775143932.html"/>
    <url>/posts/775143932.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章会讲到最常用的排序算法–快排和归并排序（不是冒泡和选择！！），超详细的！！</p><span id="more"></span><h1 id="快排-amp-归并排序"><a href="#快排-amp-归并排序" class="headerlink" title="快排&amp;归并排序"></a>快排&amp;归并排序</h1><p>首先谈一谈为什么摒弃掉了冒泡和选择排序：</p><p>冒泡排序和选择排序在效率上是很低的，时间复杂度在o（n^2）这个量级。</p><p>所以说冒泡和选择就是一无是处了？</p><ol><li>从算法复杂性上来看，冒泡排序可以从生活中找到场景，实现逻辑相对简单、快速排序由于涉及到每趟都要更新分界值在理解上有一定的复杂度。</li><li>在稳定性来说，冒泡排序的时间复杂度是非常稳定的，快排在最坏的情况下也会达到n^2</li></ol><hr><p>那就正式讲一讲快排和归并排序：</p><h2 id="快速排序（quick-sort）o（nlogn）"><a href="#快速排序（quick-sort）o（nlogn）" class="headerlink" title="快速排序（quick sort）o（nlogn）"></a>快速排序（quick sort）o（nlogn）</h2><p>这个排序就如他的名字一样特别快,利用了分治的思想。</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>这个排序的主要思想是什么呢：</p><ul><li>首先在一个未排序的序列中选出一个分界值（随机选，一般我们选中间值或者是左一或右一）</li><li>然后把比这个分界值小的放在左边，比这个分界值大的放在右侧</li><li>以这个方法，递归排左边和右边</li></ul><p>听着抽象看一个动态图了解一下排序过程把：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1130_1196bbb27a-2.gif" alt="2.gif"></p><h3 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h3><p>给出一个代码模板，也就是我们俗称的板子</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[],<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>       <span class="hljs-keyword">if</span> (r&lt;=l)<span class="hljs-keyword">return</span>;<br>       <span class="hljs-keyword">int</span> standard=q[l];<br>       <span class="hljs-keyword">int</span> left=l-<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">int</span> right=r+<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>           <span class="hljs-keyword">while</span> (q[++left]&lt;standard);<span class="hljs-comment">//想要倒序就把这俩行的大于小于号反置</span><br>           <span class="hljs-keyword">while</span> (q[--right]&gt;standard);<br>          <span class="hljs-keyword">if</span> (left&lt;right)&#123;<br>               <span class="hljs-keyword">int</span> t = q[left];<br>               q[left] = q[right];<br>               q[right] = t;<br>           &#125;<br>       &#125;<br>       quickSort(q,l,right);<br>       quickSort(q,right+<span class="hljs-number">1</span>,r);<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>大家在写的时候，在15，16行这里可能会出现边界问题</p><p>我对边界做了一个总结：</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">quickSort(<span class="hljs-keyword">q</span>, l, j);<br>quickSort(<span class="hljs-keyword">q</span>, j + <span class="hljs-number">1</span>, r);<br>或<br><br>quickSort(<span class="hljs-keyword">q</span>, l, i - <span class="hljs-number">1</span>);<br>quickSort(<span class="hljs-keyword">q</span>, i, r);<br>是因为对于第一次处理后的数组，索引i左侧的数字都是小于等于<span class="hljs-keyword">x</span>，但不包括<span class="hljs-string">q[i]</span>。索引i右侧的数字都是大于等于<span class="hljs-keyword">x</span>，包括<span class="hljs-string">q[i]</span>。故区间分为[l,i-<span class="hljs-number">1</span>]和[i,r]。<br>同理，对于第一次处理后的数组，索引j左侧的数字都是小于等于<span class="hljs-keyword">x</span>，包括<span class="hljs-string">q[j]</span>。索引j右侧的数字都是大于等于<span class="hljs-keyword">x</span>，不包括<span class="hljs-string">q[j]</span>。故区间分为[l,j]和[j+<span class="hljs-number">1</span>,r]。<br><br>再对<span class="hljs-keyword">x</span>位置小结：<br><br>如果区间取[l,i-<span class="hljs-number">1</span>]和[i,r]这种，那么<span class="hljs-keyword">x</span>不应该取左边界(l、(l+r)/<span class="hljs-number">2</span>)。<br>应取 <span class="hljs-keyword">x</span> = <span class="hljs-string">q[r]</span>; <span class="hljs-keyword">x</span> = <span class="hljs-string">q[(l+r+1)/2]</span>;<br><br>如果区间取[l,j]和[j+<span class="hljs-number">1</span>,r]这种，那么<span class="hljs-keyword">x</span>不应该取右边界(如r、(l+r+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)。<br>应取 <span class="hljs-keyword">x</span> = <span class="hljs-string">q[l]</span>; <span class="hljs-keyword">x</span> = <span class="hljs-string">q[(l+r)/2]</span>;<br><br>自己选择其中一种即可。<br></code></pre></div></td></tr></table></figure><p>理解后背下一种即可</p><h3 id="时间复杂度分析："><a href="#时间复杂度分析：" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h3><p><strong>了解一个算法后，时间的复杂度分析环节必不可少呀！！</strong></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/20190418144938184.png" alt="img"></p><p>根据代码我们知道，每一层的递归操作次数为该次递归所传入的元素个数，忽略每次减去的枢轴（1个元素并没有给到下一层，但是每层这里减掉一个常数对复杂度的分析影响不大，所以暂时忽略），即：</p><p>第1层是n次，</p><p>第2层有2次递归，每次n/2次，共n次操作，</p><p>第3层有4次递归，每次n/4次，共n次操作，</p><p>……</p><p>（最后一层）第k层有k次递归，每次n/2^(k-1)次，共n次操作</p><p>由于递归结束的条件是只有一个元素，所以这里的n/2^(k-1)=1   =&gt;   k=logn+1 </p><p>即递归树的深度为logn</p><p>时间复杂度=每层的操作次数*树的深度=nlogn 即：O(nlgn);</p><p>这就得出了时间复杂度</p><p><strong>要注意的是，快排这里说的时间复杂度是平均时间复杂度，因为不可能每次都是对半分</strong></p><h2 id="归并排序（merge-sort）o（nlogn）"><a href="#归并排序（merge-sort）o（nlogn）" class="headerlink" title="归并排序（merge sort）o（nlogn）"></a>归并排序（merge sort）o（nlogn）</h2><p>归并也是利用到了分治的思想哦</p><h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>先看图解：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1024555-20161218163120151-452283750.png" alt="img"></p><p>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。</p><p>可以明确的看出，这个排序分俩个阶段，一个是分区间的阶段，一个是排序阶段，以下来一一解读</p><p>分阶段：</p><p><strong>分</strong>阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n。</p><p>治阶段：（重点，思想很重要，之后这种思想可能会一直出来）</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1024555-20161218194508761-468169540.png" alt="img"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1024555-20161218194621308-588010220.png" alt="img"></p><p>这就是治阶段的排序算法，是不是会联想到双指针算法呢，是的，就是典型的不同区间的双指针算法，之后还会写关于双指针算法的博客的</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>直接上板子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[],<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l&gt;=r) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">int</span> mid =l+r &gt;&gt;<span class="hljs-number">1</span>;<br>mergeSort(q, l, mid);<br>mergeSort(q, mid+<span class="hljs-number">1</span>, r);<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i&lt;=mid&amp;&amp;j&lt;=r) &#123;<br><span class="hljs-keyword">if</span> (q[i]&lt;=q[j]) t[k++]=q[i++];<span class="hljs-comment">//这里的符号反向就可以逆序输出</span><br><span class="hljs-keyword">else</span> t[k++]=q[j++];<br>&#125;<br><span class="hljs-keyword">while</span> (i&lt;=mid) &#123;<br>t[k++]=q[i++];<br>&#125;<br><span class="hljs-keyword">while</span> (j&lt;=r) &#123;<br>t[k++]=q[j++]; <br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j2 = <span class="hljs-number">0</span>,j3=l; j3 &lt;=r ; j2++,j3++) &#123;<br>q[j3]=t[j2];<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里的边界值处理也是挺蛋疼的，建议理解原理后，把模板直接背过</p><h3 id="时间复杂度的分析："><a href="#时间复杂度的分析：" class="headerlink" title="时间复杂度的分析："></a>时间复杂度的分析：</h3><p>这里的时间复杂度分析和快排非常相似</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/20170909101802866" alt="这里写图片描述"></p><p>从这个递归树可以看出，第一层时间代价为cn，第二层时间代价为cn/2+cn/2=cn…..每一层代价都是cn，总共有logn+1层。所以总的时间代价为cn*(logn+1).时间复杂度是o(nlogn).</p><p>我们分析快排和归并排序的时间复杂度的时候，一般用到的都是这种递归树</p><hr>所以快排和归并排序你学会了吗？😄]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021-7-11</title>
    <link href="/posts/1617049186.html"/>
    <url>/posts/1617049186.html</url>
    
    <content type="html"><![CDATA[<h2 id="每日心情和事情分享"><a href="#每日心情和事情分享" class="headerlink" title="每日心情和事情分享"></a>每日心情和事情分享</h2><span id="more"></span><p>最近给我的感觉就是过的很费，没有做什么实质性的东西，为了不挂科在学文化课，就是挺功利的。</p><p>就感觉是啥也没干一天就过去了，这样的日子已经持续了不下一周了，都快疯掉了。</p><p>并且之后要做的事真的很多，想赶出来时间早点去弄，却天天还在学文化课。</p><ul><li><input disabled="" type="checkbox"> 移动应用大赛</li><li><input disabled="" type="checkbox"> 算法提高</li><li><input disabled="" type="checkbox"> 剪辑视频</li><li><input disabled="" type="checkbox"> 讲解算法（在b站）</li><li><input disabled="" type="checkbox"> 大数据分析比赛（py三大库，matplotlib，numpy，pandas）</li><li><input disabled="" type="checkbox"> 排课系统的大创（要先学好redis和boot）</li><li><input disabled="" type="checkbox"> springboot</li><li><input disabled="" type="checkbox"> redis</li><li><input disabled="" type="checkbox"> 编译原理</li><li><input disabled="" type="checkbox"> 概率论</li><li><input disabled="" type="checkbox"> 驾照</li><li><input disabled="" type="checkbox"> c++（竞赛向）</li><li><input disabled="" type="checkbox"> Java新特性（lambda表达式等）</li></ul><p>属实是挺多的吧，但是也会努力在假期赶出很多。</p><p>希望等下学期来的时候我应该已经提升很多了吧，<strong>不是应该，是肯定！！！</strong></p><p>这篇文章不会删掉，假期回来后看看学了多少，之后也会发出对应的文章。</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>筛质数</title>
    <link href="/posts/2574143239.html"/>
    <url>/posts/2574143239.html</url>
    
    <content type="html"><![CDATA[<p>说到筛质数，大家想到的可能都会是那个暴力枚举的方法，这篇文章将讲述三种比暴力枚举好的方法：朴素筛，埃氏筛法，欧拉筛法</p><span id="more"></span><p>由一道题来引出三种筛质数的方法：</p><h2 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h2><blockquote><p>给定一个正整数 n，请你求出 1∼n 中质数的个数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含整数 n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示 1∼n1∼n 中质数的个数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^6</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure></blockquote><h3 id="比较暴力的解法：o（nlogn）"><a href="#比较暴力的解法：o（nlogn）" class="headerlink" title="比较暴力的解法：o（nlogn）"></a>比较暴力的解法：o（nlogn）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> shai;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>;<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cnt;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> primes[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> st[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> num=scanner.nextInt();<br><br>        get_primes(num);<br>        System.out.println(cnt);<br>        <span class="hljs-comment">//System.out.println(Arrays.toString(primes));</span><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i])&#123;<br>                primes[cnt++]=i;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>*i; j &lt;=n ; j+=i) &#123;<br>                    st[j]=<span class="hljs-keyword">true</span>;<br>            &#125;<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个primes数组来存质数；其实这个就比原来那个暴力的就好一点了，但是缺点还是比较明显的，就是为每一个数筛倍数的时候很明显是有可能和之前筛过的重复。举个例子</p><p>6这个数在2的时候会把6筛掉，4的时候也会去把6筛掉，很明显重复次数是非常多</p><p>这个时间复杂度怎么理解呢？</p><img src="http://jin-xuanjie.gitee.io/note-pad\image-20210707182426474.png" alt="image-20210707182426474" style="zoom:50%;" /><p>所有的次数就是第一行，然后把n提出来就是第二行的那个式子，第三行是怎么来的呢？</p><p>这时我们就要利用调和级数，就会得到最后一行，所以时间复杂度就得出了</p><h3 id="埃氏筛法：O-nloglogn"><a href="#埃氏筛法：O-nloglogn" class="headerlink" title="埃氏筛法：O(nloglogn)"></a>埃氏筛法：O(nloglogn)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i])&#123;<br>                primes[cnt++]=i;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>*i; j &lt;=n ; j+=i) &#123;<br>                st[j] = <span class="hljs-keyword">true</span>;<br>            &#125;&#125;<br><br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>这里比上面优化的一点是，不是每个数的自己的倍数都去改成true，而是只改质数的，<strong>毕竟所有的合数可以被质数整除</strong>，这个就是比朴素筛法的优化点，但是依旧不够，还是有冲突</p><p>21既是3的倍数也是7的倍数，那么3和7都会把他筛一遍，很明显是有浪费的，那么就会出现优化</p><p>这个时间复杂度计算用到了<strong>质数定理</strong>，具体可以去百度查，我这里放一个图片吧</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210707182335990.png" alt="image-20210707182335990"></p><p>这个质数定理，大概说了一件什么事呢？ 就是在n很大的时候，n以下的质数个数趋近于n/lgn</p><p>所以带进去时间复杂度就是O(nloglogn)</p><h3 id="线性筛法：-也叫欧拉筛-o-n"><a href="#线性筛法：-也叫欧拉筛-o-n" class="headerlink" title="线性筛法：(也叫欧拉筛)o(n)"></a>线性筛法：(也叫欧拉筛)o(n)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000010</span>;<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cnt;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> primes[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> st[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> num=scanner.nextInt();<br><br>        get_primes(num);<br>        System.out.println(cnt);<br>        <span class="hljs-comment">// System.out.println(Arrays.toString(primes));</span><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i]) &#123;<br>                primes[cnt++] = i;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>; primes[j] &lt;=n/i ; j++) &#123;<br>                st[primes[j]*i] = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">if</span> ·(i%primes[j]==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>主要思想是每个数都只能被自己的最小质因数排除,因为所有的合数都会被质数筛掉，这样每个数就不会被重复筛，那么理所当然的时间复杂度就是o（n）</p><hr><p>这时有人可能会说，有欧拉筛说这么多干嘛？</p><p>的确是的，以后我们用的都是时间最节约的欧拉筛，但是对于更多人而言，我觉得演变的思想理解，远比一个代码模板重要的多。</p><hr><p>所以筛质数的方法你理解了吗？😄</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021/7/6</title>
    <link href="/posts/3683252258.html"/>
    <url>/posts/3683252258.html</url>
    
    <content type="html"><![CDATA[<h2 id="每日的心情，和事情分享"><a href="#每日的心情，和事情分享" class="headerlink" title="每日的心情，和事情分享"></a>每日的心情，和事情分享</h2><span id="more"></span><p>之前见到的那个人今天又有见到，意外的是旁边还有人😄</p><hr><p>今天的状态还挺差的，就没有怎么学习，一下午等答辩最后都没有答上，也是挺难受的。</p><p>晚上去洗个澡，来写了这篇日记，没什么感慨的，就是总结一下今天，最近的状态挺糟糕的，希望能早点脱离出这种状态</p><p>之后为了算法竞赛和一些事情的考虑，准备转战c++了，又要忙一阵了，想了想这不就是我们这个年纪该做的事吗，如果现在做着80岁了还能做的事，到了那个年纪的我也会对自己很失望吧。</p><hr><p>之后我准备试着搭一下oj，不知道会不会成功hh</p><p>如果成功了，之后的教学就又会轻松很多，刷题也可以来我这里了，配着在B站的课程一起食用应该是不错</p><hr><p>有时候累了倦了就停下来休息休息，没什么的。</p><p><strong>我是这样觉得：开心的时候呢就笑，痛了就哭，困了就睡，喜欢就爱，饿了就吃，恨了就放手，累了就休息，生活不易，简单那才是最好</strong></p><p class="note note-success">希望看了这篇文章的人都能掌握自己的航舵，走向自己精彩的人生！！</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次献血</title>
    <link href="/posts/2673705868.html"/>
    <url>/posts/2673705868.html</url>
    
    <content type="html"><![CDATA[<p>今天第一次献血，也算是完成了自己之前比较怕的事情吧！</p><span id="more"></span><p>原本没有想着去，因为室友的一句话，就动了要去的念头。其实还真的蛮怕的，主要的恐惧还是因为未知，所以就想要挑战一下自己吧。</p><p>另一方面呢想了想，其实对于我们来说不会任何坏处，甚至会有好处，如果我们的这一点点的努力，真的可以让一些人得到帮助，我觉得就凭这个也值得我去做。</p><p>种种原因驱使着我去了献血······</p><p>献完血后，之前的恐惧也就烟消云散了，这算不算战胜了自己呢？hh</p><p>有时候我们拼了命的翻山越岭，去越过山头，有时候山的另一面可能真的没啥，或许还比山的这面还要差，有时候我们很怕的事情到头来也不过是过眼云烟</p><p><strong>不管怎样吧，常怀赤子之心，不坠青云之志，我觉得就够了，希望之后我在任何事情上，都会有今天的勇气去不断战胜自己，加油吧！</strong></p><p>献的时候忘记照相了，就附俩张献血证的照片吧hh：</p><img src="http://jin-xuanjie.gitee.io/note-pad\image-20210705185335114.png" alt="image-20210705185335114" style="zoom: 25%;" /><img src="http://jin-xuanjie.gitee.io/note-pad\image-20210705185434461.png" alt="image-20210705185434461" style="zoom:33%;" />]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL语句</title>
    <link href="/posts/3038647440.html"/>
    <url>/posts/3038647440.html</url>
    
    <content type="html"><![CDATA[<p>sql语句是操作对数据库和表增删改查的基础，并且sql语句是对任何关系型数据库系统都是通用的，本笔记以mysql为例子哦！</p><span id="more"></span><h1 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h1><h2 id="DQL语句"><a href="#DQL语句" class="headerlink" title="DQL语句"></a>DQL语句</h2><h3 id="简单的查询："><a href="#简单的查询：" class="headerlink" title="简单的查询："></a>简单的查询：</h3><p>select 字段名1，字段名2， from 表名。</p><p>提示：</p><ul><li>任何一条sql语句以；结尾</li><li>sql不区分大小写</li></ul><p>我们的字段可以参与数学运算</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210121616640.png" alt="image-20210210121616640"></p><p>也可以为这个数学运算后的字段重新改个名，如下：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210121712952.png" alt="image-20210210121712952"></p><p>若有中文要括上单引号；</p><p>标准sql语句中要求字符串使用单引号括起来。</p><p>查询所有字段：</p><p>实际开发中不建议使用。</p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>利用where来限制条件</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210122302072.png" alt="image-20210210122302072"></p><p>执行顺序：先from，然后where，最后select</p><p>对于不等于来说可以使用！=也可以使用&lt;&gt;，都是可以的。 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210123159560.png" alt="image-20210210123159560"></p><p>and可以</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210123325041.png" alt="image-20210210123325041"></p><p>between可以（between是闭区间）</p><p>between and使用的时候小数字在前，大数字在后。</p><p>between and也可以用在字符方面，此时是左闭右开<img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210124021482.png" alt="image-20210210124021482"></p><p>数据库中null不是一个值，代表什么都没有，为空</p><p>空不是一个值，不能用等号来衡量，</p><p>必须使用is null 或者is not null。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210125341124.png" alt="image-20210210125341124"></p><p>查询时or和and是由优先级的。</p><p>当运算符的优先级不确定的时候利用小括号。</p><p>in关键字：</p><p>in等同于or</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210125651759.png" alt="image-20210210125651759"></p><p>in后面的不是区间，而只是一个值。</p><p>当然有in 也就也有not in</p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>必须掌握%和_的使用</p><p>%代表任意多个字符，_代表任意的一个字符。</p><h3 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h3><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210134930895.png" alt="image-20210210134930895"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210135420494.png" alt="image-20210210135420494"></p><p>执行顺序，oredr by是最后执行的。</p><h3 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h3><p>输入一行，输出一行。</p><p>只要数学表达式中有null出现，最终结果就必须是null</p><p>ifnull（）空处理函数</p><p>ifnull（可能为null的数据，被当做什么处理）：单行处理</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210154445168.png" alt="image-20210210154445168"></p><h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><ul><li>count 技术</li><li>sum求和</li><li>avg平均值</li><li>max最大值</li><li>min最小值</li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210153555737.png" alt="image-20210210153555737"></p><p>也叫多行处理函数：输入多行，最终输出结果是一行。</p><p>分组函数会自动忽略空（null）。</p><h3 id="group-by-和having"><a href="#group-by-和having" class="headerlink" title="group by 和having"></a>group by 和having</h3><p>group by：按照某个字段或者某些字段进行分组</p><p>having：对分组之后的数据进行再次的过滤。</p><p>分组函数都会和group一起使用。分组函数都会在group by结束之后再执行的。没有group by整张表就自成一组。</p><p>where后面不能用分组函数。</p><p>再写一遍顺序：</p><ol><li>from</li><li>where</li><li>group by</li><li>having</li><li>select</li><li>order by</li></ol><p>若一条sql语句中有group by的话，select后面只能加分组函数和分组的字段，其他的一律不行。</p><p>多个字段可以联合起来分组</p><p> <img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210191259506.png" alt="image-20210210191259506"></p><p>可以用where过滤的话，尽量在where就把数据过滤掉。</p><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210192727699.png" alt="image-20210210192727699"></p><p>distinct只能出现在所有字段的最前面，如果多条字段说明是联合去重。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210194456287.png" alt="image-20210210194456287"></p><h3 id="完整的dql语句："><a href="#完整的dql语句：" class="headerlink" title="完整的dql语句："></a>完整的dql语句：</h3><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210192537089.png" alt="image-20210210192537089"></p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>一一般来说。大部分都不是从单表中查询数据，一般都是多张联合取出的最终结果，在实际开发中，一般一个业务都会对应多张表。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210194906219.png" alt="image-20210210194906219"> </p><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><p>根据语法：</p><ul><li>sql92</li><li>sql99</li></ul><p>根据连接方式</p><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li><li>全连接（很少用）</li></ul><h5 id="笛卡尔积现象"><a href="#笛卡尔积现象" class="headerlink" title="笛卡尔积现象"></a>笛卡尔积现象</h5><p>当俩张表进行连接查询的时候，没有任何条件限制，最终查询结果条数是俩张表记录条数的乘积。</p><p>关于表的别名：</p><ul><li>执行效率高</li><li>可读性好</li></ul><p>避免笛卡尔现象的方法是加条件来进行过滤。</p><p>但是要注意的是，避免了笛卡尔积现象，并不会减少记录的匹配次数，只不过显示的时候显示的是有效数据。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210203216468.png" alt="image-20210210203216468"></p><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p>条件是等量关系</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210212925382.png" alt="image-20210210212925382"></p><p>上述是sql99语法</p><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210224100786.png" alt="image-20210210224100786"></p><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210231319594.png" alt="image-20210210231319594"></p><p>假象复制一份相同的，然后自连接。</p><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>假设a，b表进行连接，使用外连接的话，ab俩张表中一张是主表，一张是副表，主要查询主表上的数据，捎带着查询副表，当副表中没有和主表数据匹配上的自动模拟出null来与之匹配。 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211075820541.png" alt="image-20210211075820541"></p><h4 id="三张以上表查询"><a href="#三张以上表查询" class="headerlink" title="三张以上表查询"></a>三张以上表查询</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211081708047.png" alt="image-20210211081708047"></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>select语句嵌套select语句查询</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211085057173.png" alt="image-20210211085057173"></p><p>where里嵌套（上述）</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211105112132.png" alt="image-20210211105112132"></p><p>这个是from里嵌套</p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>可以将查询结果集相加</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211162901983.png" alt="image-20210211162901983"></p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>limit可以限制条数</p><p>语法是 limit 起点，个数</p><p>分页查询全靠这玩意。</p><p>limit是sql语句中最后执行的一个环节。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211164115218.png" alt="image-20210211164115218"></p><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>建表语句语法格式：</p><p>create table 表名{</p><p>​    字段名 1 数据类型，</p><p>​    字段名 2 数据类型，</p><p>​    字段名 3 数据类型，</p><p>}</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211164701465.png" alt="image-20210211164701465"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211180423765.png" alt="image-20210211180423765"></p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>insert语句：</p><p>insert into 表名（字段名1，2，3，4） values（值1，2，3，4）；</p><p>字段如果只写部分的，就会为其他的字段附上null</p><p>可以省略前面的字段，但是要按照顺序，并且全写。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211182040917.png" alt="image-20210211182040917"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211182618059.png" alt="image-20210211182618059"></p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>可以用default来设定默认值</p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>update</p><p>update 表名 set 字段名=值······ where 条件</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211183216776.png" alt="image-20210211183216776"></p><p>没有限制条件，整张表所有字段全部更新。</p><h2 id="删除数据（表）"><a href="#删除数据（表）" class="headerlink" title="删除数据（表）"></a>删除数据（表）</h2><p>删除表：drop table 表名</p><p>语法格式</p><p>delete from 表名 where 条件；</p><p>没有条件将全部删除</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211184212309.png" alt="image-20210211184212309"></p><h2 id="对于表结构的修改"><a href="#对于表结构的修改" class="headerlink" title="对于表结构的修改"></a>对于表结构的修改</h2><p> 使用工具完成就可以了，因为实际开发中，表一旦设计好，对表结构的修改是很少的。</p><p>增删改查有一个术语：crud操作</p><p>create（增） retrieve（检索） update（修改） delete（删除）</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>添加约束的目的时为了保证表的数据的合法性，有效性，完整性。</p><p>常见的约束：</p><ul><li>非空约束（not null）</li><li>唯一约束（unique）唯一性但可以为null</li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211200536663.png" alt="image-20210211200536663"></p><ul><li>主键约束（primary key）不可为空也不能重复 </li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211201831871.png" alt="image-20210211201831871"></p><p>主键应该不和业务挂钩。<img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211202657776.png" alt="image-20210211202657776"></p><p>可以以这种方式，自动添加自增的主键。</p><ul><li>外键约束（foreign key）</li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211203647137.png" alt="image-20210211203647137"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211204005433.png" alt="image-20210211204005433"></p><p>外键值可以为null</p><p>被引用的字段可以不用为主键，但至少要有unique约束，是独一无二的。</p><ul><li>检查约束（check）：oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</li></ul><h2 id="悲观锁（行级锁）和乐观锁"><a href="#悲观锁（行级锁）和乐观锁" class="headerlink" title="悲观锁（行级锁）和乐观锁"></a>悲观锁（行级锁）和乐观锁</h2><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210213222734274.png" alt="image-20210213222734274"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>sql语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>mysql</tag>
      
      <tag>sql语言</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK动态代理</title>
    <link href="/posts/3755745285.html"/>
    <url>/posts/3755745285.html</url>
    
    <content type="html"><![CDATA[<p> 之后我们学到的AOP（面向切面编程）的底层就是这个哦，而这个的底层就是反射机制，至少要看一看反射机制再来看看这个呀！</p><span id="more"></span><h1 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h1><p>动态代理基于反射机制</p><p>掌握程度：</p><ul><li>什么是动态代理</li><li>知道动态代理能作什么</li></ul><p>使用代理模式的作用：</p><ul><li>功能增强：在原有的功能上，增加了额外的功能。新增加的功能叫做功能增强</li><li>控制访问：代理类不让你访问目标，例如商家不让用户访问厂家</li></ul><p>实现代理的方式：</p><ul><li>静态代理：<ul><li>自己手工实现，自己创建一个代理类</li><li>代理的目标类也是确定的<ul><li>实现简单，容易理解 </li></ul></li></ul></li><li>动态代理：在程序的执行过程中，使用jdk的反射机制，创建代理类对象，并动态的指定要代理的目标类<ul><li>静态代理中当目标类很多的时候，我们会使用动态代理<ul><li>因为目标类即使很多，代理类可以很少</li><li>当你修改了接口中的方法，不会影响代理类</li></ul></li></ul></li></ul><p>说白一点，动态代理就是具有创建对象的能力</p><h2 id="jdk动态代理的实现"><a href="#jdk动态代理的实现" class="headerlink" title="jdk动态代理的实现"></a>jdk动态代理的实现</h2><ul><li>jdk动态代理：<ul><li>使用java反射包中的类和接口实现动态代理功能</li><li>反射包java.lang.reflect，里面有三个类：<ul><li>invocationhandler<ul><li><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322185518876.png" alt="image-20210322185518876"></li></ul></li><li>Method<ul><li><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322185550552.png" alt="image-20210322185550552"></li></ul></li><li>Proxy<ul><li><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322185613718.png" alt="image-20210322185613718"></li></ul></li></ul></li></ul></li><li>cglib动态代理（了解）<ul><li>cglib是第三方的工具库，创建代理对象 </li><li>cglib原理是继承，通过继承目标类来创建它的子类，在子类中重写父类方法，实现功能的修改</li><li>正因为cgliv是继承，所以要求目标类和方法不是final的</li><li>cglib在很多框架中使用</li></ul></li></ul><p>cglib在代理效率上高于jdk。</p><p>但是一般的开发中不适用cglib，只需要理解即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tett1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        HelloService helloService=new HelloService();</span><br><span class="hljs-comment">//        helloService.sayHello(&quot;jxj&quot;);</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class c=Class.forName(<span class="hljs-string">&quot;com.jxj.HelloService&quot;</span>);<br>            Object obj=c.newInstance();<br>            Method m1 =c.getDeclaredMethod(<span class="hljs-string">&quot;sayHello&quot;</span>,String.class);<br>            Object retValue =m1.invoke(obj,<span class="hljs-string">&quot;jxj&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Class.forname后的参数必须带包名</p><p>上述是利用反射机制调用方法</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322190225001.png" alt="image-20210322190225001"></p><p>handler</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-comment">//必须实现InvocationHandler接口，完成代理类要做的功能(1.调用目标方法，2.执行功能增强)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySellHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Object target=<span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MySellHandler</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>   <span class="hljs-comment">// float price =factory.sell(amount);</span><br>        Object res =<span class="hljs-keyword">null</span>;<br><br>       res= method.invoke(target,args);<br>       <span class="hljs-keyword">if</span> (res!=<span class="hljs-keyword">null</span>)&#123;<br>           Float price = (Float) res;<br>           price+=<span class="hljs-number">25</span>;<br>           res=price;<br><br><br>       &#125;<br>        System.out.println(<span class="hljs-string">&quot;返你一个优惠卷&quot;</span>);<br><span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>mainshop</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainShop</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UsbSell factory =<span class="hljs-keyword">new</span> factory();<br>        InvocationHandler handler=<span class="hljs-keyword">new</span> MySellHandler(factory);<br>     Object proxy=   Proxy.newProxyInstance(factory.getClass().getClassLoader(),factory.getClass().getInterfaces(),handler);<br>        UsbSell usbSell=(UsbSell)proxy;<br>        <span class="hljs-keyword">float</span> price= usbSell.sell(<span class="hljs-number">1</span>);<br>        System.out.println(price);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322230835265.png" alt="image-20210322230835265"></p><h2 id="动态代理的功能"><a href="#动态代理的功能" class="headerlink" title="动态代理的功能"></a>动态代理的功能</h2><p>可以在不改目标方法功能的前提下，可以在代理中增强自己的代码。</p><p>动态代理必须要有自己的接口</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>原生JAVAWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>计算机技术</tag>
      
      <tag>模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/posts/2414116852.html"/>
    <url>/posts/2414116852.html</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>想用java连接数据库吗，jdbc就是原生的连接数据库技术噢！</p><p>需先了解一种数据库，本笔记以mysql为例子</p><span id="more"></span><p>JDBC:java database connectivity（java语言连接数据库）</p><p>JDBC的本质：jdbc是sun公司指定的一套接口 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210160127732.png" alt="image-20210210160127732"></p><h2 id="JDBC开发前的准备工作"><a href="#JDBC开发前的准备工作" class="headerlink" title="JDBC开发前的准备工作"></a>JDBC开发前的准备工作</h2><p>先有对应的jar包，先从官网下载对应的驱动jar包，然后将其配置到环境变量classpath中。</p><h2 id="JDBC编程六步"><a href="#JDBC编程六步" class="headerlink" title="JDBC编程六步"></a>JDBC编程六步</h2><ol><li><p>注册驱动（告诉java程序，即将连接的是哪个数据库）</p></li><li><p>获取链接（jvm与数据库进程之间的进程打开了，重量级的，所以一定要记得关闭）</p></li><li><p>获取数据库操作对象（专门执行sql语句的对象）</p></li><li><p>执行sql语句（DQL,DML）</p></li><li><p>处理查询结果集（只有处理的是select这种查询语句的时候，才有这个第五步）</p></li><li><p>释放资源（使用完资源要记得关闭资源，java和数据库属于进程间的东西，使用完要关闭）</p></li></ol><p>连接实例：（如下）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test103</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Statement stmt =<span class="hljs-keyword">null</span>;<br>Connection connection =<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>        Driver driver =<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver();<br><br>            DriverManager.registerDriver(driver);<br>            String url=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>;<br>            String user=<span class="hljs-string">&quot;root&quot;</span>;<br>            String password=<span class="hljs-string">&quot;jxj123456&quot;</span>;<br><br>            connection=DriverManager.getConnection(url,user,password);<br>            System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>+connection);<br>stmt=connection.createStatement();<span class="hljs-comment">//statement专门执行sql语句的</span><br>String sql =<span class="hljs-string">&quot;insert into t_student(name) values(&#x27;jxj&#x27;)&quot;</span>;<br><span class="hljs-keyword">int</span> count =stmt.executeUpdate(sql);<span class="hljs-comment">//是影响数据库的记录条数</span><br>System.out.println(count ==<span class="hljs-number">0</span>?<span class="hljs-string">&quot;保存失败&quot;</span>:<span class="hljs-string">&quot;保存成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(stmt !=<span class="hljs-keyword">null</span>)&#123;<br>stmt.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(connection !=<span class="hljs-keyword">null</span>)&#123;<br>connection.close();<br>&#125;&#125;<span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>jdbc中sql语句的最后不需要有分号； 写上报错</p><p>上述的注册驱动不常用，常用的注册驱动使用反射机制，因为这个接收的是字符串，我们可以使用配置文件。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210212234248396.png" alt="image-20210212234248396"></p><h2 id="url："><a href="#url：" class="headerlink" title="url："></a>url：</h2><p>统一资源定位符（网络中某个资源的绝对路径）</p><p>url包括协议+ip+端口+资源名</p><h2 id="使用资源绑定器-删除"><a href="#使用资源绑定器-删除" class="headerlink" title="使用资源绑定器(删除)"></a>使用资源绑定器(删除)</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test103</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ResourceBundle bundle =ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>String driver =bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>String url =bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>String user =bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>String password =bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br>Statement stmt =<span class="hljs-keyword">null</span>;<br>Connection connection =<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>Class.forName(driver);<br>       connection=DriverManager.getConnection(url,user,password);<br>            System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>+connection);<br>stmt=connection.createStatement();<span class="hljs-comment">//statement专门执行sql语句的</span><br>String sql =<span class="hljs-string">&quot;delete from t_student where name =&#x27;jxj&#x27; &quot;</span>;<br><span class="hljs-keyword">int</span> count =stmt.executeUpdate(sql);<span class="hljs-comment">//是影响数据库的记录条数，executeupdate只能进行增删改</span><br>System.out.println(count ==<span class="hljs-number">0</span>?<span class="hljs-string">&quot;删除失败&quot;</span>:<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(stmt !=<span class="hljs-keyword">null</span>)&#123;<br>stmt.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(connection !=<span class="hljs-keyword">null</span>)&#123;<br>connection.close();<br>&#125;&#125;<span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>jdbv.properties:</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/bjpn</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">jxj123456</span><br></code></pre></div></td></tr></table></figure><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210213001734130.png" alt="image-20210213001734130"></p><p>sql语句结果集的本质（上图）</p><p>jdbc中所有的下标都从1开始</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test103</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ResourceBundle bundle =ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>String driver =bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>String url =bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>String user =bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>String password =bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>Statement stmt =<span class="hljs-keyword">null</span>;<br>Connection connection =<span class="hljs-keyword">null</span>;<br>ResultSet rs =<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><br><br>           Class.forName(driver);<br>            <br><br>            connection=DriverManager.getConnection(url,user,password);<br>            System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>+connection);<br>stmt=connection.createStatement();<span class="hljs-comment">//statement专门执行sql语句的</span><br>String sql =<span class="hljs-string">&quot;select * from t_student &quot;</span>;<br>rs =stmt.executeQuery(sql);<span class="hljs-comment">//是影响数据库的记录条数</span><br><span class="hljs-keyword">while</span>(rs.next())&#123;<br>System.out.println(rs.getString(<span class="hljs-string">&quot;no&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;classno&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;sex&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;birth&quot;</span>));<br>&#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(rs !=<span class="hljs-keyword">null</span>)&#123;<br>rs.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(stmt !=<span class="hljs-keyword">null</span>)&#123;<br>stmt.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(connection !=<span class="hljs-keyword">null</span>)&#123;<br>connection.close();<br>&#125;&#125;<span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>查询数据库数据</p><p>增删改数据时返回的是int</p><p>查询时返回的是结果集</p><p>利用getstring的方法来获取，参数可以是列数也可以是字段名称</p><p>还可以以其他类型获取，比如用getint获取可以进行运算。</p><h2 id="IDEA-jdbc环境的准备"><a href="#IDEA-jdbc环境的准备" class="headerlink" title="IDEA jdbc环境的准备"></a>IDEA jdbc环境的准备</h2><p>先有jdbc的jar包，然后右键模块点open module setting 然后点加号把jar包引进来即可</p><h3 id="powerdesigner的下载和破解"><a href="#powerdesigner的下载和破解" class="headerlink" title="powerdesigner的下载和破解"></a>powerdesigner的下载和破解</h3><p>将破解文件替换入安装目录当中即可</p><p>简单的使用看：</p><p><a href="https://www.bilibili.com/video/BV1Bt41137iB?p=16">JDBC从入门到精通视频教程-JDBC实战精讲_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><h3 id="连接jdbc去登陆的案例"><a href="#连接jdbc去登陆的案例" class="headerlink" title="连接jdbc去登陆的案例"></a>连接jdbc去登陆的案例</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><span class="hljs-keyword">import</span> com.mysql.cj.protocol.Resultset;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Map&lt;String,String&gt; userLoginInfo=initUI();<br>        <span class="hljs-keyword">boolean</span> a =login(userLoginInfo);<br>        System.out.println(a?<span class="hljs-string">&quot;登录成功&quot;</span>:<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>&#123;<br>        Connection conn =<span class="hljs-keyword">null</span>;<br>        Statement stmt =<span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>            stmt =conn.createStatement();<br>            String sql=<span class="hljs-string">&quot;select * from t_user where loginName=&#x27;&quot;</span>+userLoginInfo.get(<span class="hljs-string">&quot;loginName&quot;</span>)+<span class="hljs-string">&quot;&#x27;and loginPwd=&#x27;&quot;</span>+userLoginInfo.get(<span class="hljs-string">&quot;loginPwd&quot;</span>)+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            rs=  stmt.executeQuery(sql);<br>            <span class="hljs-keyword">if</span> (rs.next())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title">initUI</span><span class="hljs-params">()</span> </span>&#123;<br>        Scanner s =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>        String loginName =s.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>        String loginPwd =s.nextLine();<br>        Map&lt;String,String&gt; userLoginInfo =<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginName&quot;</span>,loginName);<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginPwd&quot;</span>,loginPwd);<br>        <span class="hljs-keyword">return</span> userLoginInfo;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>上述的验证方法很容易产生sql注入</p><p>用户输入的信息中包含sql语句的关键字，这些关键字参与sql语句的编译过程。进而达到黑进去的目的。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210213115833311.png" alt="image-20210213115833311"></p><p>如何不会产生sql注入</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><br><span class="hljs-keyword">import</span> com.mysql.cj.protocol.Resultset;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Map&lt;String,String&gt; userLoginInfo=initUI();<br>        <span class="hljs-keyword">boolean</span> a =login(userLoginInfo);<br>        System.out.println(a?<span class="hljs-string">&quot;登录成功&quot;</span>:<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>&#123;<br>        Connection conn =<span class="hljs-keyword">null</span>;<br>        PreparedStatement ps =<span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        String loginName =userLoginInfo.get(<span class="hljs-string">&quot;loginName&quot;</span>);<br>        String loginPwd=userLoginInfo.get(<span class="hljs-string">&quot;loginPwd&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>            String sql=<span class="hljs-string">&quot;select * from t_user where loginName= ? and loginPwd= ?&quot;</span>;<br>            ps=conn.prepareStatement(sql);<br>            ps.setString(<span class="hljs-number">1</span>,loginName);<br>            ps.setString(<span class="hljs-number">2</span>,loginPwd);<br>            rs=  ps.executeQuery();<br>            <span class="hljs-keyword">if</span> (rs.next())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ps.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title">initUI</span><span class="hljs-params">()</span> </span>&#123;<br>        Scanner s =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>        String loginName =s.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>        String loginPwd =s.nextLine();<br>        Map&lt;String,String&gt; userLoginInfo =<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginName&quot;</span>,loginName);<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginPwd&quot;</span>,loginPwd);<br>        <span class="hljs-keyword">return</span> userLoginInfo;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>利用preparestatement预编译的方法来预防。</p><h3 id="preparestatement和statement的对比"><a href="#preparestatement和statement的对比" class="headerlink" title="preparestatement和statement的对比"></a>preparestatement和statement的对比</h3><ul><li>后者存在sql注入问题，前者完美解决</li><li>后者编译一次执行一次，前者只编译一次，效率高</li><li>前者会在编译时进行安全检查</li><li>综上preparestatement使用较多</li></ul><p>那什么时候使用statement呢？</p><ul><li>在业务方面需要进行sql语句拼接的。必须使用statement</li></ul><h2 id="jdbc的事务处理"><a href="#jdbc的事务处理" class="headerlink" title="jdbc的事务处理"></a>jdbc的事务处理</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        PreparedStatement ps =<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>            conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>            String sql=<span class="hljs-string">&quot;update t_account set Money =? where Account =?&quot;</span>;<br>            ps =conn.prepareStatement(sql);<br>            ps.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>);<br>            ps.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;111&quot;</span>);<br>            <span class="hljs-keyword">int</span> count =ps.executeUpdate();<br>            ps.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">20000</span>);<br>            ps.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;222&quot;</span>);<br>             count +=ps.executeUpdate();<br>             conn.commit();<br>            System.out.println(count ==<span class="hljs-number">2</span>?<span class="hljs-string">&quot;转账成功&quot;</span>:<span class="hljs-string">&quot;转账失败&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            <span class="hljs-keyword">if</span> (conn !=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.rollback();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;&#125;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ps!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<span class="hljs-keyword">if</span> (conn!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>重点：</p><ul><li>conn.setAutoCommit(false);</li><li>conn.commit;</li><li>conn.rollback;</li></ul><h2 id="建立util来简化代码"><a href="#建立util来简化代码" class="headerlink" title="建立util来简化代码"></a>建立util来简化代码</h2><p>DBUtil：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc.DBUtil;<br><br><span class="hljs-keyword">import</span> com.mysql.cj.protocol.Resultset;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DBUtil</span> </span>&#123;<br>    <span class="hljs-comment">//为什么要用私有的构造方法呢？</span><br>    <span class="hljs-comment">//为了防止你new对象。</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">DBUtil</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br><br>         Connection conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>         <span class="hljs-keyword">return</span> conn;<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;<br>         <span class="hljs-keyword">if</span> (rs !=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 rs.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">if</span> (ps !=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 ps.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">if</span> (conn !=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 conn.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br>         &#125;<br>     &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>主方法调用，并且使用模糊查询：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><br><span class="hljs-keyword">import</span> com.bjpn.jdbc.DBUtil.DBUtil;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        PreparedStatement ps=<span class="hljs-keyword">null</span>;<br>        ResultSet rs=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>           conn= DBUtil.getConnection();<br>            String sql=<span class="hljs-string">&quot;select ename from emp where ename like ?&quot;</span>;<br>            ps=conn.prepareStatement(sql);<br>            ps.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;_A%&quot;</span>);<br>            rs=ps.executeQuery();<br>            <span class="hljs-keyword">while</span> (rs.next())&#123;<br>                System.out.println(rs.getString(<span class="hljs-string">&quot;ename&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            DBUtil.close(conn,ps,rs);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="DAO封装"><a href="#DAO封装" class="headerlink" title="DAO封装"></a>DAO封装</h2><p>DAO是database Access Object 数据库访问对象</p><p>作用：数据库访问对象在开发时提供针对某张表的操作细节</p><p>优点：代码简洁</p><p>DAO类：提供数据库访问对象的类</p><h3 id="DAO类开发规则"><a href="#DAO类开发规则" class="headerlink" title="DAO类开发规则"></a>DAO类开发规则</h3><ul><li>一个DAO类封装的是一张表的开发细节</li><li>DAO类命名规则：表名+Aao</li><li>DAO类所在包命名规则：公司网站域名（倒过来）.dao</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>原生JAVAWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>计算机技术</tag>
      
      <tag>连接数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/posts/2691471937.html"/>
    <url>/posts/2691471937.html</url>
    
    <content type="html"><![CDATA[<h2 id="博客说明："><a href="#博客说明：" class="headerlink" title="博客说明："></a>博客说明：</h2><p><strong>也会在这里分享每天学习和生活的趣事，心情，毕竟生活才是主旋律嘛，比任何东西都要重要得多。</strong></p><hr><p>如果觉得我分享的东西好，可以长期关注这个博客，会持续更新的！！</p><br><p class="note note-success">此博客也仅仅用作学习，和交流，如果有什么建议，欢迎给我留言</p> ]]></content>
    
    
    <categories>
      
      <category>关于博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客说明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/posts/3084993745.html"/>
    <url>/posts/3084993745.html</url>
    
    <content type="html"><![CDATA[<p>本文介绍了到目前为止，几乎可以见到的排序算法，共十种。</p><span id="more"></span><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><ul><li>内部排序：指将需要的数据加载到内存来进行排序<ul><li>插入排序<ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>选择排序<ul><li>简单选择排序</li><li>堆排序</li></ul></li><li>交换排序<ul><li>冒泡排序</li><li>快速排序</li></ul></li><li>归并排序</li><li>基数排序</li></ul></li><li>外部排序：数据量很大时，会使用这个</li></ul><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间频度：</p><ul><li>一个算法花费时间与算法中语句的执行次数成正比，那个算法中语句执行次数多，他花费时间就多。</li><li>一个算法中执行的语句次数称为时间频度<ul><li>可以忽略常数项</li><li>可以忽略系数</li><li>可以忽略低次项</li></ul></li></ul><p>忽略后的东西就是时间复杂度，也可以想成时间复杂度是时间频度的超级简略版</p><h3 id="常数阶："><a href="#常数阶：" class="headerlink" title="常数阶："></a>常数阶：</h3><p>无论代码执行了多少行，只要没有循环等复杂结构，整个代码的时间复杂度就是o(1)</p><h3 id="对数阶：以2为底数的对数为例"><a href="#对数阶：以2为底数的对数为例" class="headerlink" title="对数阶：以2为底数的对数为例"></a>对数阶：以2为底数的对数为例</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>i*=<span class="hljs-number">2</span>;&#125;<br></code></pre></div></td></tr></table></figure><p>上述的时间复杂度就是以二为底数，可以尝试着这么理解</p><p>假设x次之后循环推出了，2的x次方=n。也就是说x=以二为底数的对数</p><h3 id="线性阶："><a href="#线性阶：" class="headerlink" title="线性阶："></a>线性阶：</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>j=i;<br>j++&#125;<br></code></pre></div></td></tr></table></figure><p>这段代码会执行n遍，会随着n的变化而变化</p><h3 id="线性对数阶"><a href="#线性对数阶" class="headerlink" title="线性对数阶"></a>线性对数阶</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(m=<span class="hljs-number">1</span>;m&lt;n;m++)&#123;<br>i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>i*=<span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里嵌套了一层，一个线性和对数，所以这就是线性对数阶</p><h3 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h3><p>就是双层的for循环就不提了，还有高次方阶到最后其实是一个道理，都是一样的东西</p><h2 id="空间复杂度（简略）"><a href="#空间复杂度（简略）" class="headerlink" title="空间复杂度（简略）"></a>空间复杂度（简略）</h2><ul><li>类似于时间复杂度的讨论，一个算法的空间复杂度定义为该算法所耗费的存储空间，他也是问题规模n的函数</li><li>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的亮度，有的算法占用的空间规模和n有关</li><li>在做算法分析的时候，主要讨论的还是时间复杂度，从用户体验上看，更看重的是程序执行的速度，一些缓存产品和算法本质就是用空间换时间</li></ul><h2 id="冒泡排序（bubble-sorting）"><a href="#冒泡排序（bubble-sorting）" class="headerlink" title="冒泡排序（bubble sorting）"></a>冒泡排序（bubble sorting）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length-<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">boolean</span> flag =<span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>                <span class="hljs-keyword">if</span>(arr[j+<span class="hljs-number">1</span>]&lt;arr[j])&#123;<br>                    flag=<span class="hljs-keyword">true</span>;<br>                    swap(arr,j+<span class="hljs-number">1</span>,j);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag==<span class="hljs-keyword">false</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a:arr)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;\t%d&quot;</span>,a);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> i1)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        temp=arr[i];<br>        arr[i]=arr[i1];<br>        arr[i1]=temp;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这个排序的本质是以俩俩邻着的兑换，每一次把最后的那个数排成自己想要的顺序，以此来排成顺序。</p><p>当然了，很容易看出，如果这个序列刚开始就比较整齐，那么这么多次循环简直是在浪费，所以就可以提出优化这个概念</p><p>所以上述代码上打了一个布尔标记，那么每一次小循环中，一旦换了位置那么必定说明，flag为true，也就是说还没有规整好，若一次都没有进去过就可以直接退出了</p><p>可以用System.currentTimeMills这个方法来获取1970到现在的毫秒</p><p>然后相减可以得到程序运行的时间差 </p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChooseSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,-<span class="hljs-number">1000</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">23</span>,<span class="hljs-number">45</span>,<span class="hljs-number">3</span>,<span class="hljs-number">53</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">512</span>,<span class="hljs-number">5</span>,<span class="hljs-number">45</span>,<span class="hljs-number">1235</span>,<span class="hljs-number">213</span>,<span class="hljs-number">5</span>,<span class="hljs-number">23</span>,<span class="hljs-number">523</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">321</span>,<span class="hljs-number">432</span>,<span class="hljs-number">14231</span>,<span class="hljs-number">432</span>,<span class="hljs-number">4</span>,<span class="hljs-number">12</span>,<span class="hljs-number">6534</span>,<span class="hljs-number">764</span>,<span class="hljs-number">856</span>,<span class="hljs-number">23</span>,<span class="hljs-number">12321</span>,<span class="hljs-number">3</span>,<span class="hljs-number">213</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">123</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">123</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">int</span> min =arr[i];<br>            <span class="hljs-keyword">int</span> minindex=i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i;j&lt;arr.length;j++)&#123;<br>                <span class="hljs-keyword">if</span> (min&gt;arr[j])&#123;<br>                min=arr[j];<br>                minindex=j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (arr[i]!=min)&#123;<br>                arr[minindex]=arr[i];<br>                arr[i]=min;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i:arr)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;\t%d&quot;</span>,i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> i1)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        temp=arr[i];<br>        arr[i]=arr[i1];<br>        arr[i1]=temp;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>从前面开始排序，有小的就直接换到前面来</p><h2 id="插入排序（insertion-sorting）"><a href="#插入排序（insertion-sorting）" class="headerlink" title="插入排序（insertion sorting）"></a>插入排序（insertion sorting）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertSort</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> arr[]= &#123;<span class="hljs-number">2</span>,<span class="hljs-number">65</span>,<span class="hljs-number">6</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">123</span>,<span class="hljs-number">213</span>,<span class="hljs-number">12</span>,<span class="hljs-number">675</span>&#125;;<br>insertSort(arr);<br>System.out.println(Arrays.toString(arr));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br><span class="hljs-comment">//这里把要排进去的值存起来</span><br><span class="hljs-comment">//然后永远跟自己的前一个进行比较</span><br><span class="hljs-keyword">int</span> insertvalue=arr[i];<br><span class="hljs-keyword">int</span> insertindex=i-<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (insertindex&gt;=<span class="hljs-number">0</span>&amp;&amp;insertvalue&lt;arr[insertindex]) &#123;<br>arr[insertindex+<span class="hljs-number">1</span>]=arr[insertindex];<br>insertindex--;<br>&#125;<br><span class="hljs-keyword">if</span> (insertindex!=i-<span class="hljs-number">1</span>) &#123;<br>arr[++insertindex]=insertvalue;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>排序算法的的时间好于冒泡排序，劣于选择排序</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>交换法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.function.IntPredicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">int</span>[] arr=&#123;<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">42</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">423</span>,<span class="hljs-number">4</span>,<span class="hljs-number">324</span>,<span class="hljs-number">32</span>,<span class="hljs-number">123</span>&#125;;<br>shellSort(arr);<br> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-comment">//      int temp=0;</span><br>      <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap =arr.length/<span class="hljs-number">2</span>; gap&gt;<span class="hljs-number">0</span>; gap/=<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i-gap; j &gt;=<span class="hljs-number">0</span>; j-=gap) &#123;<br><span class="hljs-keyword">if</span> (arr[j]&gt;arr[j+gap]) &#123;<br>swap(arr, j, j+gap);<br>&#125;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;希尔排序:&quot;</span>+(++count)+<span class="hljs-string">&quot;轮&quot;</span>+Arrays.toString(arr));<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp=arr[i];<br>    arr[i]=arr[j];<br>    arr[j]=temp;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>移位法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.function.IntPredicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>arr[i]=(<span class="hljs-keyword">int</span>)( Math.random()*<span class="hljs-number">800000</span>);<br>&#125;<br><span class="hljs-keyword">long</span> begin=System.currentTimeMillis();<br>shellSort(arr);<br><span class="hljs-keyword">long</span> end=System.currentTimeMillis(); <br>System.out.println(<span class="hljs-string">&quot;花费了：&quot;</span>+(end-begin));<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-comment">//      int temp=0;</span><br>      <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap =arr.length/<span class="hljs-number">2</span>; gap&gt;<span class="hljs-number">0</span>; gap/=<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">int</span> value =arr[i];<br><span class="hljs-keyword">int</span> index=i;<br><span class="hljs-keyword">while</span> (index-gap&gt;=<span class="hljs-number">0</span>&amp;&amp;arr[index-gap]&gt;value) &#123;<br>arr[index]=arr[index-gap];<br>index -=gap;<br>&#125;<br>arr[index]=value;<br>&#125;<br><span class="hljs-comment">//System.out.println(&quot;希尔排序:&quot;+(++count)+&quot;轮&quot;+Arrays.toString(arr));</span><br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp=arr[i];<br>    arr[i]=arr[j];<br>    arr[j]=temp;<br><br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这里和交换法最大的不同就是只要小就换位置，不管是否是正确位置，移位法利用着一个辅助指针来精确找到位置插进去，第二种这个希尔排序，快到离谱。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">800000</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">800000</span>; i++) &#123;<br>            arr[i]=(<span class="hljs-keyword">int</span>)( Math.random()*<span class="hljs-number">800000</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> begin=System.currentTimeMillis();<br>        quickSort(arr, <span class="hljs-number">0</span>, arr.length-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">long</span> end=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费了：&quot;</span>+(end-begin));<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-comment">// low,high 为每次处理数组时的首、尾元素索引</span><br><br>        <span class="hljs-comment">// 当low==high是表示该序列只有一个元素，不必排序了</span><br>        <span class="hljs-keyword">if</span> (low &gt;= high) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 选出哨兵元素和基准元素。这里左边的哨兵元素也是基准元素</span><br>        <span class="hljs-keyword">int</span> i = low, j = high, base = arr[low];<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-comment">// 右边哨兵从后向前找</span><br>            <span class="hljs-keyword">while</span> (arr[j] &gt;= base &amp;&amp; i &lt; j) &#123;<br>                j--;<br>            &#125;<br>            <span class="hljs-comment">// 左边哨兵从前向后找</span><br>            <span class="hljs-keyword">while</span> (arr[i] &lt;= base &amp;&amp; i &lt; j) &#123;<br>                i++;<br>            &#125;<br>            swap(arr, i, j); <span class="hljs-comment">// 交换元素</span><br>        &#125;<br>        swap(arr, low, j); <span class="hljs-comment">// 基准元素与右哨兵交换</span><br><br>        <span class="hljs-comment">// 递归调用，排序左子集合和右子集合</span><br>        quickSort(arr, low, j - <span class="hljs-number">1</span>);<br>        quickSort(arr, j + <span class="hljs-number">1</span>, high);<br><br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[],<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp=arr[i];<br>        arr[i]=arr[j];<br>        arr[j]=temp;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这个时间是非常快的</p><p>为什么哨兵元素和基准元素交换的时候是肯定符合顺序的？</p><p>因为是右边的元素先移动</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> []arr=&#123;<span class="hljs-number">8</span>,<span class="hljs-number">123</span>,<span class="hljs-number">21</span>,<span class="hljs-number">321</span>,<span class="hljs-number">3</span>,<span class="hljs-number">213</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">int</span> []temp=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br>        mergeSort(<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>,temp,arr);<br>        System.out.println(Arrays.toString(arr));<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span>[] temp,<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (left&lt;right)&#123;<br>            <span class="hljs-keyword">int</span> mid =(left+right)/<span class="hljs-number">2</span>;<br>            mergeSort(left,mid,temp,arr);<br>            mergeSort(mid+<span class="hljs-number">1</span>,right,temp,arr);<br>            merge(arr,left,mid,right,temp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> mid,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> []temp)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i=left;<br>        <span class="hljs-keyword">int</span> j=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<span class="hljs-comment">//指向temp数组的当前索引</span><br>        <span class="hljs-keyword">while</span> (i&lt;=mid&amp;&amp;j&lt;=right)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i]&lt;=arr[j])&#123;<br>                temp[t]=arr[i];<br>                t++;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                temp[t]=arr[j];<br>                t++;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (i&lt;=mid)&#123;<br>            temp[t]=arr[i];<br>            i++;<br>            t++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (j&lt;=right)&#123;<br>            temp[t]=arr[j];<br>            t++;<br>            j++;<br>        &#125;<br>        t=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tempLeft=left;<br>        <span class="hljs-keyword">while</span> (tempLeft&lt;=right)&#123;<br>            arr[tempLeft]=temp[t];<br>            t++;<br>            tempLeft++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>归并排序，可以说是一种分治，先把这个序列拆开，然后一点一点排然后最后合上</p><p>这里的速度来说的话和快速排序是不相上下的</p><h2 id="基数排序（桶排序）"><a href="#基数排序（桶排序）" class="headerlink" title="基数排序（桶排序）"></a>基数排序（桶排序）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RadixSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">800000</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">800000</span>; i++) &#123;<br>            arr[i]=(<span class="hljs-keyword">int</span>)( Math.random()*<span class="hljs-number">800000</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> begin=System.currentTimeMillis();<br>        radixSort(arr);<br><br>        <span class="hljs-keyword">long</span> end=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费了：&quot;</span>+(end-begin));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> max=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i]&gt;max)&#123;<br>                max=arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> maxLength=(max+<span class="hljs-string">&quot;&quot;</span>).length();<br>        <span class="hljs-keyword">int</span>[] bucketElementCounts=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">int</span>[][] bucket=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][arr.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,n=<span class="hljs-number">1</span>;i&lt;maxLength;i++,n*=<span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length;j++)&#123;<br>                <span class="hljs-keyword">int</span> digitOfElement=arr[j]/n%<span class="hljs-number">10</span>;<br>                bucket[digitOfElement][bucketElementCounts[digitOfElement]++]=arr[j];<br>            &#125;<br>            <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">10</span>;k++)&#123;<br>                <span class="hljs-keyword">if</span> (bucketElementCounts[k]!=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;bucketElementCounts[k];j++)<br>                    arr[index++]=bucket[k][j];<br>                &#125;<br>                bucketElementCounts[k]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>相当的快，要想知道这个有几位数，+””.length即可 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210419185958600.png" alt="image-20210419185958600"></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序是利用堆这种数据结构来设计的一种排序算法，堆排序是一种选择排序。 </p><p>堆是具有如下性质的完全二叉树：</p><ul><li>每个结点的值都等于或大于左右子节点就叫做大顶堆</li><li>反之就叫做小顶堆</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
