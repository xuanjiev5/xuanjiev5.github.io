<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>背包模型dp</title>
    <link href="/posts/4049357194.html"/>
    <url>/posts/4049357194.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述四个背包模型和一部分优化方式</p><hr><h1 id="动态规划（1）–背包问题"><a href="#动态规划（1）–背包问题" class="headerlink" title="动态规划（1）–背包问题"></a>动态规划（1）–背包问题</h1><h2 id="背包问题的分类："><a href="#背包问题的分类：" class="headerlink" title="背包问题的分类："></a>背包问题的分类：</h2><ul><li>01背包模型<ul><li>每个物品只有一个</li></ul></li><li>完全背包问题<ul><li>每个物品有无限个</li></ul></li><li>多重背包问题<ul><li>每个物品具有特定数目个</li></ul></li><li>分组背包问题<ul><li>有多个组，每组物品只能拿一个</li></ul></li></ul><p>会发现这类问题代表了我们现实生活中的每个场景</p><hr><h3 id="背包模型"><a href="#背包模型" class="headerlink" title="背包模型"></a>背包模型</h3><blockquote><p>此模型对应现实中的一个真实情景，当你面前摆满了许多物品（物品具有体积和价值）（<strong>每个物品个数会有不同的限定条件</strong>），而此时你的背包容量有限（体积有限），你要怎么拿物品才能使你的背包里拿走的物品价值最大。</p></blockquote><p>可以看出这是一个老生常谈的问题，就是最优方案问题，这时我们会萌生出一个暴力的想法就是枚举每个物品要或者不要，那么就会枚举2的n次方种方案(只看最简单的01背包的时候)，这明显指数级的复杂度是不可取的，这时我们就会用动态规划来解决这个问题</p><p><strong>动态规划就是化零为整，化整为零的过程</strong>（课上会仔细讲这个思想）</p><p>让我们看一看题目吧~</p><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><blockquote><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p><p>第 i 件物品的体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure></blockquote><p><strong>优化前</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, w;<br>        cin &gt;&gt; v &gt;&gt; w;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j - v &gt;= <span class="hljs-number">0</span>) f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i - <span class="hljs-number">1</span>][j - v] + w);<br>            <span class="hljs-keyword">else</span> f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[n][m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>优化后</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> f[N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, w;<br>        cin &gt;&gt; v &gt;&gt; w;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= v; j -- )<br>        &#123;<br>            <br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v] + w);<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>dp的优化就是对原来的代码做等价变换</strong></p><hr><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><h4 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h4><blockquote><p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。</p><p>第 i 种物品的体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</p><p>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000</p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">10<br></code></pre></div></td></tr></table></figure></blockquote><p><strong>优化前</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;v, &amp;w);<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k * v &lt;= j; k ++ )<br>            &#123;<br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - v * k] + w * k);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[n][m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>优化后</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-keyword">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, w;<br>        cin &gt;&gt; v &gt;&gt; w;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v; j &lt;= m; j ++ )<br>            f[j] = <span class="hljs-built_in">max</span>(f[j - v] + w, f[j]);<br>    &#125;<br>    <br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也是找到了性质进行等价变形</p><hr><h3 id="多重背包问题："><a href="#多重背包问题：" class="headerlink" title="多重背包问题："></a>多重背包问题：</h3><h4 id="列题："><a href="#列题：" class="headerlink" title="列题："></a>列题：</h4><blockquote><p>有 N 种物品和一个容量是 V 的背包。</p><p>第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</p><p>接下来有 N 行，每行三个整数 vi,wi,si用空格隔开，分别表示第 ii 种物品的体积、价值和数量。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤100<br>0&lt;vi,wi,si≤100</p><h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">10<br></code></pre></div></td></tr></table></figure></blockquote><p><strong>优化前：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-keyword">int</span> f[N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, w, c;<br>        cin &gt;&gt; v &gt;&gt; w &gt;&gt; c;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= <span class="hljs-number">0</span>; j -- )<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k * v &lt;= j &amp;&amp; k &lt;= c; k ++ )<br>            &#123;<br>                f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - k * v] + w * k);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>优化后</strong>（二进制优化，以后还会有单调队列优化）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span> * <span class="hljs-number">11</span>, M = <span class="hljs-number">2010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-keyword">int</span> f[M];<br><br><span class="hljs-keyword">int</span> w[N], v[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, s;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;<br>        <br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">while</span> (k &lt;= s)<br>        &#123;<br>            cnt ++ ;<br>            v[cnt] = a * k;<br>            w[cnt] = b * k;<br>            <br>            s -= k;<br>            k &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            cnt ++ ;<br>            v[cnt] = a * s;<br>            w[cnt] = b * s;<br>        &#125;<br>    &#125;<br>    <br>    n = cnt;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= v[i]; j -- )<br>        &#123;<br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v[i]] + w[i]);<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>通过一些性质，把多重背包转换成01背包</strong></p><hr><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><h4 id="例题：-2"><a href="#例题：-2" class="headerlink" title="例题："></a>例题：</h4><blockquote><p>有 N 组物品和一个容量是 V 的背包。</p><p>每组物品有若干个，同一组内的物品最多只能选一个。<br>每件物品的体积是 vij，价值是 wij，其中 i 是组号，j 是组内编号。</p><p>求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p><p>输出最大价值。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行有两个整数 N，V用空格隔开，分别表示物品组数和背包容量。</p><p>接下来有 N 组数据：</p><ul><li>每组数据第一行有一个整数 Si，表示第 ii 个物品组的物品数量；</li><li>每组数据接下来有 Si 行，每行有两个整数 vij,wij，用空格隔开，分别表示第 i 个物品组的第 j 个物品的体积和价值；</li></ul><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤100<br>0&lt;Si≤100<br>0&lt;vij,wij≤100</p><h4 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-keyword">int</span> v[N][N], w[N][N];<br><br><span class="hljs-keyword">int</span> f[N], s[N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        cin &gt;&gt; s[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= s[i]; j ++ ) <br>            cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= <span class="hljs-number">0</span>; j -- )<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= s[i]; k ++ )<br>            &#123;<br>                <span class="hljs-keyword">if</span> (v[i][k] &lt;= j) f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="练习题："><a href="#练习题：" class="headerlink" title="练习题："></a>练习题：</h2><h3 id="T1-（NOIP2005普及组）（01背包问题）"><a href="#T1-（NOIP2005普及组）（01背包问题）" class="headerlink" title="T1:（NOIP2005普及组）（01背包问题）"></a>T1:（NOIP2005普及组）（01背包问题）</h3><blockquote><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。</p><p>为此，他想拜附近最有威望的医师为师。</p><p>医师为了判断他的资质，给他出了一个难题。</p><p>医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入文件的第一行有两个整数 T 和 M，用一个空格隔开，T 代表总共能够用来采药的时间，M 代表山洞里的草药的数目。</p><p>接下来的 M 行每行包括两个在 1 到 100 之间（包括 1 和 100）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出文件包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤T≤1000<br>1≤M≤100</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">70 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">71 </span><span class="hljs-number">100</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">int</span> f[N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, w;<br>        cin &gt;&gt; v &gt;&gt; w;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= v; j -- )<br>        &#123;<br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v] + w);<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="T2-（算法竞赛进阶指南）（01背包求具体方案问题）"><a href="#T2-（算法竞赛进阶指南）（01背包求具体方案问题）" class="headerlink" title="T2:（算法竞赛进阶指南）（01背包求具体方案问题）"></a>T2:（算法竞赛进阶指南）（01背包求具体方案问题）</h3><blockquote><p>给定 N 个正整数 A1,A2,…,AN，从中选出若干个数，使它们的和为 M，求有多少种选择方案。</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 N 和 M。</p><p>第二行包含 N 个整数，表示 A1,A2,…,AN</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>包含一个整数，表示可选方案数。</p><h4 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤100<br>1≤M≤10000<br>1≤Ai≤1000<br>答案保证在 int 范围内。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v;<br>        cin &gt;&gt; v;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= v; j -- )<br>            f[j] += f[j - v];<br>    &#125;<br><br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="T3-（信息学奥赛一本通）（完全背包求方案数）"><a href="#T3-（信息学奥赛一本通）（完全背包求方案数）" class="headerlink" title="T3:（信息学奥赛一本通）（完全背包求方案数）"></a>T3:（信息学奥赛一本通）（完全背包求方案数）</h3><blockquote><p>小明手里有n元钱全部用来买书，书的价格为10元，20元，50元，100元。</p><p>问小明有多少种买书方案？（每种书可购买多本）</p><h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个整数 n，代表总共钱数。</p><h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，代表选择方案种数。</p><h4 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a>数据范围</h4><p>0≤n≤1000</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">20<br></code></pre></div></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br></code></pre></div></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">15<br></code></pre></div></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">0<br></code></pre></div></td></tr></table></figure><h4 id="输入样例3："><a href="#输入样例3：" class="headerlink" title="输入样例3："></a>输入样例3：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">0<br></code></pre></div></td></tr></table></figure><h4 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>&#125;;<br><span class="hljs-keyword">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br><br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v[i]; j &lt;= n; j ++ )<br>            f[j] += f[j - v[i]];<br><br>    cout &lt;&lt; f[n] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="T4-（信息学奥赛一本通）（分组背包求具体方案）"><a href="#T4-（信息学奥赛一本通）（分组背包求具体方案）" class="headerlink" title="T4:（信息学奥赛一本通）（分组背包求具体方案）"></a>T4:（信息学奥赛一本通）（分组背包求具体方案）</h3><blockquote><p>总公司拥有M台 <strong>相同</strong> 的高效设备，准备分给下属的N个分公司。</p><p>各分公司若获得这些设备，可以为国家提供一定的盈利。盈利与分配的设备数量有关。</p><p>问：如何分配这M台设备才能使国家得到的盈利最大？</p><p>求出最大盈利值。</p><p>分配原则：每个公司有权获得任意数目的设备，但总台数不超过设备数M。</p><h4 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行有两个数，第一个数是分公司数N，第二个数是设备台数M；</p><p>接下来是一个N*M的矩阵，矩阵中的第 i 行第 j 列的整数表示第 i 个公司分配 j 台机器时的盈利。</p><h4 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h4><p>第一行输出最大盈利值；</p><p>接下N行，每行有2个数，即分公司编号和该分公司获得设备台数。</p><p>答案不唯一，输出任意合法方案即可。</p><h4 id="数据范围-7"><a href="#数据范围-7" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10<br>1≤M≤15</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">30 </span><span class="hljs-number">40</span> <span class="hljs-number">50</span><br><span class="hljs-symbol">20 </span><span class="hljs-number">30</span> <span class="hljs-number">50</span><br><span class="hljs-symbol">20 </span><span class="hljs-number">25</span> <span class="hljs-number">30</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">70</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">11</span>, M = <span class="hljs-number">16</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> w[N][M];<br><span class="hljs-keyword">int</span> f[N][M];<br><span class="hljs-keyword">int</span> way[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>            cin &gt;&gt; w[i][j];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= j; k ++ )<br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - k] + w[i][k]);<br><br>    cout &lt;&lt; f[n][m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">int</span> j = m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; i -- )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= j; k ++ )<br>            <span class="hljs-keyword">if</span> (f[i][j] == f[i - <span class="hljs-number">1</span>][j - k] + w[i][k])<br>            &#123;<br>                way[i] = k;<br>                j -= k;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; way[i] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="T5-（背包九讲）（求具体方案问题）"><a href="#T5-（背包九讲）（求具体方案问题）" class="headerlink" title="T5:（背包九讲）（求具体方案问题）"></a>T5:（背包九讲）（求具体方案问题）</h3><blockquote><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p><p>第 i 件物品的体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</p><p>输出 <strong>字典序最小的方案</strong>。这里的字典序是指：所选物品的编号所构成的序列。物品的编号范围是 1…N</p><h4 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 ii 件物品的体积和价值。</p><h4 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，包含若干个用空格隔开的整数，表示最优解中所选物品的编号序列，且该编号序列的字典序最小。</p><p>物品编号范围是 1…N</p><h4 id="数据范围-8"><a href="#数据范围-8" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000</p><h4 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> v[N], w[N];<br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; v[i] &gt;&gt; w[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i -- )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j ++ )<br>        &#123;<br>            f[i][j] = f[i + <span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">if</span> (j &gt;= v[i]) f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i + <span class="hljs-number">1</span>][j - v[i]] + w[i]);<br>        &#125;<br><br>    <span class="hljs-keyword">int</span> j = m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (j &gt;= v[i] &amp;&amp; f[i][j] == f[i + <span class="hljs-number">1</span>][j - v[i]] + w[i])<br>        &#123;<br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            j -= v[i];<br>        &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="T6-（背包九讲）（有依赖的背包问题）"><a href="#T6-（背包九讲）（有依赖的背包问题）" class="headerlink" title="T6:（背包九讲）（有依赖的背包问题）"></a>T6:（背包九讲）（有依赖的背包问题）</h3><blockquote><p>有 N 个物品和一个容量是 V 的背包。</p><p>物品之间具有依赖关系，且依赖关系组成一棵树的形状。如果选择一个物品，则必须选择它的父节点。</p><p>如下图所示：<br><img src="https://www.acwing.com/media/article/image/2018/10/18/1_bb51ecbcd2-QQ%E5%9B%BE%E7%89%8720181018170337.png" alt="QQ图片20181018170337.png"></p><p>如果选择物品5，则必须选择物品1和2。这是因为2是5的父节点，1是2的父节点。</p><p>每件物品的编号是 ii，体积是 vivi，价值是 wiwi，依赖的父节点编号是 pipi。物品的下标范围是 1…N1…N。</p><p>求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p><p>输出最大价值。</p><h4 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行有两个整数 N，V，用空格隔开，分别表示物品个数和背包容量。</p><p>接下来有 N 行数据，每行数据表示一个物品。<br>第 ii 行有三个整数 vi,wi,pi，用空格隔开，分别表示物品的体积、价值和依赖的物品编号。<br>如果 pi=−1表示根节点。 <strong>数据保证所有物品构成一棵树。</strong></p><h4 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围-9"><a href="#数据范围-9" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N,V≤100<br>1≤vi,wi≤100</p><p>父节点编号范围：</p><ul><li>内部结点：1≤pi≤N</li><li>根节点 pi=−1</li></ul><h4 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">7</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">11<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> v[N], w[N];<br><span class="hljs-keyword">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[u]; ~i; i = ne[i])   <span class="hljs-comment">// 循环物品组</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> son = e[i];<br>        <span class="hljs-built_in">dfs</span>(e[i]);<br><br>        <span class="hljs-comment">// 分组背包</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m - v[u]; j &gt;= <span class="hljs-number">0</span>; j -- )  <span class="hljs-comment">// 循环体积</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= j; k ++ )  <span class="hljs-comment">// 循环决策</span><br>                f[u][j] = <span class="hljs-built_in">max</span>(f[u][j], f[u][j - k] + f[son][k]);<br>    &#125;<br><br>    <span class="hljs-comment">// 将物品u加进去</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m; i &gt;= v[u]; i -- ) f[u][i] = f[u][i - v[u]] + w[u];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v[u]; i ++ ) f[u][i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">int</span> root;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> p;<br>        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; p;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-number">-1</span>) root = i;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">add</span>(p, i);<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(root);<br><br>    cout &lt;&lt; f[root][m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="T7-（背包九讲）-求方案数问题"><a href="#T7-（背包九讲）-求方案数问题" class="headerlink" title="T7:（背包九讲）(求方案数问题)"></a>T7:（背包九讲）(求方案数问题)</h3><blockquote><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p><p>第 i 件物品的体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</p><p>输出 <strong>最优选法的方案数</strong>。注意答案可能很大，请输出答案模 10^9+7 的结果。</p><h4 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。</p><h4 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示 <strong>方案数</strong> 模 10^9+7 的结果。</p><h4 id="数据范围-10"><a href="#数据范围-10" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000</p><h4 id="输入样例-6"><a href="#输入样例-6" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-9"><a href="#输出样例：-9" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> f[N], g[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">-0x3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    g[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, w;<br>        cin &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= v; j -- )<br>        &#123;<br>            <span class="hljs-keyword">int</span> maxv = <span class="hljs-built_in">max</span>(f[j], f[j - v] + w);<br>            <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (f[j] == maxv) s = g[j];<br>            <span class="hljs-keyword">if</span> (f[j - v] + w == maxv) s = (s + g[j - v]) % mod;<br>            f[j] = maxv, g[j] = s;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++ )<br>        <span class="hljs-keyword">if</span> (f[i] &gt; f[res])<br>            res = i;<br><br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i ++ )<br>        <span class="hljs-keyword">if</span> (f[i] == f[res])<br>            sum = (sum + g[i]) % mod;<br><br>    cout &lt;&lt; sum &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="T8-（背包九讲）（混合背包）"><a href="#T8-（背包九讲）（混合背包）" class="headerlink" title="T8:（背包九讲）（混合背包）"></a>T8:（背包九讲）（混合背包）</h3><blockquote><p>有 N 种物品和一个容量是 V 的背包。</p><p>物品一共有三类：</p><ul><li>第一类物品只能用1次（01背包）；</li><li>第二类物品可以用无限次（完全背包）；</li><li>第三类物品最多只能用 si 次（多重背包）；</li></ul><p>每种体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p><h4 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，V用空格隔开，分别表示物品种数和背包容积。</p><p>接下来有 N 行，每行三个整数 vi,wi,si用空格隔开，分别表示第 i 种物品的体积、价值和数量。</p><ul><li>si=−1 表示第 i 种物品只能用1次；</li><li>si=0 表示第 i 种物品可以用无限次；</li><li>si&gt;0 表示第 i 种物品可以使用 si 次；</li></ul><h4 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围-11"><a href="#数据范围-11" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000<br>−1≤si≤1000</p><h4 id="输入样例-7"><a href="#输入样例-7" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-10"><a href="#输出样例：-10" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, w, s;<br>        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;<br>        <span class="hljs-keyword">if</span> (!s)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v; j &lt;= m; j ++ )<br>                f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v] + w);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (s == <span class="hljs-number">-1</span>) s = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= s; k *= <span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= k * v; j -- )<br>                    f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - k * v] + k * w);<br>                s -= k;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= s * v; j -- )<br>                    f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - s * v] + s * w);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="T9-（背包九讲）-二维费用背包问题"><a href="#T9-（背包九讲）-二维费用背包问题" class="headerlink" title="T9:（背包九讲）(二维费用背包问题)"></a>T9:（背包九讲）(二维费用背包问题)</h3><blockquote><p>有 NN 件物品和一个容量是 VV 的背包，背包能承受的最大重量是 MM。</p><p>每件物品只能用一次。体积是 vivi，重量是 mimi，价值是 wiwi。</p><p>求解将哪些物品装入背包，可使物品总体积不超过背包容量，总重量不超过背包可承受的最大重量，且价值总和最大。<br>输出最大价值。</p><h4 id="输入格式-12"><a href="#输入格式-12" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行三个整数，N,V,MN,V,M，用空格隔开，分别表示物品件数、背包容积和背包可承受的最大重量。</p><p>接下来有 NN 行，每行三个整数 vi,mi,wivi,mi,wi，用空格隔开，分别表示第 ii 件物品的体积、重量和价值。</p><h4 id="输出格式-12"><a href="#输出格式-12" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围-12"><a href="#数据范围-12" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N≤1000<br>0&lt;V,M≤100<br>0&lt;vi,mi≤100<br>0&lt;wi≤1000</p><h4 id="输入样例-8"><a href="#输入样例-8" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-11"><a href="#输出样例：-11" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-keyword">int</span> n, V, M;<br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; V &gt;&gt; M;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, m, w;<br>        cin &gt;&gt; v &gt;&gt; m &gt;&gt; w;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = V; j &gt;= v; j -- )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = M; k &gt;= m; k -- )<br>                f[j][k] = <span class="hljs-built_in">max</span>(f[j][k], f[j - v][k - m] + w);<br>    &#125;<br><br>    cout &lt;&lt; f[V][M] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="T10-（NOIP2006提高组）（有依赖的背包问题）"><a href="#T10-（NOIP2006提高组）（有依赖的背包问题）" class="headerlink" title="T10:（NOIP2006提高组）（有依赖的背包问题）"></a>T10:（NOIP2006提高组）（有依赖的背包问题）</h3><blockquote><p>金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专用的很宽敞的房间。</p><p>更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。</p><p>今天一早，金明就开始做预算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子：</p><p><img src="https://www.acwing.com/media/article/image/2019/03/13/19_45c6dcea44-QQ%E6%88%AA%E5%9B%BE20190313024710.png" alt="QQ截图20190313024710.png"></p><p>如果要买归类为附件的物品，必须先买该附件所属的主件。</p><p>每个主件可以有0个、1个或2个附件。</p><p>附件不再有从属于自己的附件。</p><p>金明想买的东西很多，肯定会超过妈妈限定的N元。</p><p>于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。</p><p>他还从因特网上查到了每件物品的价格（都是10元的整数倍）。</p><p>他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。</p><p>设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，…，jk，则所求的总和为：</p><p>v[j1]∗w[j1]+v[j2]∗w[j2]+…+v[jk]∗w[jk]（其中*为乘号）</p><p>请你帮助金明设计一个满足要求的购物单。</p><h4 id="输入格式-13"><a href="#输入格式-13" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入文件的第1行，为两个正整数，用一个空格隔开：N m，其中N表示总钱数，m为希望购买物品的个数。</p><p>从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数v p q，其中v表示该物品的价格，p表示该物品的重要度（1~5），q表示该物品是主件还是附件。</p><p>如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号。</p><h4 id="输出格式-13"><a href="#输出格式-13" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出文件只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</p><h4 id="数据范围-13"><a href="#数据范围-13" class="headerlink" title="数据范围"></a>数据范围</h4><p>N&lt;32000,m&lt;60,v&lt;10000</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1000 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">800 </span><span class="hljs-number">2</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">400 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">300 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">400 </span><span class="hljs-number">3</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">500 </span><span class="hljs-number">2</span> <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-12"><a href="#输出样例：-12" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-number">2200</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> v first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> w second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">60</span>, M = <span class="hljs-number">32010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br>PII master[N];<br>vector&lt;PII&gt; servent[N];<br><span class="hljs-keyword">int</span> f[M];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v, p, q;<br>        cin &gt;&gt; v &gt;&gt; p &gt;&gt; q;<br>        p *= v;<br>        <span class="hljs-keyword">if</span> (!q) master[i] = &#123;v, p&#125;;<br>        <span class="hljs-keyword">else</span> servent[q].<span class="hljs-built_in">push_back</span>(&#123;v, p&#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = m; u &gt;= <span class="hljs-number">0</span>; u -- )<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1</span> &lt;&lt; servent[i].<span class="hljs-built_in">size</span>(); j ++ )<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = master[i].v, w = master[i].w;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; servent[i].<span class="hljs-built_in">size</span>(); k ++ )<br>                    <span class="hljs-keyword">if</span> (j &gt;&gt; k &amp; <span class="hljs-number">1</span>)<br>                    &#123;<br>                        v += servent[i][k].v;<br>                        w += servent[i][k].w;<br>                    &#125;<br>                <span class="hljs-keyword">if</span> (u &gt;= v) f[u] = <span class="hljs-built_in">max</span>(f[u], f[u - v] + w);<br>            &#125;<br>    &#125;<br><br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人总结_2021</title>
    <link href="/posts/2988935733.html"/>
    <url>/posts/2988935733.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章会回忆一下这一年的光阴，一起共勉~</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">真的还蛮快的，没想到这么快一年就过去了。<br>最开始从半年的java开发学习，再到后期搞acm等算法竞赛也已经又是半年的光景了。<br>这一路的属实蛮累的，那就让这份累感，通过这篇总结留在今年<br>明年要更拼一些，一定要夺金呀~<br><br>个人比较菜，大佬们凑活着看呀~<br></code></pre></div></td></tr></table></figure><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我~"></a>关于我~</h2><p><strong>姓名</strong>🧑：金铉杰</p><p><strong>昵称</strong>🐱‍🚀：jxj777</p><p><strong>学校</strong>🦺：沈阳理工大学</p><p><strong>队伍</strong>🎨：(原来的队伍刚解散，具体名字还没定)（一队，主代码手）</p><p><strong>队内职务</strong>🧨：队长，主代码手</p><hr><h3 id="比赛经历：（2021这一年：大一下-大二上，轻喷）"><a href="#比赛经历：（2021这一年：大一下-大二上，轻喷）" class="headerlink" title="比赛经历：（2021这一年：大一下-大二上，轻喷）"></a>比赛经历：（2021这一年：大一下-大二上，<del>轻喷</del>）</h3><table><thead><tr><th>时间</th><th>比赛</th><th>获奖情况</th></tr></thead><tbody><tr><td>2021年4月（大一下）（从此接触算法竞赛）</td><td>蓝桥杯javab组</td><td>省二等</td></tr><tr><td>2021年8月（大一下的假期）</td><td>ccpc华为云挑战赛</td><td>铁</td></tr><tr><td>2021年9月（大一下假期）</td><td>移动应用大赛</td><td>省三等</td></tr><tr><td>2021年10月（大二上）</td><td>辽宁省赛</td><td>银</td></tr><tr><td>2021年11月（大二上）</td><td>辽宁省计算机博弈大赛</td><td>省二等</td></tr><tr><td>2021年12月（大二上）</td><td>传智杯初赛b组</td><td>国二等</td></tr></tbody></table><h4 id="各个网站的rating：（分太低了呜呜呜，大佬们凑活着看，轻喷）"><a href="#各个网站的rating：（分太低了呜呜呜，大佬们凑活着看，轻喷）" class="headerlink" title="各个网站的rating：（分太低了呜呜呜，大佬们凑活着看，轻喷）"></a>各个网站的rating：（分太低了呜呜呜，<del>大佬们凑活着看，轻喷</del>）</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20211228175327996.png" alt="image-20211228175327996"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20211228175605228.png" alt="image-20211228175605228"></p><p><strong>cf几乎没打过就不贴出来了</strong></p><h3 id="个人的成长经历"><a href="#个人的成长经历" class="headerlink" title="个人的成长经历"></a>个人的成长经历</h3><ul><li>我呢，是从2020年10月份那阵加入琴理工作室，成为了运维组的实习成员，真真正正的开始了计算机技术方面的学习。</li><li>原来我是真的小白，的确是从进入琴理工作室开始进行学习到现在一路成长，还算是蛮累的吧，也见到了很多大佬，也得到了很多学长和老师们的帮助。</li><li>后期呢，各方面有了一些基础后，开始有了自己的 想法，开始转去做java开发，因为当时觉得后端更适合我一些，就这样学习了java的很多技术栈。</li><li>后来因为一次比赛也就是蓝桥杯之后（5月份开始），正式开始学习算法，一直到现在，之后也一定会一直学习下去。</li></ul><hr><h2 id="正在备战的比赛"><a href="#正在备战的比赛" class="headerlink" title="正在备战的比赛~"></a>正在备战的比赛~</h2><table><thead><tr><th>时间</th><th>比赛</th><th>预计获奖😀</th></tr></thead><tbody><tr><td>2022年3月（大二下）</td><td>传智杯全国决赛</td><td>国一</td></tr><tr><td>2022年4月（大二下）</td><td>蓝桥杯</td><td>国一</td></tr><tr><td>2022年4月（大二下）</td><td>ICPC昆明</td><td>铜</td></tr><tr><td>2022年4月（大二下）</td><td>CCCC天梯赛</td><td>一等</td></tr><tr><td>2022年8月（大三上）</td><td>icpc/ccpc/辽宁省赛等许多区域赛</td><td>求求至少拿一个金吧~~</td></tr><tr><td>2022年8月—-</td><td>ccpc和icpc的final？（希望可以去）</td><td>final能去就知足了~</td></tr></tbody></table><p>等明年更新一下，真正获了啥奖吧，估计应该差不了多少吧hh~。</p><p>我自己也明白和那些初高中就搞oi的能力差一大截，当然我也相信努力的力量。</p><p>Acmer奋斗那么多，等的就是大三上的那几次icpc和ccpc区域赛，希望我的acm生涯可以包揽金银铜😁😁😁，也就没啥遗憾了。</p><p>希望自己是一名真正的Acmer。也希望我的成绩能跟我的努力成正比吧~</p><hr><h2 id="之后的打算"><a href="#之后的打算" class="headerlink" title="之后的打算"></a>之后的打算</h2><p>希望通过我自己的努力和成绩真正的建立我们学校的acm集训队并传承下去吧~</p><p>希望拿个金~</p><p>也像我关于页面说的那样，<strong>爱我所爱，行我所行，听从我心，无问西东</strong>。</p><h2 id="接下来我想感谢以下知遇之人"><a href="#接下来我想感谢以下知遇之人" class="headerlink" title="接下来我想感谢以下知遇之人:"></a>接下来我想感谢以下知遇之人:</h2><figure class="highlight erlang-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang-repl">感谢冯老师，冯老师真的用心的去帮我做这件事，从申请名额这些东西上给了我真的很多帮助，谢谢老师的支持和信任~<br><br>感谢之前工作室的学长们和小孟（叫小孟是不是不太好~），在我最开始学习计算机的时候给予了我真的很大帮助，感谢你们~真的非常感谢！<br><br>非常感谢我的父母，感谢父母的资金上和思想上的支持和鼓励,希望以努力更好回报你们!<br><br>感谢我的室友和某些同级同学一直支持我~，我也会尽力提升自己的算法水平，帮助更多的人！！！<br><br>没有你们可能就没有今天的我，我会常怀赤子之心，不坠青云之志，一路跑下去。感谢你们~<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>每年总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三届传智杯初赛a组最后一题</title>
    <link href="/posts/1787367769.html"/>
    <url>/posts/1787367769.html</url>
    
    <content type="html"><![CDATA[<p>这道题是传智杯2021年a组的压轴题，总的来说并不难，也并不是那场比赛的防ak题</p><span id="more"></span><blockquote><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>YYH Land（Yoauld, Youthful &amp; Happy Land）是位于炽蓝仙野的一片神奇的国度，那里的人们过着无拘无束的的快乐生活。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>清蒸鱼是一个尽职尽责的 YYH Land 护林者。他负责每天维护 YYH Land 的森林。在最开始的时候，YYH Land 只有一棵具有 n<em>n</em> 个节点的树，每个节点有一个灵力值 v<em>v</em>。</p><p>由于 YYH Land 是一片神奇的国度，YYH Land 的树也有一些神奇的能力，具体来说它满足如下操作：</p><ul><li><code>1 e</code><br>编号为 <em>e</em> 的边突然消失，使得它所在的那棵树变成了两棵树。</li><li><code>2 u val</code><br>编号为 u* 的节点的灵力值变成了 v<strong>a</strong>l。</li><li><code>3 u</code><br>清蒸鱼进行了一次查询，查询 u* 所在的那棵树的灵力值之和。</li></ul><p>现在你需要帮助清蒸鱼，来模拟上述事件，以了解森林的变迁。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行为 n, m，如上所述。<br>第二行有 n 个数，为 n 个结点的初始权值，在 10^3 以内。<br>下面 n-1 行，每行一组 u*,*v，表示一条边。（保证初始为一棵树）<br>下面 m 行有 m 个操作：<br>先读入一个opt，表示操作类型。<br>opt=1 时，读入 e，表示删掉读入的第 e 条边。（保证第 e 条边存在）<br>opt=2 时，读入 u,val表示把结点 u 的权值改成 val（val≤1000）。<br>opt=3 时，读入 <em>u</em>，表示查询 u 所在的那棵树的结点权值和。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每个查询操作，输出一行一个数表示答案。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p><strong>输入 #1</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">2 3</span><br>1 1<br>1 2<br>2 2 4<br>1 1<br>3 2<br></code></pre></div></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">4</span><br></code></pre></div></td></tr></table></figure></blockquote><p>这道题就是看着就像是一个并查集，但是你没办法去删边和修改，这应该是比较头疼的地方。</p><p>所以我们会使用时光回溯的方式，把删边当作加边来进行处理，就会变得比较简单</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-keyword">int</span> p[N], a[N], sum[N];<br><br><span class="hljs-keyword">int</span> stk[N], top;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> a, b;<br><span class="hljs-keyword">bool</span> flag;<br>&#125;e[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Opt</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> op, x, y;<br>&#125;op[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br><span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>p[i] = i;<br>sum[i] = a[i];<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i ++ )<br>&#123;<br><span class="hljs-keyword">int</span> a, b;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br><br>e[i] = &#123;a, b, <span class="hljs-literal">false</span>&#125;;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++ )<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;op[i].op, &amp;op[i].x);<br><br><span class="hljs-keyword">if</span> (op[i].op == <span class="hljs-number">1</span>)<br>&#123;<br>e[op[i].x].flag = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[i].op == <span class="hljs-number">2</span>)<br>&#123;<br>op[i].y = a[op[i].x];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[op[i].x]);<br>sum[op[i].x] = a[op[i].x]; <br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i ++ )<br>&#123;<br><span class="hljs-keyword">if</span> (!e[i].flag)<br>&#123;<br><span class="hljs-keyword">int</span> pa = <span class="hljs-built_in">find</span>(e[i].a);<br><span class="hljs-keyword">int</span> pb = <span class="hljs-built_in">find</span>(e[i].b);<br><span class="hljs-keyword">if</span> (pa != pb)<br>&#123;<br>sum[pb] += sum[pa];<br>p[pa] = pb;<br>&#125;<br>&#125;<br>&#125;<br><br>    <span class="hljs-comment">//时光回溯处理操作</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m; i &gt;= <span class="hljs-number">1</span>; i -- )<br>&#123;<br><span class="hljs-keyword">auto</span> z = op[i];<br><br><span class="hljs-keyword">if</span> (z.op == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">int</span> pa = <span class="hljs-built_in">find</span>(e[z.x].a);<br><span class="hljs-keyword">int</span> pb = <span class="hljs-built_in">find</span>(e[z.x].b);<br><br><span class="hljs-keyword">if</span> (pa != pb)<br>&#123;<br>sum[pb] += sum[pa];<br>p[pa] = pb;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (z.op == <span class="hljs-number">2</span>)<span class="hljs-comment">//更新成原来的样子</span><br>&#123;<br><span class="hljs-keyword">int</span> px = <span class="hljs-built_in">find</span>(z.x);<br>sum[px] += z.y - a[z.x];<br>a[z.x] = z.y;<br>&#125;<br><span class="hljs-keyword">else</span>  <span class="hljs-comment">//答案是反着的，所以利用栈来存储</span><br>&#123;<br>stk[ ++ top] = sum[<span class="hljs-built_in">find</span>(z.x)];<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (top)<br>&#123;<br>cout &lt;&lt; stk[top -- ] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>还是挺有启发性的一道题😁😁😁</p>]]></content>
    
    
    <categories>
      
      <category>比赛题</category>
      
      <category>补题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并查集</tag>
      
      <tag>时间回溯</tag>
      
      <tag>连通块问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博弈论</title>
    <link href="/posts/314364526.html"/>
    <url>/posts/314364526.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述博弈论的几个基本知识</p><span id="more"></span><h1 id="数学（4）"><a href="#数学（4）" class="headerlink" title="数学（4）"></a>数学（4）</h1><h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><h3 id="nim游戏（公平组合游戏ICG）："><a href="#nim游戏（公平组合游戏ICG）：" class="headerlink" title="nim游戏（公平组合游戏ICG）："></a>nim游戏（公平组合游戏ICG）：</h3><blockquote><p>啥是公平组合游戏呢？</p></blockquote><p><strong>由两名玩家轮流交替行动，不能行动的判负，nim游戏就是公平组合游戏的一种</strong></p><p><strong>看看nim游戏的例题把~</strong></p><hr><blockquote><p>给定 n 堆石子，两位玩家轮流操作，每次操作可以从任意一堆石子中拿走任意数量的石子（可以拿完，但不能不拿），最后无法进行操作的人视为失败。</p><p>问如果两人都采用最优策略，先手是否必胜。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>第二行包含 n 个数字，其中第 i 个数字表示第 i 堆石子的数量。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果先手方必胜，则输出 <code>Yes</code>。</p><p>否则，输出 <code>No</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^5<br>1≤每堆石子数≤10^9</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        res ^= x;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (res) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="台阶-nim游戏"><a href="#台阶-nim游戏" class="headerlink" title="台阶-nim游戏"></a>台阶-nim游戏</h3><blockquote><p>现在，有一个 n 级台阶的楼梯，每级台阶上都有若干个石子，其中第 ii 级台阶上有 ai 个石子(i≥1)。</p><p>两位玩家轮流操作，每次操作可以从任意一级台阶上拿若干个石子放到下一级台阶中（不能不拿）。</p><p>已经拿到地面上的石子不能再拿，最后无法进行操作的人视为失败。</p><p>问如果两人都采用最优策略，先手是否必胜。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>第二行包含 n 个整数，其中第 i 个整数表示第 i 级台阶上的石子数 ai。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果先手方必胜，则输出 <code>Yes</code>。</p><p>否则，输出 <code>No</code>。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^5<br>1≤ai≤10^9</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v;<br>        cin &gt;&gt; v;<br>        <br>        <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>) res ^= v;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (res) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="集合-nim游戏"><a href="#集合-nim游戏" class="headerlink" title="集合-nim游戏"></a>集合-nim游戏</h3><p><strong>要清楚mex运算和sg函数</strong></p><blockquote><p>给定 n 堆石子以及一个由 k 个不同正整数构成的数字集合 S。</p><p>现在有两位玩家轮流操作，每次操作可以从任意一堆石子中拿取石子，每次拿取的石子数量必须包含于集合 S，最后无法进行操作的人视为失败。</p><p>问如果两人都采用最优策略，先手是否必胜。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 k，表示数字集合 SS 中数字的个数。</p><p>第二行包含 k 个整数，其中第 i 个整数表示数字集合 S 中的第 i 个数 si。</p><p>第三行包含整数 n。</p><p>第四行包含 n 个整数，其中第 i 个整数表示第 i 堆石子的数量 hi。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果先手方必胜，则输出 <code>Yes</code>。</p><p>否则，输出 <code>No</code>。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,k≤100<br>1≤si,hi≤10000</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>, M = <span class="hljs-number">10010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> s[N], f[M];<br><span class="hljs-keyword">int</span> res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (~f[x]) <span class="hljs-keyword">return</span> f[x];<br>    <br>    unordered_set&lt;<span class="hljs-keyword">int</span>&gt; S;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> sum = s[i];<br>        <br>        <span class="hljs-keyword">if</span> (x &gt;= sum) S.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">sg</span>(x - sum));<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">count</span>(i))<br>            <span class="hljs-keyword">return</span> f[x] = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ ) cin &gt;&gt; s[i];<br>    <br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-built_in">memset</span> (f, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> f);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v;<br>        cin &gt;&gt; v;<br>        <br>        res ^= <span class="hljs-built_in">sg</span>(v);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (res) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><hr><p>至此寒假前的集训就结束了，容我先介绍寒假集训内容</p><hr><ul><li><p>动态规划（DP）Dynamic Programming</p><ul><li>背包问题<ul><li>01背包问题</li><li>完全背包问题</li><li>分组背包问题</li><li>多重背包问题</li><li>及其背包问题的优化</li></ul></li><li>线性dp<ul><li>数字三角形模型</li><li>最长上升子序列（不下降）</li></ul></li><li>状态机模型</li><li>区间dp</li><li>树形dp</li><li>数位dp</li><li>单调队列优化</li><li>斜率优化</li></ul></li><li><p>贪心</p><ul><li><p>区间问题</p><ul><li>最小点覆盖，最大不相交区间数量</li></ul></li><li><p>huffman树</p></li><li><p>排序不等式</p></li><li><p>绝对值不等式</p></li><li><p>推公式</p></li></ul></li><li><p>搜索</p><ul><li><p>广搜</p><ul><li>flood fill模型</li><li>最短路模型</li><li>最小步数模型</li><li>双向广搜</li><li>多源广搜</li><li>双端队列广搜</li><li>A*算法</li></ul></li><li><p>深搜</p><ul><li>连通性问题</li><li>搜索顺序</li><li>剪枝</li><li>迭代加深</li><li>双向深搜</li><li>IDA*算法</li></ul></li></ul></li><li><p>图论</p><ul><li><p>最小生成树及其扩展应用</p></li><li><p>最短路及其扩展应用</p></li><li><p>floyd的其他用法</p></li><li><p>负环</p></li><li><p>差分约束</p></li><li><p>最近公共祖先（LCA）</p></li><li><p>tarjan算法</p><ul><li>强连通和双连通分量</li></ul></li><li><p>欧拉回路和路径</p></li><li><p>拓扑排序等</p><ul><li>关键路径</li></ul></li></ul></li><li><p>数据结构</p><ul><li><p>并查集应用</p></li><li><p>树状数组</p></li><li><p>线段树</p></li><li><p>可持久化数据结构</p><ul><li>主席树</li><li>可持久化字典树</li></ul></li><li><p>平衡树</p><ul><li>treap</li><li>红黑树</li><li>avl</li></ul></li><li><p>AC自动机</p></li></ul></li><li><p>数学（在之前讲过的基础上）</p><ul><li>高斯消元</li><li>概率与数学期望</li><li>矩阵乘法</li></ul></li><li><p>其他</p><ul><li>manacher算法</li><li>RMQ算法</li><li>启发式合并</li><li>模拟退火，爬山法</li><li>python基础语法入门，为了写算法题里的高精度~</li></ul></li></ul><hr><p>我也明白这段时间以来大家很累了，希望大家期末考试成绩都可以很不错，寒假集训见咯😉😉😉</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合数学</title>
    <link href="/posts/2146983971.html"/>
    <url>/posts/2146983971.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述求组合数的几种方法</p><span id="more"></span><h1 id="数学（3）"><a href="#数学（3）" class="headerlink" title="数学（3）"></a>数学（3）</h1><h2 id="求组合数"><a href="#求组合数" class="headerlink" title="求组合数"></a>求组合数</h2><p><strong>此次课为组合数学的基础课，只讲授求组合数的几种方式，其他组合数学的内容会放在寒假集训</strong> </p><p>求组合数有很多种方式，我们需要通过数据范围来选出适合的方式。</p><hr><h3 id="第一种（递推式预处理）"><a href="#第一种（递推式预处理）" class="headerlink" title="第一种（递推式预处理）"></a>第一种（递推式预处理）</h3><blockquote><p>给定 n 组询问，每组询问给定两个整数 a，b请你输出 C a b mod(10^9+7) 的值。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一组 a 和 b。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 n 行，每行输出一个询问的解。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10000<br>1≤b≤a≤2000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>10<br>1<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> c[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!j) c[i][j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> c[i][j] = (c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + c[i - <span class="hljs-number">1</span>][j]) % MOD;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <br>        cout &lt;&lt; c[a][b] &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="第二种（乘法逆元前缀乘预处理）"><a href="#第二种（乘法逆元前缀乘预处理）" class="headerlink" title="第二种（乘法逆元前缀乘预处理）"></a>第二种（乘法逆元前缀乘预处理）</h3><blockquote><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10000<br>1≤b≤a≤10^5</p></blockquote><p><strong>这时你就会发现，这个数据范围，如果使用初始化就会爆出1秒，所以我们要想一个别的方法了</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> fact[N], infact[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span> % p;<br>    <br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i ++ )<br>    &#123;<br>        fact[i] = (LL)fact[i - <span class="hljs-number">1</span>] * i % MOD;<br>        infact[i] = (LL)infact[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qmi</span>(i, MOD - <span class="hljs-number">2</span>, MOD) % MOD;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-built_in">init</span>();<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <br>        cout &lt;&lt; ((LL)fact[a] * infact[b] % MOD * infact[a - b] % MOD) &lt;&lt; endl; <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="第三种（lucas定理）"><a href="#第三种（lucas定理）" class="headerlink" title="第三种（lucas定理）"></a>第三种（lucas定理）</h3><blockquote><p>给定 n 组询问，每组询问给定三个整数 a,b,p，其中 pp 是质数，请你输出 C b a mod p 的值。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一组 a,b,p</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 n 行，每行输出一个询问的解。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤20<br>1≤b≤a≤10^18<br>1≤p≤10^5</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">3</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">4</span> <span class="hljs-number">13</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>3<br>2<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (b &gt; a) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = a; i &lt;= b; i ++, j -- )<br>    &#123;<br>        res = (LL)res * j % p;<br>        res = (LL)res * <span class="hljs-built_in">qmi</span>(i, p - <span class="hljs-number">2</span>, p) % p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lucas</span><span class="hljs-params">(LL a, LL b, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a, b, p);<br>    <span class="hljs-keyword">return</span> (LL)<span class="hljs-built_in">C</span>(a % p, b % p, p) * <span class="hljs-built_in">lucas</span>(a / p, b / p, p) % p;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        LL a, b;<br>        <span class="hljs-keyword">int</span> p;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;<br>        cout &lt;&lt; <span class="hljs-built_in">lucas</span>(a, b, p) &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="第四种-对阶乘分解质因数-高精度"><a href="#第四种-对阶乘分解质因数-高精度" class="headerlink" title="第四种(对阶乘分解质因数 + 高精度)"></a>第四种(对阶乘分解质因数 + 高精度)</h3><blockquote><p>输入 a,b，求 Cba 的值。</p><p>注意结果可能很大，需要使用高精度计算。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含两个整数 a 和 b。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，输出 C b a 的值。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤b≤a≤5000</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">10<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5010</span>;<br><br><span class="hljs-keyword">int</span> primes[N], cnt;<br><span class="hljs-keyword">int</span> sum[N];<br><span class="hljs-keyword">bool</span> st[N];<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        res += n / p;<br>        n /= p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; c;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += a[i] * b;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (t)<br>    &#123;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br><br>    <span class="hljs-built_in">get_primes</span>(a);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> p = primes[i];<br>        sum[i] = <span class="hljs-built_in">get</span>(a, p) - <span class="hljs-built_in">get</span>(a - b, p) - <span class="hljs-built_in">get</span>(b, p);<br>    &#125;<br><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; sum[i]; j ++ )<br>            res = <span class="hljs-built_in">mul</span>(res, primes[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = res.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, res[i]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h2><p><strong>利用例题来解释什么是卡特兰数，作为卡特兰数，这个世界上很多方案数都是卡特兰数，拥有和斐波那契数一样的地位</strong></p><blockquote><p>给定 n 个 0 和 n 个 1，它们将按照某种顺序排成长度为 2n 的序列，求它们能排列成的所有序列中，能够满足任意前缀序列中 0 的个数都不少于 1 的个数的序列有多少个。</p><p>输出的答案对 10^9+7 取模。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含整数 n。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示答案。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^5</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">5<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span> % p;<br>    <br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = (LL) res * a % p;<br>        a = (LL)a * a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">int</span> a = n * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> b = n;<br>    <br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = a; i &gt; b; i -- ) res = (LL)res * i % mod;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) res = (LL)res * <span class="hljs-built_in">qmi</span>(i, mod - <span class="hljs-number">2</span>, mod) % mod;<br>    <br>    res = (LL)res * <span class="hljs-built_in">qmi</span>(n + <span class="hljs-number">1</span>, mod - <span class="hljs-number">2</span>, mod) % mod;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p><strong>基础组合数学就这样结束了，下节课会讲述博弈论的几个东西~</strong></p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国剩余定理，扩展欧几里得，容斥原理</title>
    <link href="/posts/1265928899.html"/>
    <url>/posts/1265928899.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述中国剩余定理，扩展欧几里得，容斥原理</p><span id="more"></span><h1 id="数学（2）"><a href="#数学（2）" class="headerlink" title="数学（2）"></a>数学（2）</h1><h2 id="扩展欧几里得："><a href="#扩展欧几里得：" class="headerlink" title="扩展欧几里得："></a>扩展欧几里得：</h2><p><strong>如果想要讲清楚什么是扩展欧几里得算法，那一定要知道的一点就是裴蜀定理</strong></p><p><strong>裴蜀定理: 对任何整数a、b，存在整数x、y，使得ax + by = (a, b)</strong></p><p><strong>而扩展欧几里得就是求出这个裴蜀定理解的一个算法</strong></p><blockquote><p>给定 n 对正整数 ai,bi，对于每对数，求出一组 xi,yi使其满足 ai×xi+bi×yi=gcd(ai,bi)</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含两个整数 ai,bi</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共 n 行，对于每组 ai,bi，求出一组满足条件的 xi,yi，每组结果占一行。</p><p>本题答案不唯一，输出任意满足条件的 xi,yi 均可。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^5<br>1≤ai,bi≤2×10^9</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">18</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-1 1</span><br><span class="hljs-deletion">-2 1</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>)<br>    &#123;<br>        x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> d = <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>    y -= a / b * x;<br>    <br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">int</span> x, y;<br>        <br>        <span class="hljs-built_in">exgcd</span>(a, b, x, y);<br>        <br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="线性同余方程"><a href="#线性同余方程" class="headerlink" title="线性同余方程"></a>线性同余方程</h3><blockquote><p>给定 nn 组数据 ai,bi,mi对于每组数求出一个 xixi，使其满足 ai×xi≡bi(modmi) 如果无解则输出 <code>impossible</code>。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一组数据 ai,bi,mi</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共 n 行，每组数据输出一个整数表示一个满足条件的 xi，如果无解则输出 <code>impossible</code>。</p><p>每组数据结果占一行，结果可能不唯一，输出任意一个满足条件的结果均可。</p><p>输出答案必须在 int 范围之内。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^5<br>1≤ai,bi,mi≤2×10^9</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">impossible<br><span class="hljs-deletion">-3</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b)<br>    &#123;<br>        x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>    y -= a / b * x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, m;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;m);<br><br>        <span class="hljs-keyword">int</span> x, y;<br>        <span class="hljs-keyword">int</span> d = <span class="hljs-built_in">exgcd</span>(a, m, x, y);<br>        <span class="hljs-keyword">if</span> (b % d) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (LL)b / d * x % m);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><p><strong>问题：今有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？</strong></p><p>大概就是在说这么一个事情，特别像以前我们学习的小学数奥问题。</p><blockquote><p>自从曹冲搞定了大象以后，曹操就开始琢磨让儿子干些事业，于是派他到中原养猪场养猪，可是曹冲很不高兴，于是在工作中马马虎虎，有一次曹操想知道母猪的数量，于是曹冲想狠狠耍曹操一把。</p><p>举个例子，假如有 16 头母猪，如果建了 3 个猪圈，剩下 1 头猪就没有地方安家了；如果建造了 5 个猪圈，但是仍然有 1 头猪没有地方去；如果建造了 7 个猪圈，还有 2 头没有地方去。</p><p>你作为曹总的私人秘书理所当然要将准确的猪数报给曹总，你该怎么办？</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数 n，表示建立猪圈的次数；</p><p>接下来 n 行，每行两个整数 ai,bi，表示建立了 ai 个猪圈，有 bi 头猪没有去处。</p><p>你可以假定 ai,aj 互质。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出仅包含一个正整数，即为曹冲至少养猪的数目。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10<br>1≤bi≤ai≤100000<br>所有ai的乘积不超过 10^18</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">16<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> A[N], B[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(LL a, LL b, LL &amp;x, LL &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b) x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>        y -= a / b * x;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    LL M = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;A[i], &amp;B[i]);<br>        M *= A[i];<br>    &#125;<br><br>    LL res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        LL Mi = M / A[i];<br>        LL ti, x;<br>        <span class="hljs-built_in">exgcd</span>(Mi, A[i], ti, x);<br>        res += B[i] * Mi * ti;<br>    &#125;<br><br>    cout &lt;&lt; (res % M + M) % M &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h2><blockquote><p>给定一个整数 n 和 m 个不同的质数 p1,p2,…,pm。</p><p>请你求出 1∼n 中能被 p1,p2,…,pm 中的至少一个数整除的整数有多少个。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n 和 m。</p><p>第二行包含 m 个质数。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示满足条件的整数的个数。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤m≤16<br>1≤n,pi≤10^9</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">7<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-keyword">int</span> n, m;<br>LL res;    <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ ) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; m; i ++ ) <br>    &#123;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>, cnt = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;&gt; j &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((LL)t * q[j] &lt;= n)<br>                &#123;<br>                    t *= q[j];<br>                    cnt ++ ;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <br>                &#123;<br>                    t = <span class="hljs-number">-1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>                <br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cnt % <span class="hljs-number">2</span>)<br>            &#123;<br>                res += n / t;<br>            &#125;<br>            <span class="hljs-keyword">else</span> res -= n / t;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>数论到这里就结束了，之后开启组合数学章节了</p><hr>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>质数，约数，欧拉函数，快速幂及其定理</title>
    <link href="/posts/944140020.html"/>
    <url>/posts/944140020.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述质数的判断，分解质因数，筛质数的三种方法，求约数，约数和定理，约数个数定理，欧几里得算法，欧拉函数的求法，筛法筛出欧拉函数，快速幂及其求逆元的方式，那么必须要有欧拉定理和费马小定理</p><span id="more"></span><h1 id="数学（1）"><a href="#数学（1）" class="headerlink" title="数学（1）"></a>数学（1）</h1><h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><h4 id="试除法判定质数"><a href="#试除法判定质数" class="headerlink" title="试除法判定质数"></a>试除法判定质数</h4><p>之前有讲过，利用o（根号n）的方法来判定是不是质数</p><blockquote><p>给定 n 个正整数 ai，判定每个数是否是质数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一个正整数 ai。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 n 行，其中第 i 行输出第 i 个正整数 ai 是否为质数，是则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100<br>1≤ai≤2^31−1</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br>2<br>6<br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-keyword">Yes</span><br><span class="hljs-keyword">No</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        cin &gt;&gt; n;<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_prime</span>(n)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="试除法分解质因数o（根号n）"><a href="#试除法分解质因数o（根号n）" class="headerlink" title="试除法分解质因数o（根号n）"></a>试除法分解质因数o（根号n）</h3><blockquote><p>给定 n 个正整数 ai，将每个数分解质因数，并按照质因数从小到大的顺序输出每个质因数的底数和指数。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一个正整数 ai。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个正整数 ai，按照从小到大的顺序输出其分解质因数后，每个质因数的底数和指数，每个底数和指数占一行。</p><p>每个正整数的质因数全部输出完毕后，输出一个空行。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100<br>2≤ai≤2×10^9</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br>6<br>8<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span><br><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">50010</span>;<br><br><span class="hljs-keyword">bool</span> st[N];<br><span class="hljs-keyword">int</span> primes[N], cnt, minp[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) <br>        &#123;<br>            primes[cnt ++ ] = i;<br>            minp[i] = i;<br>            <br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; i * primes[j] &lt;= x; j ++ )<br>        &#123;<br>            st[i * primes[j]] = <span class="hljs-literal">true</span>;<br>            minp[i * primes[j]] = primes[j];<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>(N - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">int</span> T;<br>    <br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        cin &gt;&gt; n;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )<br>        &#123;<br>            <span class="hljs-keyword">int</span> p = primes[i];<br>            <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>            <br>            <span class="hljs-keyword">if</span> (n % p == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">while</span> (n % p == <span class="hljs-number">0</span>)<br>                &#123;<br>                    n /= p;<br>                    s ++ ;<br>                &#125;<br>                cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>        <br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <br>    cout &lt;&lt; cnt &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h2><p><strong>把小于某个数的所有质数都筛出来。</strong></p><blockquote><p>给定一个正整数 n，请你求出 1∼n 中质数的个数。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含整数 n。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示 1∼n 中质数的个数。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^6</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure></blockquote><p>这个问题呢有三种方法的演变过程</p><p>详细的请仔细看我这篇博客<a href="https://jxj777.top/posts/2574143239.html">点我跳转</a></p><p>这里直接给出c++代码</p><h4 id="朴素筛"><a href="#朴素筛" class="headerlink" title="朴素筛"></a>朴素筛</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N= <span class="hljs-number">1000010</span>;<br><br><span class="hljs-keyword">int</span> primes[N], cnt;<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (st[i]) <span class="hljs-keyword">continue</span>;<br>        primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt;= n; j += i)<br>            st[j] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-built_in">get_primes</span>(n);<br><br>    cout &lt;&lt; cnt &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="埃氏筛法"><a href="#埃氏筛法" class="headerlink" title="埃氏筛法"></a>埃氏筛法</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes1</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!st[i])&#123;<br>            primes[cnt++]=i;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=n;j+=i) st[j]=<span class="hljs-literal">true</span>;<span class="hljs-comment">//可以用质数就把所有的合数都筛掉；</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="欧拉筛（线性筛法）"><a href="#欧拉筛（线性筛法）" class="headerlink" title="欧拉筛（线性筛法）"></a>欧拉筛（线性筛法）</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N= <span class="hljs-number">1000010</span>;<br><br><span class="hljs-keyword">int</span> primes[N], cnt;<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-built_in">get_primes</span>(n);<br><br>    cout &lt;&lt; cnt &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h2><h3 id="试除法求约数"><a href="#试除法求约数" class="headerlink" title="试除法求约数"></a>试除法求约数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">get_divisors</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= x / i; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-keyword">if</span> (x / i != i) res.<span class="hljs-built_in">push_back</span>(x / i);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        cin &gt;&gt; n;<br>        <br>        <span class="hljs-keyword">auto</span> a = <span class="hljs-built_in">get_divisors</span>(n);<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t : a)<br>        &#123;<br>            cout &lt;&lt; t &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="约数和定理与约数个数定理"><a href="#约数和定理与约数个数定理" class="headerlink" title="约数和定理与约数个数定理"></a>约数和定理与约数个数定理</h3><p>这个为小学数奥定理，会在课上详细讲一讲，都是基于乘法原理</p><h4 id="约数和定理"><a href="#约数和定理" class="headerlink" title="约数和定理"></a>约数和定理</h4><blockquote><p>给定 n 个正整数 ai，请你输出这些数的乘积的约数之和，答案对 10^9+7 取模。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一个整数 ai。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示所给正整数的乘积的约数之和，答案需对 10^9+7取模。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100<br>1≤ai≤2×10^9</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>2<br>6<br>8<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">252<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br><br>    unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; primes;<br><br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        cin &gt;&gt; x;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                x /= i;<br>                primes[i] ++ ;<br>            &#125;<br><br>        <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) primes[x] ++ ;<br>    &#125;<br><br>    LL res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : primes)<br>    &#123;<br>        LL a = p.first, b = p.second;<br>        LL t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (b -- ) t = (t * a + <span class="hljs-number">1</span>) % mod;<br>        res = res * t % mod;<br>    &#125;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="约数个数定理"><a href="#约数个数定理" class="headerlink" title="约数个数定理"></a>约数个数定理</h4><blockquote><p>给定 n 个正整数 ai，请你输出这些数的乘积的约数个数，答案对 10^9+7 取模。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一个整数 ai。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示所给正整数的乘积的约数个数，答案需对 10^9+7 取模。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100<br>1≤ai≤2×10^9</p><h4 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>2<br>6<br>8<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">12<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br><br>    unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; primes;<br><br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        cin &gt;&gt; x;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                x /= i;<br>                primes[i] ++ ;<br>            &#125;<br><br>        <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) primes[x] ++ ;<br>    &#125;<br><br>    LL res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : primes) res = res * (p.second + <span class="hljs-number">1</span>) % mod;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h3><blockquote><p>给定 n 对正整数 ai,bi，请你求出每对数的最大公约数。</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一个整数对 ai,bi。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共 n 行，每行输出一个整数对的最大公约数。</p><h4 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^5<br>1≤ai,bi≤2×10^9</p><h4 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>2<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> !b ? a : <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <br>        cout &lt;&lt; <span class="hljs-built_in">gcd</span>(a, b) &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>会有俩种求得模式，一种是直接求单个数得欧拉函数，一种是直接筛出欧拉函数</p><h3 id="求解欧拉函数："><a href="#求解欧拉函数：" class="headerlink" title="求解欧拉函数："></a>求解欧拉函数：</h3><blockquote><p>给定 n 个正整数 ai，请你求出每个数的欧拉函数。</p><h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一个正整数 ai。</p><h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共 n 行，每行输出一个正整数 ai 的欧拉函数。</p><h4 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100<br>1≤ai≤2×10^9</p><h4 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>3<br>6<br>8<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br>2<br>4<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = x;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res = res / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i;<br>        &#125;    <br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) res = res / x * (x - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v;<br>        cin &gt;&gt; v;<br>        <br>        cout &lt;&lt; <span class="hljs-built_in">phi</span>(v) &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="线性筛法筛出欧拉函数"><a href="#线性筛法筛出欧拉函数" class="headerlink" title="线性筛法筛出欧拉函数"></a>线性筛法筛出欧拉函数</h3><blockquote><p>给定一个正整数 n，求 1∼n 中每个数的欧拉函数之和。</p><h4 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含一个整数 n。</p><h4 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示 1∼n 中每个数的欧拉函数之和。</p><h4 id="数据范围-7"><a href="#数据范围-7" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^6</p><h4 id="输入样例：-7"><a href="#输入样例：-7" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">6<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">12<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> primes[N], phi[N], cnt;<br><span class="hljs-keyword">bool</span> st[N];<br>LL res;<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_phi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            primes[cnt ++ ] = i;<br>            phi[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; i * primes[j] &lt;= x; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">int</span> t = i * primes[j];<br>            st[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                phi[t] = phi[i] * primes[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <br>            phi[t] = phi[i] * (primes[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-built_in">get_phi</span>(n);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        res += phi[i];<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="快速幂和龟速乘"><a href="#快速幂和龟速乘" class="headerlink" title="快速幂和龟速乘"></a>快速幂和龟速乘</h2><p>在通识课上讲过哈~</p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><blockquote><p>给定 n 组 ai,bi,pi，对于每组数据，求出 ai ^ bi mod pi 的值。</p><h4 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含三个整数 ai,bi,pi。</p><h4 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每组数据，输出一个结果，表示 ai ^ bi mod pi 的值。</p><p>每个结果占一行。</p><h4 id="数据范围-8"><a href="#数据范围-8" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000<br>1≤ai,bi,pi≤2×10^9</p><h4 id="输入样例：-8"><a href="#输入样例：-8" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br>1<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qki</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    LL res = <span class="hljs-number">1</span> % p;<br>    <br>    <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) res = res * a % p;<br>        a = (LL) a * a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <br>        cout &lt;&lt; <span class="hljs-built_in">qki</span>(a, b, c) &lt;&lt; endl;<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="龟速乘"><a href="#龟速乘" class="headerlink" title="龟速乘"></a>龟速乘</h3><blockquote><p>求 a 乘 b 对 p 取模的值。</p><h4 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入整数a，第二行输入整数b，第三行输入整数p。</p><h4 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示<code>a*b mod p</code>的值。</p><h4 id="数据范围-9"><a href="#数据范围-9" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤a,b,p≤10^18</p><h4 id="输入样例：-9"><a href="#输入样例：-9" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>4<br>5<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-9"><a href="#输出样例：-9" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LL a, b, p;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;<br>    <br>    LL res = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(b &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) res = (res + a) % p;<br>        a = (a + a) % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h2><blockquote><p>若整数 b，m 互质，并且对于任意的整数 a，如果满足 b|a，则存在一个整数 x，使得 a/b≡a×x (modm)，则称 x 为 b 的模 m 乘法逆元，记为 b−1(mod m)。<br>b 存在乘法逆元的充要条件是 b 与模数 m 互质。当模数 m 为质数时b ^ (m−2) 即为 b 的乘法逆元。</p></blockquote><p><strong>有人可能会问了，为什么b ^ (m - 2)是b得乘法逆元呢？这个事情得先从欧拉定理和费马小定理开始说起</strong></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210612143620193.png" alt="image-20210612143620193"></p><p>如果n是质数，那么这个公式会变成了<img src="http://jin-xuanjie.gitee.io/note-pad/image-20210612143740996.png" alt="image-20210612143740996"></p><blockquote><p>给定 n 组 ai,pi，其中 pi 是质数，求 ai 模 pi 的乘法逆元，若逆元不存在则输出 <code>impossible</code>。</p><p><strong>注意</strong>：请返回在 0∼p−1 之间的逆元。</p><h4 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含一个数组 ai,pi，数据保证 pi 是质数。</p><h4 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共 n 行，每组数据输出一个结果，每个结果占一行。</p><p>若 ai 模 pi 的乘法逆元存在，则输出一个整数，表示逆元，否则输出 <code>impossible</code>。</p><h4 id="数据范围-10"><a href="#数据范围-10" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^5<br>1≤ai,pi≤2∗10^9</p><h4 id="输入样例：-10"><a href="#输入样例：-10" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-10"><a href="#输出样例：-10" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br>impossible<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span> % p;<br>    <br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, p;<br>        cin &gt;&gt; a &gt;&gt; p;<br>        <br>        <span class="hljs-keyword">int</span> res = <span class="hljs-built_in">qmi</span>(a, p - <span class="hljs-number">2</span>, p);<br>        <br>        <span class="hljs-keyword">if</span>(p == <span class="hljs-number">2</span> &amp;&amp; a % p == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p == <span class="hljs-number">2</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>            <br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (res) cout &lt;&lt; res &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>今天的内容量还是比较多的，希望大家可以多加练习和推导，做到活用</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分图算法</title>
    <link href="/posts/326720021.html"/>
    <url>/posts/326720021.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述二分图及其判断二分图的算法–染色法和二分图最大匹配算法匈牙利算法</p><span id="more"></span><h1 id="图论（4–完结）"><a href="#图论（4–完结）" class="headerlink" title="图论（4–完结）"></a>图论（4–完结）</h1><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><blockquote><p>啥是二分图呀？</p></blockquote><p><strong>二分图又称作二部图，是图论中的一种特殊模型。设G=(V,E)是一个无向图，如果顶点V可分割为两个互不相交的子集(A,B)，并且图中的每条边（i，j）所关联的两个顶点i和j分别属于这两个不同的顶点集(i in A,j in B)，则称图G为一个二分图。</strong></p><blockquote><p>说人话</p></blockquote><p><strong>就是可以把图论中的点进行分成俩个部分，并且每个部分内部没有变，俩个部分之间有边</strong></p><blockquote><p>有啥性质？</p></blockquote><p><strong>二分图就是不具有奇数环的图，也就是说所有的二分图都能被二染色。</strong></p><p>所以我们怎么判断二分图呢？</p><p>就是看是否这个图具有奇数环，跟这个相对应的是什么呢，就是能否二染色</p><h3 id="染色法："><a href="#染色法：" class="headerlink" title="染色法："></a>染色法：</h3><blockquote><p>给定一个 n 个点 m 条边的无向图，图中可能存在重边和自环。</p><p>请你判断这个图是否是二分图。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 m。</p><p>接下来 m 行，每行包含两个整数 u 和 v，表示点 u 和点 v 之间存在一条边。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果给定图是二分图，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤10^5</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> ne[<span class="hljs-number">2</span> * N], e[<span class="hljs-number">2</span> * N], h[N], idx;<br><span class="hljs-keyword">int</span> color[N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    color[u] = c;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-keyword">int</span> j = e[i];<br>        <br>        <span class="hljs-keyword">if</span> (!color[j])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">dfs</span>(j, <span class="hljs-number">3</span> - c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color[j] == c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span>(!color[i]) <br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">1</span>)) <br>            &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>    <br>    <span class="hljs-keyword">if</span>(flag) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="最大匹配之匈牙利算法"><a href="#最大匹配之匈牙利算法" class="headerlink" title="最大匹配之匈牙利算法"></a>最大匹配之匈牙利算法</h3><blockquote><p>二分图的匹配：给定一个二分图 G，在 G 的一个子图 M 中，M 的<strong>边集</strong> {E} 中的任意两条边都不依附于同一个顶点，则称 M 是一个匹配。</p><p>二分图的最大匹配：所有匹配中包含边数<strong>最多</strong>的一组匹配被称为二分图的最大匹配，其边数即为最大匹配数。</p></blockquote><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><blockquote><p>给定一个二分图，其中左半部包含 n1 个点（编号 1∼n1），右半部包含 n2 个点（编号 1∼n2），二分图共包含 m 条边。</p><p>数据保证任意一条边的两个端点都不可能在同一部分中。</p><p>请你求出二分图的最大匹配数。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 n1、 n2 和 m。</p><p>接下来 m 行，每行包含两个整数 u 和 v，表示左半部点集中的点 u 和右半部点集中的点 v 之间存在一条边。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示二分图的最大匹配数。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n1,n2≤500<br>1≤u≤n1<br>1≤v≤n2<br>1≤m≤10^5</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n1, n2, m;<br><span class="hljs-keyword">int</span> h[N], ne[M], e[M], idx;<br><span class="hljs-keyword">int</span> match[N];<br><span class="hljs-keyword">bool</span> st[N];<br><span class="hljs-keyword">int</span> res;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[x]; ~i; i = ne[i] )<br>    &#123;<br>        <span class="hljs-keyword">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <br>            <span class="hljs-keyword">if</span> (!match[j] || <span class="hljs-built_in">find</span>(match[j]))<br>            &#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <br>        <span class="hljs-built_in">add</span>(a, b);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i ++ )<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)) res ++ ;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><hr>至此图论算法就告一段落了，虽然算法真的很多，还是要多加练习才对啊~<hr><p>下周会开始讲数学部分，会比较快速的rush掉数学方面的知识（因为快比赛了）</p><ul><li>质数<ul><li>朴素筛法，埃氏筛法，线性筛法（欧拉筛）</li><li>分解质因数（试除法）</li><li>判断质数（试除法）</li></ul></li><li>约数<ul><li>求约数（试除法）</li><li>约数个数定理</li><li>约数和定理</li><li>欧几里得算法</li></ul></li><li>欧拉函数<ul><li>线性筛求欧拉函数</li></ul></li><li>快速幂<ul><li>逆元（欧拉定理和费马小定理）</li></ul></li><li>扩展欧几里得算法<ul><li>裴蜀定理</li></ul></li><li>中国剩余定理</li><li>高斯消元</li><li>求组合数<ul><li>卢卡斯定理</li></ul></li><li>容斥原理</li><li>博弈论<ul><li>nim尼姆游戏</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>floyd,最小生成树</title>
    <link href="/posts/3434242789.html"/>
    <url>/posts/3434242789.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述多源汇最短路和最小生成树算法kruskal，prim算法</p><span id="more"></span><h1 id="图论（3）"><a href="#图论（3）" class="headerlink" title="图论（3）"></a>图论（3）</h1><h2 id="floyd算法"><a href="#floyd算法" class="headerlink" title="floyd算法"></a>floyd算法</h2><blockquote><p>floyd算法？啥叫多源汇最短路</p></blockquote><p><strong>之前的算法只能解决单点到其他的最短距离，这个算法解决的是任意俩点之间的最短路就很厉害</strong></p><p>其实floyd的作用不只有求最短路，它还可以：</p><ul><li>求最小环</li><li>求传递闭包</li></ul><p>这篇只讲求最短路，其他作用寒假集训的时候会给大家讲述</p><hr><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环，边权可能为负数。</p><p>再给定 k 个询问，每个询问包含两个整数 x 和 y，表示查询从点 x 到点 y 的最短距离，如果路径不存在，则输出 <code>impossible</code>。</p><p>数据保证图中不存在负权回路。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 n,m,k。</p><p>接下来 m 行，每行包含三个整数 x,y,z，表示存在一条从点 xx 到点 yy 的有向边，边长为 zz。</p><p>接下来 kk 行，每行包含两个整数 x,y，表示询问点 x 到点 y 的最短距离。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 kk 行，每行输出一个整数，表示询问的结果，若询问两点间不存在路径，则输出 <code>impossible</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤200,<br>1≤k≤n^2<br>1≤m≤20000<br>图中涉及边长绝对值均不超过 10000。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">impossible</span><br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">210</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> dist[N][N];<br><br><span class="hljs-keyword">int</span> n, m, k;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k ++ )<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>                dist[i][j] = <span class="hljs-built_in">min</span>(dist[i][j], dist[i][k] + dist[k][j]);<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <br>      <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>        &#123;<br>            dist[i][j] = i == j ? <span class="hljs-number">0</span> : INF; <br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <br>        dist[a][b] = <span class="hljs-built_in">min</span>(dist[a][b], c);<br>    &#125;<br>  <br>    <br>    <span class="hljs-built_in">floyd</span>();<br>    <br>    <span class="hljs-keyword">while</span> (k -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <br>        <span class="hljs-keyword">if</span> (dist[a][b] &gt; INF / <span class="hljs-number">2</span>) cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; dist[a][b] &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n,m,q,N=<span class="hljs-number">210</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> [][]d =<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N][N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;=n ; k++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=n ; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ; j++) &#123;<br>                    d[i][j]=Math.min(d[i][j],d[i][k]+d[k][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        q = Integer.parseInt(str1[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ; j++) &#123;<br>                d[i][j]=i==j?<span class="hljs-number">0</span>:INF;<br>            &#125;<br>        &#125;<br>            <span class="hljs-keyword">while</span> (m--&gt;<span class="hljs-number">0</span>)&#123;<br>                String[] str2 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>                <span class="hljs-keyword">int</span> a = Integer.parseInt(str2[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">int</span> b = Integer.parseInt(str2[<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">int</span> c = Integer.parseInt(str2[<span class="hljs-number">2</span>]);<br>                d[a][b]=Math.min(d[a][b],c);<br>            &#125;<br>            floyd();<br>            <span class="hljs-keyword">while</span> (q--&gt;<span class="hljs-number">0</span>)&#123;<br>                String[] str3 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>                <span class="hljs-keyword">int</span> a = Integer.parseInt(str3[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">int</span> b = Integer.parseInt(str3[<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">int</span> t=d[a][b];<br>                <span class="hljs-keyword">if</span> (t&gt;INF/<span class="hljs-number">2</span>)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;impossible&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(t);<br>                &#125;<br>            &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><hr><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><blockquote><p>最小生成树？啥是生成树</p></blockquote><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">对于无向图G和一棵树<span class="hljs-built_in">T</span>来说，如果<span class="hljs-built_in">T</span>是G的子图，则称<span class="hljs-built_in">T</span>为G的树，如果<span class="hljs-built_in">T</span>是G的生成子图，则称<span class="hljs-built_in">T</span>是G的生成树。<br></code></pre></div></td></tr></table></figure><p><strong>那么最小生成树便是生成树中，权值最小的那个就是最小生成树</strong></p><p>一般对于最小生成树，我们存在俩个算法</p><ul><li>kruskal</li><li>prim</li></ul><p>这俩个用的都挺广泛的</p><hr><h3 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h3><blockquote><p>给定一个 n 个点 m 条边的无向图，图中可能存在重边和自环，边权可能为负数。</p><p>求最小生成树的树边权重之和，如果最小生成树不存在则输出 <code>impossible</code>。</p><p>给定一张边带权的无向图 G=(V,E)，其中 V 表示图中点的集合，E 表示图中边的集合，n=|V|，m=|E|。</p><p>由 V 中的全部 n 个顶点和 E 中 n−1 条边构成的无向连通子图被称为 G 的一棵生成树，其中边的权值之和最小的生成树被称为无向图 G 的最小生成树。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 m。</p><p>接下来 m 行，每行包含三个整数 u,v,w，表示点 u 和点 v 之间存在一条权值为 w 的边。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，若存在最小生成树，则输出一个整数，表示最小生成树的树边权重之和，如果最小生成树不存在则输出 <code>impossible</code>。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤500<br>1≤m≤10^5<br>图中涉及边的边权的绝对值均不超过 10000。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">6<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">bool</span> st[N];<br><span class="hljs-keyword">int</span> g[N][N];<br><span class="hljs-keyword">int</span> dist[N];<br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++  )<br>        &#123;<br>            <br>        <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>            t = j;<br>            <br>        &#125;<br>    <br>    <br>    <span class="hljs-keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">if</span>(i) res += dist[t];<br>    st[t] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>    &#123;<br>        dist[j] = <span class="hljs-built_in">min</span>(dist[j], g[t][j]);    <br>    &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> g);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) g[i][i] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <br>        g[a][b] = g[b][a] = <span class="hljs-built_in">min</span>(g[a][b], c);<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">prim</span>();<br>    <span class="hljs-keyword">if</span>(t == INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; t &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">510</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> g[][]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N][N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span>[] st=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> [] dist=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n,m;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ; j++) &#123;<br>                <span class="hljs-keyword">if</span> (i==j)&#123;g[i][j]=<span class="hljs-number">0</span>;&#125;<br>                <span class="hljs-keyword">else</span> &#123; g[i][j] = INF; &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (m--&gt;<span class="hljs-number">0</span>)&#123;<br>            String[] str2 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">int</span> a = Integer.parseInt(str2[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">int</span> b = Integer.parseInt(str2[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">int</span> c = Integer.parseInt(str2[<span class="hljs-number">2</span>]);<br>            g[a][b]=Math.min(g[a][b],c);<br>            g[b][a]=Math.min(g[b][a],c);<br>        &#125;<br>        <span class="hljs-keyword">int</span> t=prim();<br>        <span class="hljs-keyword">if</span> (t==INF)&#123;<br>            System.out.println(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(t);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span> </span>&#123;<br>        Arrays.fill(dist,INF);<br>        <span class="hljs-keyword">int</span> res =<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n ; i++) &#123;<br>            <span class="hljs-keyword">int</span> t=-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ; j++) &#123;<br>                <span class="hljs-keyword">if</span> (!st[j]&amp;&amp;(t==-<span class="hljs-number">1</span>||dist[t]&gt;dist[j]))&#123;<br>                    t=j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i!=<span class="hljs-number">0</span>&amp;&amp;dist[t]==INF)&#123;<span class="hljs-keyword">return</span> INF;&#125;<br>            st[t]=<span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">if</span> (i!=<span class="hljs-number">0</span>)&#123;res+=dist[t];&#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ; j++) &#123;<br>             dist[j]=Math.min(dist[j],g[t][j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><HR><h3 id="克鲁斯卡尔算法实现："><a href="#克鲁斯卡尔算法实现：" class="headerlink" title="克鲁斯卡尔算法实现："></a>克鲁斯卡尔算法实现：</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> res, p[N];<br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a, b, w;<br>    <br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-keyword">const</span> Edge &amp;W) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; W.w;<br>    &#125;<br>&#125;edge[M];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x != p[x]) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(edge, edge + m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++ ) p[i] = i;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        Edge e = edge[i];<br>        <span class="hljs-keyword">int</span> a = e.a;<br>        <span class="hljs-keyword">int</span> b = e.b;<br>        <span class="hljs-keyword">int</span> w = e.w;<br>        <br>        <span class="hljs-keyword">int</span> pa = <span class="hljs-built_in">find</span>(a);<br>        <span class="hljs-keyword">int</span> pb = <span class="hljs-built_in">find</span>(b);<br>        <br>        <span class="hljs-keyword">if</span> (pa != pb)<br>        &#123;<br>            p[pa] = pb;<br>            cnt ++ ;<br>            res += w;<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(cnt &lt; n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <br>        edge[i] = &#123;a, b, c&#125;;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">kruskal</span>();<br><br>    <span class="hljs-keyword">if</span> (t == INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; t &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">#include &lt;iostream&gt;<br>#include &lt;cstring&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> res, p[N];<br><span class="hljs-keyword">int</span> n, m;<br><br>struct Edge<br>&#123;<br>    <span class="hljs-keyword">int</span> a, b, w;<br>    <br>    bool operator&lt; (<span class="hljs-keyword">const</span> Edge &amp;W) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; W.w;<br>    &#125;<br>&#125;edge[M];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x != p[x]) p[x] = find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    sort(edge, edge + m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++ ) p[i] = i;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        Edge e = edge[i];<br>        <span class="hljs-keyword">int</span> a = e.a;<br>        <span class="hljs-keyword">int</span> b = e.b;<br>        <span class="hljs-keyword">int</span> w = e.w;<br>        <br>        <span class="hljs-keyword">int</span> pa = find(a);<br>        <span class="hljs-keyword">int</span> pb = find(b);<br>        <br>        <span class="hljs-keyword">if</span> (pa != pb)<br>        &#123;<br>            p[pa] = pb;<br>            cnt ++ ;<br>            res += w;<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(cnt &lt; n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <br>        edge[i] = &#123;a, b, c&#125;;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> t = kruskal();<br><br>    <span class="hljs-keyword">if</span> (t == INF) puts(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; t &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>基础图论中的算法还剩二分图了，二分图后我们的基础图论就讲完了~</p><hr>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最短路（2）</title>
    <link href="/posts/2803822294.html"/>
    <url>/posts/2803822294.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述拓扑排序和介绍最短路中的bellman-ford，spfa算法</p><span id="more"></span><h1 id="图论-2"><a href="#图论-2" class="headerlink" title="图论(2)"></a>图论(2)</h1><p>接着昨天的迪杰斯特拉解决正权边的最短路，我们来介绍下解决负权边的俩个算法，bellman-ford算法及其它优化后的spfa算法</p><h2 id="bellman-ford算法"><a href="#bellman-ford算法" class="headerlink" title="bellman-ford算法"></a>bellman-ford算法</h2><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环， <strong>边权可能为负数</strong>。</p><p>请你求出从 1 号点到 n 号点的最多经过 k 条边的最短距离，如果无法从 1 号点走到 n 号点，输出 <code>impossible</code>。</p><p>注意：图中可能 <strong>存在负权回路</strong> 。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 n,m,k</p><p>接下来 m 行，每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示从 1 号点到 n 号点的最多经过 k 条边的最短距离。</p><p>如果不存在满足条件的路径，则输出 <code>impossible</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,k≤500<br>1≤m≤10000<br>任意边长的绝对值不超过 10000。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>, M = <span class="hljs-number">10010</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a, b, c;<br>&#125;edges[M];<br><br><span class="hljs-keyword">int</span> n, m, k;<br><span class="hljs-keyword">int</span> dist[N];<br><span class="hljs-keyword">int</span> last[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br><br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i ++ )<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(last, dist, <span class="hljs-keyword">sizeof</span> dist);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">auto</span> e = edges[j];<br>            dist[e.b] = <span class="hljs-built_in">min</span>(dist[e.b], last[e.a] + e.c);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        edges[i] = &#123;a, b, c&#125;;<br>    &#125;<br><br>    <span class="hljs-built_in">bellman_ford</span>();<br><br>    <span class="hljs-keyword">if</span> (dist[n] &gt; <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dist[n]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">510</span>;<span class="hljs-comment">//数据给的最大的点的值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> M=<span class="hljs-number">100010</span>;<span class="hljs-comment">//数据给的最大值是M条边</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<span class="hljs-comment">//点</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m;<span class="hljs-comment">//边</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> k;<span class="hljs-comment">//最多经过k条边</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] dist=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<span class="hljs-comment">//从1到n号点的距离</span><br>    <span class="hljs-keyword">static</span> Node[] list=<span class="hljs-keyword">new</span> Node[M];<span class="hljs-comment">//点和点和权值对象</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] back =<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<span class="hljs-comment">//备份dist数组</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        k = Integer.parseInt(str1[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)<br>        &#123;<br>            String[] str2 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">int</span> a = Integer.parseInt(str2[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">int</span> b = Integer.parseInt(str2[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">int</span> c = Integer.parseInt(str2[<span class="hljs-number">2</span>]);<br>            list[i] = <span class="hljs-keyword">new</span> Node(a,b,c);<br>        &#125;<br>        bellman_ford();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span> </span>&#123;<br>        Arrays.fill(dist, INF);<br>        dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;k ; i++) &#123;<br>            back=Arrays.copyOf(dist,n+<span class="hljs-number">1</span>);<span class="hljs-comment">//克隆上一轮的距离值数组，防止在这一环发生连续修改惨象</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;m ; j++) &#123;<br>                Node node=list[j];<br>                <span class="hljs-keyword">int</span> a=node.a;<br>                <span class="hljs-keyword">int</span> b=node.b;<br>                <span class="hljs-keyword">int</span> c=node.c;<br>                dist[b]=Math.min(dist[b],back[a]+c);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dist[n]&gt;INF/<span class="hljs-number">2</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(dist[n]);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b,c;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.a = a;<br>        <span class="hljs-keyword">this</span>.b = b;<br>        <span class="hljs-keyword">this</span>.c = c;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="spfa算法求最短路及其判断负环"><a href="#spfa算法求最短路及其判断负环" class="headerlink" title="spfa算法求最短路及其判断负环"></a>spfa算法求最短路及其判断负环</h2><h3 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环， <strong>边权可能为负数</strong>。</p><p>请你求出 1 号点到 n 号点的最短距离，如果无法从 1 号点走到 n 号点，则输出 <code>impossible</code>。</p><p>数据保证不存在负权回路。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n 和 m。</p><p>接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示 1 号点到 n 号点的最短距离。</p><p>如果路径不存在，则输出 <code>impossible</code>。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤10^5<br>图中涉及边长绝对值均不超过 10000</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> -<span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> h[N], w[N], e[N], ne[N], idx;<br><span class="hljs-keyword">int</span> dist[N];<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">spfa</span>();<br><br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, t);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N= (<span class="hljs-keyword">int</span>) (<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] h=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] ne=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] e=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] w=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> idx =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] dist=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span>[] st=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br>        e[idx]=b;<br>        w[idx]=c;<br>        ne[idx]=h[a];<br>        h[a]=idx++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;<br>        Arrays.fill(dist,INF);<br>        Queue&lt;Integer&gt; queue=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        queue.add(<span class="hljs-number">1</span>);<br>        st[<span class="hljs-number">1</span>]= <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> t=queue.poll();<br>            st[t]=<span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; i !=-<span class="hljs-number">1</span> ; i=ne[i]) &#123;<br>                <span class="hljs-keyword">int</span> j=e[i];<br>                <span class="hljs-keyword">if</span> (dist[j]&gt;dist[t]+w[i]) &#123;<br>                    dist[j] = dist[t] + w[i];<br>                    <span class="hljs-keyword">if</span> (!st[j]) &#123;<br>                        queue.add(j);<br>                        st[j] = <span class="hljs-keyword">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dist[n];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        Arrays.fill(h, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span>(m -- &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            String[] str2 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">int</span> a = Integer.parseInt(str2[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">int</span> b = Integer.parseInt(str2[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">int</span> c = Integer.parseInt(str2[<span class="hljs-number">2</span>]);<br>            add(a,b,c);<br>        &#125;<br>        <span class="hljs-keyword">int</span> t = spfa();<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0x3f3f3f3f</span>) System.out.println(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-keyword">else</span> System.out.println(t);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p><strong>求负环</strong></p><blockquote><p>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环， <strong>边权可能为负数</strong>。</p><p>请你判断图中是否存在负权回路。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n 和 m。</p><p>接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果图中<strong>存在</strong>负权回路，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤2000<br>1≤m≤10000,<br>图中涉及边长绝对值均不超过 10000</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> h[N], e[M], ne[M], w[M];<br><span class="hljs-keyword">bool</span> st[N];<br><span class="hljs-keyword">int</span> dist[N];<br><span class="hljs-keyword">int</span> cnt[N];<br><br><span class="hljs-keyword">int</span> idx;<br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    w[idx] = c;<br>    ne[idx] = h[a];<br>    h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        q.<span class="hljs-built_in">push</span>(i);<br>        st[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> a = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[a]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[a] + w[i])<br>            &#123;<br>                dist[j] = dist[a] + w[i];<br>                cnt[j] = cnt[a] + <span class="hljs-number">1</span>;<br>                <br>                <span class="hljs-keyword">if</span>(cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                <br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; <br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">spfa</span>()) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N= (<span class="hljs-keyword">int</span>) (<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 带权重的数组加链表模拟</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] h=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] ne=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] e=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] w=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> idx =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] dist=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<span class="hljs-comment">//距离</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] cnt=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span>[] st=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<span class="hljs-comment">//判断是否进入队列了</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br>        e[idx]=b;<br>        w[idx]=c;<br>        ne[idx]=h[a];<br>        h[a]=idx++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;<br>        Arrays.fill(dist,INF);<br>        Queue&lt;Integer&gt; queue=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<span class="hljs-comment">//模拟队列</span><br>        dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=n ; i++) &#123; queue.add(i);&#125;<span class="hljs-comment">//把所有点放进队列，防止有负权环和第一个点没有联通</span><br>        st[<span class="hljs-number">1</span>]= <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> t=queue.poll();<span class="hljs-comment">//取出队尾</span><br>            st[t]=<span class="hljs-keyword">false</span>;<span class="hljs-comment">//因为取了出来，置成false</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; i !=-<span class="hljs-number">1</span> ; i=ne[i]) &#123;<br>                <span class="hljs-keyword">int</span> j=e[i];<br>                <span class="hljs-keyword">if</span> (dist[j]&gt;dist[t]+w[i]) &#123;<span class="hljs-comment">//若更新了此点，后面的点也要跟着更新，所以放入队列</span><br>                    dist[j] = dist[t] + w[i];<br>                    cnt[j]=cnt[t]+<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (cnt[j]&gt;=n)&#123;<span class="hljs-comment">//总共n个节点，最多n-1个边，但是出现了n个边的时候，他一定是形成了环，那是为啥会形成环呢，因为出现了这个回路走完是负的</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Yes&quot;</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (!st[j]) &#123;<br>                        queue.add(j);<span class="hljs-comment">//若不在队列，放进去</span><br>                        st[j] = <span class="hljs-keyword">true</span>;<span class="hljs-comment">//置成true</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        Arrays.fill(h, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span>(m -- &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            String[] str2 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">int</span> a = Integer.parseInt(str2[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">int</span> b = Integer.parseInt(str2[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">int</span> c = Integer.parseInt(str2[<span class="hljs-number">2</span>]);<br>            add(a,b,c);<br>        &#125;<br>        System.out.println(spfa());<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>至此单源最短路的几个算法就讲完了，明天讲多源最短路的floyd算法和最小生成树算法</p><ul><li>最小生成树算法<ul><li>kruskal（克鲁斯卡尔算法）</li><li>prim（普利姆算法）</li></ul></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拓扑排序，最短路（1）</title>
    <link href="/posts/229895269.html"/>
    <url>/posts/229895269.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述拓扑排序和介绍最短路中的dijkstra（迪杰斯特拉）算法</p><span id="more"></span><h1 id="图论（1）"><a href="#图论（1）" class="headerlink" title="图论（1）"></a>图论（1）</h1><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><blockquote><p>什么叫拓扑排序？干什么用的？</p></blockquote><p><strong>拓扑序列只针对于有向图，并且只有无环的图才有拓扑序列，拓扑排序就是图的广搜的一个经典应用</strong></p><p><strong>拓扑序列是满足序列后的数一定没有指向序列前面的边我们叫做拓扑序，拓扑序会在之后的学习中经常提到，因为拓扑序真的很重要</strong></p><p>看看例题，看看代码就知道这个是什么啦~</p><hr><blockquote><p>给定一个 n 个点 m 条边的有向图，点的编号是 1 到 n，图中可能存在重边和自环。</p><p>请输出任意一个该有向图的拓扑序列，如果拓扑序列不存在，则输出 −1。</p><p>若一个由图中所有点构成的序列 A 满足：对于图中的每条边 (x,y)，x 在 A 中都出现在 y 之前，则称 A 是该图的一个拓扑序列。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 m。</p><p>接下来 m 行，每行包含两个整数 x 和 y，表示存在一条从点 x 到点 y 的有向边 (x,y)。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，如果存在拓扑序列，则输出任意一个合法的拓扑序列即可。</p><p>否则输出 −1。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤10^5</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> h[N], ne[N], e[N], idx;<br><span class="hljs-keyword">int</span> d[N];<br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">tSort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (d[i] == <span class="hljs-number">0</span>) q[ ++ tt] = i;<br>        <br>    <span class="hljs-keyword">while</span> (hh &lt;= tt)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> a = q[hh ++ ];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[a]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> ( -- d[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                q[ ++ tt] = j;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (tt == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <br>        <span class="hljs-built_in">add</span>(a, b);<br>        d[b] ++ ;<br>    &#125;<br>    <br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-built_in">tSort</span>();<br>    <br>    <span class="hljs-keyword">if</span> (flag)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cout &lt;&lt; q[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">int</span> idx=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">int</span>[] h=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">int</span>[] e=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">int</span>[] ne=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">int</span>[] d=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">int</span>[] q=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] string=reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n=Integer.parseInt(string[<span class="hljs-number">0</span>]);<br>        m=Integer.parseInt(string[<span class="hljs-number">1</span>]);<br>        Arrays.fill(h,-<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span> (m--&gt;<span class="hljs-number">0</span>)&#123;<br>            String[] string1=reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">int</span> x=Integer.parseInt(string1[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">int</span> y=Integer.parseInt(string1[<span class="hljs-number">1</span>]);<br>            add(x,y);<br>            d[y]++;<span class="hljs-comment">//a-&gt;b 所以入度加一</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (toSort())&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n ; i++) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%d &quot;</span>,q[i]);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">toSort</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> hh=<span class="hljs-number">0</span>,tt=-<span class="hljs-number">1</span>;<span class="hljs-comment">//一般都会这么初始化</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (d[i]==<span class="hljs-number">0</span>)&#123;<br>                q[++tt]=i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (hh&lt;=tt)&#123;<br>            <span class="hljs-keyword">int</span> t=q[hh++];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=h[t];i!=-<span class="hljs-number">1</span>;i=ne[i])&#123;<br>                <span class="hljs-keyword">int</span> j=e[i];<br>                d[j]--;<br>                <span class="hljs-keyword">if</span> (d[j]==<span class="hljs-number">0</span>)&#123;<br>                    q[++tt]=j;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n-<span class="hljs-number">1</span>==tt;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>        e[idx]=y;<br>        ne[idx]=h[x];<br>        h[x]=idx++;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><hr><h2 id="dijkstra算法"><a href="#dijkstra算法" class="headerlink" title="dijkstra算法"></a>dijkstra算法</h2><blockquote><p>什么是最短路是算法，用处是什么？</p></blockquote><p><strong>求某点到某点的最短路时就会用到最短路算法，但是因为最短路的场景比较多，所以使用的算法种类也会发生改变</strong></p><p>通过场景的划分，大概可以分为俩种（算法进阶指南这么分的）</p><ul><li>单源最短路<ul><li>所有边权都是正数：<ul><li>朴素dijkstra算法（迪杰斯特拉算法）o(n^2）（稠密图）</li><li>堆优化版dijkstra算法（迪杰斯特拉算法）o(mlogn)（稀疏图）</li></ul></li><li>存在负权边:<ul><li>Bellman-Ford： o(nm)</li><li>SPFA一般：o(m)</li></ul></li></ul></li><li>多源汇最短路 ：<ul><li>Floyd算法  </li></ul></li></ul><p><strong>今天讲述的时这其中单源最短路中解决边权为正数的迪杰斯特拉算法及其他的优化方式</strong></p><p>是从一个顶点到其余各顶点的最短路径算法，解决的是有权图中最短路径问题</p><p>原理的解释：<code>会在课堂讲解</code></p><p>假设原理已经讲完了，看看例题吧~</p><hr><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环，所有边权均为正值。</p><p>请你求出 1 号点到 n 号点的最短距离，如果无法从 1 号点走到 n 号点，则输出 -1。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n 和 m。</p><p>接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示 1 号点到 n 号点的最短距离。</p><p>如果路径不存在，则输出 −1。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤500<br>1≤m≤10^5<br>图中涉及边长均不超过10000。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure></blockquote><h4 id="朴素版"><a href="#朴素版" class="headerlink" title="朴素版"></a>朴素版</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> g[N][N];<br><span class="hljs-keyword">int</span> dist[N];<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], dist[t] + g[t][j]);<br><br>        st[t] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> g);<br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br><br>        g[a][b] = <span class="hljs-built_in">min</span>(g[a][b], c);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">dijkstra</span>());<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">500</span>+<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] g=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N][N];<span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] dist=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<span class="hljs-comment">//到各个点的最短路</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span>[] st=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> max= (<span class="hljs-keyword">int</span>) <span class="hljs-number">1e9</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader in = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] cur = in.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(cur[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">int</span> m = Integer.parseInt(cur[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=n ; i++) &#123;<br>            Arrays.fill(g[i],max); &#125;<br>        <span class="hljs-keyword">while</span>(m--&gt;<span class="hljs-number">0</span>)&#123;<br>            String[] arr = in.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">int</span> a = Integer.parseInt(arr[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">int</span> b = Integer.parseInt(arr[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">int</span> c = Integer.parseInt(arr[<span class="hljs-number">2</span>]);<br><br>            g[a][b] = Math.min(g[a][b], c);<br>        &#125;<br>        System.out.println(dijkstra());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span>&#123;<br>        Arrays.fill(dist,max);<span class="hljs-comment">//初始化所有的距离都为无穷大</span><br>        dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//自己的距离是0</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;n ; i++) &#123;<br>            <span class="hljs-comment">//找出离起点最近的点</span><br>            <span class="hljs-keyword">int</span> t=-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ; j++) &#123;<br>                <span class="hljs-keyword">if</span> (st[j])<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//发现已经是最短距离的点直接先跳过</span><br>                <span class="hljs-keyword">if</span> (t==-<span class="hljs-number">1</span>||dist[j]&lt;dist[t])&#123;<br>                    t=j;<span class="hljs-comment">//找出离起点的最短距离</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (t==n)&#123;<span class="hljs-keyword">break</span>;&#125;<br>            st[t]=<span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ; j++) &#123;<br>              dist[j]= Math.min(dist[j],dist[t]+g[t][j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dist[n]==max)&#123;<span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;&#125;<span class="hljs-comment">//如果重点值没有被改变，就说明到不了，路径不存在</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> dist[n];<span class="hljs-comment">//返回最短路径</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><hr><h4 id="堆优化版"><a href="#堆优化版" class="headerlink" title="堆优化版"></a>堆优化版</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>, dis = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> h[N], w[N], e[N], ne[N], idx;<br><span class="hljs-keyword">int</span> dist[N];<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);<br>    <br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> a = heap.<span class="hljs-built_in">top</span>(); heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">int</span> ax = a.x, ay = a.y;<br>        <br>        <span class="hljs-keyword">if</span> (st[ay]) <span class="hljs-keyword">continue</span>;<br>        st[ay] = <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[ay]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = e[i], v = w[i];<br>            <br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[ay] + v)<br>            &#123;<br>                dist[j] = dist[ay] + v;<br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j], j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br>    <br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <br>    <span class="hljs-built_in">dijkstra</span>();<br>    <br>    <span class="hljs-keyword">if</span> (dist[n] == dis) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>   <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N= (<span class="hljs-keyword">int</span>) (<span class="hljs-number">1e6</span>);<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-comment">//经典数组模拟数组+链表</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] h=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] e=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] ne=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] w=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<span class="hljs-comment">//之前没有接触到过的权重</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> idx=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] dist=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<span class="hljs-comment">//存储1号点到每个点的最短距离</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span>[] st=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br>        e[idx]=b;<br>        w[idx]=c;<br>        ne[idx]=h[a];<br>        h[a]=idx++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//维护当前未在st中标记过且离起点最近的点</span><br>        PriorityQueue&lt;PIIs&gt; queue=<span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br>        Arrays.fill(dist,INF);<br>        dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        queue.add(<span class="hljs-keyword">new</span> PIIs(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<br>            <span class="hljs-comment">//找到当前未在s中出现过且离原点最近的点</span><br>            PIIs p=queue.poll();<br>            <span class="hljs-keyword">int</span> t =p.getSecond();<br>            <span class="hljs-keyword">int</span> distance=p.getFirst();<br>            <span class="hljs-comment">// if (st[t])continue;//我感觉应该是可有可没有</span><br>            st[t]=<span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=h[t];i !=-<span class="hljs-number">1</span>;i=ne[i])&#123;<br>                <span class="hljs-keyword">int</span> j=e[i];<br>                <span class="hljs-keyword">if</span> (dist[j]&gt;distance+w[i])&#123;<br>                    dist[j]=distance+w[i];<br>                    queue.add(<span class="hljs-keyword">new</span> PIIs(dist[j],j));<br><br>                &#125;<br>            &#125;<br>        &#125;    <span class="hljs-keyword">if</span>(dist[n] == INF) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">return</span> dist[n];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">int</span> m = Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        Arrays.fill(h, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span>(m -- &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            String[] str2 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">int</span> a = Integer.parseInt(str2[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">int</span> b = Integer.parseInt(str2[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">int</span> c = Integer.parseInt(str2[<span class="hljs-number">2</span>]);<br>            add(a,b,c);<br>        &#125;<br>        System.out.println(dijkstra());<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PIIs</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">PIIs</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> first;<span class="hljs-comment">//距离值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> second;<span class="hljs-comment">//点编号</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PIIs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> first, <span class="hljs-keyword">int</span> second)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.first = first;<br>        <span class="hljs-keyword">this</span>.second = second;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getFirst</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFirst</span><span class="hljs-params">(<span class="hljs-keyword">int</span> first)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.first = first;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSecond</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> second;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSecond</span><span class="hljs-params">(<span class="hljs-keyword">int</span> second)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.second = second;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(PIIs o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Integer.compare(first, o.first);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>之后会把剩下的最短路算法讲完，到了图论这块代码量就上来了，大家一定要多练习，把这几个图论算法练熟练，能直接写下来才行~</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dfs和bfs，树与图的深度广度遍历</title>
    <link href="/posts/2809524257.html"/>
    <url>/posts/2809524257.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述深搜和广搜，并且对图和树进行一个入门，也就是图的深搜和广搜</p><span id="more"></span><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="深搜和广搜"><a href="#深搜和广搜" class="headerlink" title="深搜和广搜"></a>深搜和广搜</h2><blockquote><p>啥是搜索，深搜和广搜又有啥区别啊？</p></blockquote><p><strong>搜索就是把解的集合不重不漏的枚举出来</strong></p><p><strong>而深搜和广搜就是搜索顺序的差异</strong></p><ul><li>深搜顾名思义就是深度优先</li><li>广搜顾名思义就是广度优先</li></ul><p><strong>会在课上画一个比较形象的图来解释</strong></p><p>来看一看例题把</p><hr><h3 id="深搜例题："><a href="#深搜例题：" class="headerlink" title="深搜例题："></a>深搜例题：</h3><blockquote><p>给定一个整数 n，将数字 1∼n 排成一排，将会有很多种排列方法。</p><p>现在，请你按照字典序将所有的排列方法输出。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含一个整数 n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>按字典序输出所有排列方案，每个方案占一行。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤7</p><p>输入样例：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> path[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> state)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (u == n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, path[i]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        <span class="hljs-keyword">if</span> (!(state &gt;&gt; i &amp; <span class="hljs-number">1</span>))<br>        &#123;<br>            path[u] = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs</span>(u + <span class="hljs-number">1</span>, state + (<span class="hljs-number">1</span> &lt;&lt; i));<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span>  st[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> path[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> n=scanner.nextInt();<br>        dfs(<span class="hljs-number">0</span>,n);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(u==n)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                System.out.print(path[i]+<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(!st[i])&#123;st[i]=<span class="hljs-keyword">true</span>;<br>            path[u]=i;<br>            dfs(u+<span class="hljs-number">1</span>,n);<br>            st[i]=<span class="hljs-keyword">false</span>;&#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p><strong>再看一看有名的八皇后问题吧</strong></p><blockquote><p>n−皇后问题是指将 n 个皇后放在 n×n 的国际象棋棋盘上，使得皇后不能相互攻击到，即任意两个皇后都不能处于同一行、同一列或同一斜线上。</p><p><img src="https://cdn.acwing.com/media/article/image/2019/06/08/19_860e00c489-1_597ec77c49-8-queens.png" alt="1_597ec77c49-8-queens.png"></p><p>现在给定整数 n，请你输出所有的满足条件的棋子摆法。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含整数 n。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>每个解决方案占 n 行，每行输出一个长度为 n 的字符串，用来表示完整的棋盘状态。</p><p>其中 <code>.</code> 表示某一个位置的方格状态为空，<code>Q</code> 表示某一个位置的方格上摆着皇后。</p><p>每个方案输出完成后，输出一个空行。</p><p><strong>注意：行末不能有多余空格。</strong></p><p>输出方案的顺序任意，只要不重复且没有遗漏即可。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤9</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">.Q..</span><br><span class="hljs-string">...Q</span><br>Q.<span class="hljs-string">..</span><br><span class="hljs-string">..Q.</span><br><br><span class="hljs-string">..Q.</span><br>Q.<span class="hljs-string">..</span><br><span class="hljs-string">...Q</span><br><span class="hljs-string">.Q..</span><br></code></pre></div></td></tr></table></figure></blockquote><h4 id="第一种递归思想（深搜）"><a href="#第一种递归思想（深搜）" class="headerlink" title="第一种递归思想（深搜）"></a>第一种递归思想（深搜）</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">bool</span> col[N], row[N], dui1[<span class="hljs-number">2</span> * N - <span class="hljs-number">1</span>], dui2[<span class="hljs-number">2</span> * N - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">char</span> path[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (u &gt; n) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-keyword">if</span> (j == n)<br>    &#123;<br>        j = <span class="hljs-number">0</span>;<br>        i ++ ;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (i == n)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (u == n)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>; z &lt; n; z ++ )<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k ++ )<br>                &#123;<br>                    cout &lt;&lt; path[z][k];<br>                &#125;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">dfs</span>(i, j + <span class="hljs-number">1</span>, u);<br>    <br>    <span class="hljs-keyword">if</span> (!(col[j] || row[i] || dui1[i + j] || dui2[i - j + n]))<br>    &#123;<br>        col[j] = row[i] = dui1[i + j] = dui2[i - j + n] = <span class="hljs-literal">true</span>;<br>        path[i][j] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>        <span class="hljs-built_in">dfs</span>(i, j + <span class="hljs-number">1</span>, u + <span class="hljs-number">1</span>);<br>        col[j] = row[i] = dui1[i + j] = dui2[i - j + n] = <span class="hljs-literal">false</span>;<br>        path[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++ )<br>        &#123;<br>            path[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;    <br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> f[][]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span> [N][N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> lie[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> hang[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> dui1[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[<span class="hljs-number">2</span>*N-<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> dui2[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[<span class="hljs-number">2</span>*N-<span class="hljs-number">1</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br>        Scanner scanner =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> n=scanner.nextInt();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            Arrays.fill(f[i],<span class="hljs-string">&#x27;.&#x27;</span>);<br>        &#125;<br>        dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n);<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j,<span class="hljs-keyword">int</span> sum,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(j==n)&#123;<br>            i+=<span class="hljs-number">1</span>;<br>            j=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i==n)&#123;<br>        <span class="hljs-keyword">if</span>(sum==n)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;n;k++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> m=<span class="hljs-number">0</span>;m&lt;n;m++)&#123;<br>                    System.out.print(f[k][m]);<br>                &#125;<br>                System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>            System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>           <br>        &#125;<br>     <span class="hljs-keyword">return</span>;&#125;<br>    dfs(i,j+<span class="hljs-number">1</span>,sum,n);<br>    <span class="hljs-keyword">if</span>(hang[i]||lie[j]||dui1[i+j]||dui2[i-j+n])&#123;<span class="hljs-keyword">return</span>;&#125;<br>    hang[i]=<span class="hljs-keyword">true</span>;<br>    lie[j]=<span class="hljs-keyword">true</span>;<br>    dui1[i+j]=<span class="hljs-keyword">true</span>;<br>    dui2[i-j+n]=<span class="hljs-keyword">true</span>;<br>    f[i][j]=<span class="hljs-string">&#x27;Q&#x27;</span>;<br>    dfs(i,j+<span class="hljs-number">1</span>,sum+<span class="hljs-number">1</span>,n);<br>    hang[i]=<span class="hljs-keyword">false</span>;<br>    lie[j]=<span class="hljs-keyword">false</span>;<br>    dui1[i+j]=<span class="hljs-keyword">false</span>;<br>    dui2[i-j+n]=<span class="hljs-keyword">false</span>;<br>    f[i][j]=<span class="hljs-string">&#x27;.&#x27;</span>;    <br>&#125;&#125;<br></code></pre></div></td></tr></table></figure><h4 id="第二种递归思想-也是深搜"><a href="#第二种递归思想-也是深搜" class="headerlink" title="第二种递归思想(也是深搜)"></a>第二种递归思想(也是深搜)</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">char</span> s[N][N];<br><span class="hljs-keyword">bool</span> col[N], dui1[<span class="hljs-number">2</span> * N - <span class="hljs-number">1</span>], dui2[<span class="hljs-number">2</span> * N - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (u == n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++ )<br>            &#123;<br>                cout &lt;&lt; s[i][j];<br>            &#125;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (col[i] || dui1[u + i] || dui2[u - i + n]) <span class="hljs-keyword">continue</span>;<br>        col[i] = <span class="hljs-literal">true</span>;<br>        dui1[u + i] = <span class="hljs-literal">true</span>;<br>        dui2[u - i + n] = <span class="hljs-literal">true</span>;<br>        s[u][i] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>        <span class="hljs-built_in">dfs</span>(u + <span class="hljs-number">1</span>);<br>        col[i] = <span class="hljs-literal">false</span>;<br>        dui1[u + i] = <span class="hljs-literal">false</span>;<br>        dui2[u - i + n] = <span class="hljs-literal">false</span>;<br>        s[u][i] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++ )<br>        &#123;<br>            s[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> f[][]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span> [N][N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> lie[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> dui1[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span> [<span class="hljs-number">2</span>*N-<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> dui2[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span> [<span class="hljs-number">2</span>*N-<span class="hljs-number">1</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br>        Scanner scanner =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> n=scanner.nextInt();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            Arrays.fill(f[i],<span class="hljs-string">&#x27;.&#x27;</span>);<br>        &#125;<br>        dfs(<span class="hljs-number">0</span>,n);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(u==n)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                    System.out.print(f[i][j]);<br>                &#125;<br>                System.out.println();<br>            &#125;<br>            System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(lie[j]||dui1[u+j]||dui2[u-j+n])&#123;<span class="hljs-keyword">continue</span>;&#125;<br>            lie[j]=<span class="hljs-keyword">true</span>;<br>            dui1[u+j]=<span class="hljs-keyword">true</span>;<br>            dui2[u-j+n]=<span class="hljs-keyword">true</span>;<br>            f[u][j]=<span class="hljs-string">&#x27;Q&#x27;</span>;<br>            dfs(u+<span class="hljs-number">1</span>,n);<br>            lie[j]=<span class="hljs-keyword">false</span>;<br>            dui1[u+j]=<span class="hljs-keyword">false</span>;<br>            dui2[u-j+n]=<span class="hljs-keyword">false</span>;<br>            f[u][j]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="广搜例题："><a href="#广搜例题：" class="headerlink" title="广搜例题："></a>广搜例题：</h4><blockquote><p>给定一个 n×m 的二维整数数组，用来表示一个迷宫，数组中只包含 0 或 1，其中 0 表示可以走的路，1 表示不可通过的墙壁。</p><p>最初，有一个人位于左上角 (1,1) 处，已知该人每次可以向上、下、左、右任意一个方向移动一个位置。</p><p>请问，该人从左上角移动至右下角 (n,m) 处，至少需要移动多少次。</p><p>数据保证 (1,1) 处和 (n,m) 处的数字为 0，且一定至少存在一条通路。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 m。</p><p>接下来 n 行，每行包含 m 个整数（0 或 1），表示完整的二维数组迷宫。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示从左上角移动至右下角的最少移动次数。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤100</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure></blockquote><h4 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> g[N][N], d[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;PII&gt; q;<br><br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br><br>    <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++ )<br>        &#123;<br>            <span class="hljs-keyword">int</span> x = t.first + dx[i], y = t.second + dy[i];<br><br>            <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp; g[x][y] == <span class="hljs-number">0</span> &amp;&amp; d[x][y] == <span class="hljs-number">-1</span>)<br>            &#123;<br>                d[x][y] = d[t.first][t.second] + <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> d[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>            cin &gt;&gt; g[i][j];<br><br>    cout &lt;&lt; <span class="hljs-built_in">bfs</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] g = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N][N], d = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N][N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> PII[] q = <span class="hljs-keyword">new</span> PII[N * N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            String[] str = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                g[i][j] = Integer.parseInt(str[j]);<br>            &#125;<br>        &#125;<br>        System.out.println(bfs());<br>        reader.close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>        q[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> PII(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; d[i].length; j++) &#123;<br>                d[j][i] = -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span>[] dx = &#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, dy = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">while</span> (hh &lt;= tt) &#123;<br>            PII t = q[hh++];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>                <span class="hljs-keyword">int</span> x = t.getFirst() + dx[i], y = t.getSecond() + dy[i];<br>                <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp; g[x][y] == <span class="hljs-number">0</span> &amp;&amp; d[x][y] == -<span class="hljs-number">1</span>) &#123;<br>                    d[x][y] = d[t.getFirst()][t.getSecond()] + <span class="hljs-number">1</span>;<br>                    q[++tt] = <span class="hljs-keyword">new</span> PII(x, y);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> d[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>];<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PII</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> first;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> second;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PII</span><span class="hljs-params">(<span class="hljs-keyword">int</span> first, <span class="hljs-keyword">int</span> second)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.first = first;<br>        <span class="hljs-keyword">this</span>.second = second;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PII</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getFirst</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSecond</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> second;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="最小步数问题"><a href="#最小步数问题" class="headerlink" title="最小步数问题"></a>最小步数问题</h4><blockquote><p>在一个 3×3 的网格中，1~8 这 8 个数字和一个 <code>x</code> 恰好不重不漏地分布在这 3×3 的网格中。</p><p>例如：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">x</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">7</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><p>在游戏过程中，可以把 <code>x</code> 与其上、下、左、右四个方向之一的数字交换（如果存在）。</p><p>我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">8</span> x<br></code></pre></div></td></tr></table></figure><p>例如，示例中图形就可以通过让 <code>x</code> 先后与右、下、右三个方向的数字交换成功得到正确排列。</p><p>交换过程如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>   <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>   <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>   <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">x</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span>   <span class="hljs-number">4</span> x <span class="hljs-number">6</span>   <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>   <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">7</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span>   <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span>   <span class="hljs-number">7</span> x <span class="hljs-number">8</span>   <span class="hljs-number">7</span> <span class="hljs-number">8</span> x<br></code></pre></div></td></tr></table></figure><p>现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入占一行，将 3×3 的初始网格描绘出来。</p><p>例如，如果初始网格如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <br><span class="hljs-attribute">x</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <br><span class="hljs-attribute">7</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <br></code></pre></div></td></tr></table></figure><p>则输入为：<code>1 2 3 x 4 6 7 5 8</code></p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出占一行，包含一个整数，表示最少交换次数。</p><p>如果不存在解决方案，则输出 −1。</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">1</span>  <span class="hljs-number">5</span>  x  <span class="hljs-number">7</span>  <span class="hljs-number">6</span>  <span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">19<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(string state)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;string&gt; q;<br>    unordered_map&lt;string, <span class="hljs-keyword">int</span>&gt; d;<br><br>    q.<span class="hljs-built_in">push</span>(state);<br>    d[state] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><br>    string end = <span class="hljs-string">&quot;12345678x&quot;</span>;<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (t == end) <span class="hljs-keyword">return</span> d[t];<br><br>        <span class="hljs-keyword">int</span> distance = d[t];<br>        <span class="hljs-keyword">int</span> k = t.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br>        <span class="hljs-keyword">int</span> x = k / <span class="hljs-number">3</span>, y = k % <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++ )<br>        &#123;<br>            <span class="hljs-keyword">int</span> a = x + dx[i], b = y + dy[i];<br>            <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">0</span> &amp;&amp; a &lt; <span class="hljs-number">3</span> &amp;&amp; b &gt;= <span class="hljs-number">0</span> &amp;&amp; b &lt; <span class="hljs-number">3</span>)<br>            &#123;<br>                <span class="hljs-built_in">swap</span>(t[a * <span class="hljs-number">3</span> + b], t[k]);<br>                <span class="hljs-keyword">if</span> (!d.<span class="hljs-built_in">count</span>(t))<br>                &#123;<br>                    d[t] = distance + <span class="hljs-number">1</span>;<br>                    q.<span class="hljs-built_in">push</span>(t);<br>                &#125;<br>                <span class="hljs-built_in">swap</span>(t[a * <span class="hljs-number">3</span> + b], t[k]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> s[<span class="hljs-number">2</span>];<br><br>    string state;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i ++ )<br>    &#123;<br>        cin &gt;&gt; s;<br>        state += *s;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">bfs</span>(state) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Scanner cin = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        String str = <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i ++)&#123;<br>            str += cin.next();<br>        &#125;<br><br>        System.out.print(bfs(str));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(String str)</span></span>&#123;<br><br>        <span class="hljs-keyword">int</span>[] dx = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">int</span>[] dy = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br><br>        Queue&lt;String&gt; q = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>        q.add(str);<br>        map.put(str, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">while</span> (!q.isEmpty())&#123;<br><br>            String t = q.remove();<br><br>            <span class="hljs-keyword">if</span> (t.equals(<span class="hljs-string">&quot;12345678x&quot;</span>)) <span class="hljs-keyword">return</span> map.get(t);<br><br>            <span class="hljs-keyword">int</span> pos = t.indexOf(<span class="hljs-string">&#x27;x&#x27;</span>);<br><br>            <span class="hljs-keyword">int</span> x = pos / <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">int</span> y = pos % <span class="hljs-number">3</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++)&#123;<br>                <span class="hljs-keyword">int</span> tx = x + dx[i];<br>                <span class="hljs-keyword">int</span> ty = y + dy[i];<br><br>                <span class="hljs-keyword">if</span> (tx &lt; <span class="hljs-number">0</span> || tx &gt;= <span class="hljs-number">3</span> || ty &lt; <span class="hljs-number">0</span> || ty &gt;= <span class="hljs-number">3</span>) <span class="hljs-keyword">continue</span>;<br>                String tstr = makeStr(t, pos, tx * <span class="hljs-number">3</span> + ty);<br>                <span class="hljs-keyword">if</span> (map.containsKey(tstr)) <span class="hljs-keyword">continue</span>;<br><br>                map.put(tstr, map.get(t) + <span class="hljs-number">1</span>);<br>                q.add(tstr);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">makeStr</span><span class="hljs-params">(String t, <span class="hljs-keyword">int</span> src, <span class="hljs-keyword">int</span> dest)</span></span>&#123;<br>        StringBuilder str = <span class="hljs-keyword">new</span> StringBuilder(t);<br><br>        str.setCharAt(src, t.charAt(dest));<br>        str.setCharAt(dest, <span class="hljs-string">&#x27;x&#x27;</span>);<br><br>        <span class="hljs-keyword">return</span> str.toString();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="树和图的dfs和bfs"><a href="#树和图的dfs和bfs" class="headerlink" title="树和图的dfs和bfs"></a>树和图的dfs和bfs</h2><p><strong>其实和上面讲述的一样，只不过搭载了树和图数据结构</strong></p><hr><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="树的遍历例题"><a href="#树的遍历例题" class="headerlink" title="树的遍历例题"></a>树的遍历例题</h4><blockquote><p>给定一颗树，树中包含 n 个结点（编号 1∼n）和 n−1 条无向边。</p><p>请你找到树的重心，并输出将重心删除后，剩余各个连通块中点数的最大值。</p><p>重心定义：重心是指树中的一个结点，如果将这个点删除后，剩余各个连通块中点数的最大值最小，那么这个节点被称为树的重心。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n，表示树的结点数。</p><p>接下来 n−1 行，每行包含两个整数 a 和 b，表示点 a 和点 b 之间存在一条边。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数 m，表示将重心删除后，剩余各个连通块中点数的最大值。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^5</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">9</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>, M = N * <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-keyword">int</span> ans = N;<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[u] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-keyword">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (st[j]) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">int</span> s = <span class="hljs-built_in">dfs</span>(j);<br>        size = <span class="hljs-built_in">max</span>(size, s);<br>        sum += s;<br>    &#125;<br><br>    size = <span class="hljs-built_in">max</span>(size, n - sum - <span class="hljs-number">1</span>);<br>    ans = <span class="hljs-built_in">min</span>(ans, size);<br><br>    <span class="hljs-keyword">return</span> sum + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> N= (<span class="hljs-keyword">int</span>) (<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> h[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> e[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>*N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ne[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>*N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> st[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ans =N;<br>    <span class="hljs-keyword">static</span> StreamTokenizer s = <span class="hljs-keyword">new</span> StreamTokenizer(<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in)));<br>    <span class="hljs-keyword">static</span> BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(System.out));<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> idx=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        s.nextToken();<br>        n = (<span class="hljs-keyword">int</span>)s.nval;<br>        init();<br>        <span class="hljs-keyword">int</span> a, b;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            s.nextToken();<br>            a = (<span class="hljs-keyword">int</span>)s.nval;<br>            s.nextToken();<br>            b = (<span class="hljs-keyword">int</span>)s.nval;<br>            add(a, b);<br>            add(b, a);<br>        &#125;<br>        dfs(<span class="hljs-number">1</span>);<br>        bw.write(ans + <span class="hljs-string">&quot;&quot;</span>);<br>        bw.close();<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            h[i] = -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        e[idx]=b;<br>        ne[idx]=h[a];<br>        h[a]=idx++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> size=<span class="hljs-number">0</span>;<br>        st[u]=<span class="hljs-keyword">true</span>;<span class="hljs-comment">//表示这个点我来过了，也就是说以这个为重心的点已经测过了</span><br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[u]; i !=-<span class="hljs-number">1</span> ; i=ne[i]) &#123;<br>            <span class="hljs-keyword">int</span> j=e[i];<br>            <span class="hljs-keyword">if</span> (!st[j])&#123;<span class="hljs-comment">//看看这个节点我来过没有</span><br>                <span class="hljs-keyword">int</span> s=dfs(j);<br>                size=Math.max(size,s);<br>                sum+=s;<br>            &#125;<br>        &#125;<br>        size=Math.max(size,n-sum-<span class="hljs-number">1</span>);<br>        ans=Math.min(ans,size);<br>        <span class="hljs-keyword">return</span> sum+<span class="hljs-number">1</span>;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><blockquote><p>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环。</p><p>所有边的长度都是 1，点的编号为 1∼n。</p><p>请你求出 1 号点到 n 号点的最短距离，如果从 1 号点无法走到 n 号点，输出 −1。</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 m。</p><p>接下来 m 行，每行包含两个整数 a 和 b，表示存在一条从 a 走到 b 的长度为 1 的边。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示 1 号点到 n 号点的最短距离。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤10^5</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-keyword">int</span> d[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br><br>    queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span>)<br>            &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> d[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b);<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">bfs</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> idx=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] h=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] e=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] ne=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] d=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] q=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String[] string=reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n=Integer.parseInt(string[<span class="hljs-number">0</span>]);<br>        m=Integer.parseInt(string[<span class="hljs-number">1</span>]);<br>        Arrays.fill(h,-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">while</span> (m--&gt;<span class="hljs-number">0</span>)&#123;<br>            String[] string1=reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">int</span> x=Integer.parseInt(string1[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">int</span> y=Integer.parseInt(string1[<span class="hljs-number">1</span>]);<br>            add(x,y);<br>        &#125;<br>        System.out.println(bfs());<br>        reader.close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> hh=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tt=<span class="hljs-number">0</span>;<br>        q[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//队列的第一个是一号节点，也就是起点</span><br>        Arrays.fill(d,-<span class="hljs-number">1</span>);<br><br>        d[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//自己离自己的距离为0</span><br>        <span class="hljs-keyword">while</span> (hh&lt;=tt)&#123;<br>            <span class="hljs-keyword">int</span> t=q[hh++];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; i !=-<span class="hljs-number">1</span> ; i=ne[i]) &#123;<br>                <span class="hljs-keyword">int</span> j=e[i];<br>                <span class="hljs-keyword">if</span> (d[j]==-<span class="hljs-number">1</span>)&#123;<br>                    d[j]=d[t]+<span class="hljs-number">1</span>;<br>                    q[++tt]=j;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> d[n]; &#125;<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        e[idx]=y;<br>        ne[idx]=h[x];<br>        h[x]=idx++;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p><strong>这一节难度是非常大的，dfs和bfs要练很久的。大家可能会问那为什么只讲一节课，但是又因为这个是比较砸时间的，大家要讲后多加练习才行，而不是我在这一直讲，我只给大家引路</strong></p><hr><p><strong>很多东西讲义上讲不清楚，讲义只对于入门和提供方向使用，只列出提纲和有效代码，更多东西还是要多听课上讲的</strong></p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆，哈希表</title>
    <link href="/posts/1457178808.html"/>
    <url>/posts/1457178808.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述哈希表和堆，再讲一讲Trie（字典树）</p><span id="more"></span><h1 id="数据结构（4）"><a href="#数据结构（4）" class="headerlink" title="数据结构（4）"></a>数据结构（4）</h1><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><blockquote><p>堆是什么呢？堆有啥用处呀？</p></blockquote><p><strong>堆之前是有讲过的，堆就是优先队列，在堆中，它可以动态维护序列的最大值和最小值</strong></p><blockquote><p>有这么一个场景，[1,4,3,2,1,23,4,55,423] 让你寻找这个的最大值或最小值</p></blockquote><p><strong>如果是你是不是会扫描一遍，然后每次找出最大值</strong></p><blockquote><p>可能有的人会说排个序不就行了？</p></blockquote><p><strong>那如果我继续往里面添加元素呢？（堆得优点体现在动态）</strong></p><blockquote><p>那堆是怎么实现的呢？</p></blockquote><p><strong>提前说明的是，堆的代码会比较复杂，在之后的竞赛中不会有人去手写一个堆，几乎都是使用stl里的priority_queue这个模板</strong></p><p><strong>那就看看例题把~</strong></p><hr><h3 id="例题"><a href="#例题" class="headerlink" title="例题:"></a>例题:</h3><blockquote><p>维护一个集合，初始时集合为空，支持如下几种操作：</p><ol><li><code>I x</code>，插入一个数 x；</li><li><code>PM</code>，输出当前集合中的最小值；</li><li><code>DM</code>，删除当前集合中的最小值（数据保证此时的最小值唯一）；</li></ol><p>现在要进行 N 次操作，对于所有第 2 个操作，输出当前集合的最小值。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 N。</p><p>接下来 N 行，每行包含一个操作指令，操作指令为 <code>I x</code>，<code>PM</code>，<code>DM</code>，<code>D k</code> 或 <code>C k x</code> 中的一种。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个输出指令 <code>PM</code>，输出一个结果，表示当前集合中的最小值。</p><p>每个结果占一行。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10^5<br>−10^9≤x≤10^9<br>数据保证合法。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">8</span><br><span class="hljs-attribute">I</span> -<span class="hljs-number">10</span><br><span class="hljs-attribute">PM</span><br><span class="hljs-attribute">I</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">DM</span><br><span class="hljs-attribute">PM</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-10</span><br>6<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lc (u &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rc (u &lt;&lt; 1 | 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pa (u &gt;&gt; 1)</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> h[N], cnt;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t = u;<br>    <span class="hljs-keyword">if</span> ((lc) &lt;= cnt &amp;&amp; h[lc] &lt; h[t]) t = lc;<br>    <span class="hljs-keyword">if</span> ((rc) &lt;= cnt &amp;&amp; h[rc] &lt; h[t]) t = rc;<br>    <br>    <span class="hljs-keyword">if</span> (u != t)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(h[t], h[u]);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (pa &amp;&amp; h[pa] &gt; h[u])<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(h[pa], h[u]);<br>        <span class="hljs-built_in">up</span>(pa);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        string op;<br>        <span class="hljs-keyword">int</span> x;<br>        <br>        cin &gt;&gt; op;<br>        <br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;I&quot;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            <br>            cnt ++ ;<br>            <br>            h[cnt] = x;<br>            <span class="hljs-built_in">up</span>(cnt);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;PM&quot;</span>)<br>        &#123;<br>            cout &lt;&lt; h[<span class="hljs-number">1</span>] &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            <span class="hljs-built_in">swap</span>(h[<span class="hljs-number">1</span>], h[cnt]);<br>            cnt -- ;<br>            <span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>堆掌握这些就足够了，以后在学习过程中不会手写堆的</strong></p><hr><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p><strong>哈希表之前有讲过，就不再举例子了，课上将直接讲解</strong></p><p>俩种解决哈希冲突的方法</p><ul><li>拉链法</li><li>开放寻址法</li></ul><hr><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>维护一个集合，支持如下几种操作：</p><ol><li><code>I x</code>，插入一个数 x；</li><li><code>Q x</code>，询问数 x 是否在集合中出现过；</li></ol><p>现在要进行 N 次操作，对于每个询问操作输出对应的结果。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 N，表示操作数量。</p><p>接下来 N 行，每行包含一个操作指令，操作指令为 <code>I x</code>，<code>Q x</code> 中的一种。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个询问指令 <code>Q x</code>，输出一个询问结果，如果 x 在集合中出现过，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><p>每个结果占一行。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10^5<br>−10^9≤x≤10^9</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">5</span><br><span class="hljs-attribute">I</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">I</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">I</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">Q</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">Q</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-keyword">Yes</span><br><span class="hljs-keyword">No</span><br></code></pre></div></td></tr></table></figure></blockquote><h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ha</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x % N + N) % N;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">ha</span>(x);<br>    <br>    <span class="hljs-built_in">add</span>(t, x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">ha</span>(x);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-keyword">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (j == x) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">char</span> op; <span class="hljs-keyword">int</span> x;<br>        cin &gt;&gt; op &gt;&gt; x;<br>        <br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-built_in">insert</span>(x);<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(x)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> h[N], null = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ha</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x % N + N) % N;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">ha</span>(x);<br>    <br>    <span class="hljs-keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)<br>    &#123;<br>        t = (t + <span class="hljs-number">1</span>) % N;<br>    &#125;<br>    <br>    h[t] = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">ha</span>(x);<br>    <br>    <span class="hljs-keyword">while</span> (h[t] != x &amp;&amp; h[t] != null)<br>    &#123;<br>        t = (t + <span class="hljs-number">1</span>) % N;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> h[t] == x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-keyword">char</span> op;<br>        <span class="hljs-keyword">int</span> x;<br>        cin &gt;&gt; op &gt;&gt; x;<br>        <br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-built_in">insert</span>(x);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(x)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p><strong>全称字符串前缀哈希法，把字符串变成一个p进制数字（哈希值），实现不同的字符串映射到不同的数字。</strong><br>对形如 X1X2X3⋯Xn−1Xn 的字符串,采用字符的ascii 码乘上 P 的次方来计算哈希值。</p><p>映射公式 (X1×Pn−1+X2×Pn−2+⋯+Xn−1×P1+Xn×P0)modQ<br>注意点：</p><ul><li>任意字符不可以映射成0，否则会出现不同的字符串都映射成0的情况，比如A,AA,AAA皆为0冲突问题：</li><li>通过巧妙设置P (131 或 13331) , Q (2^64)的值，一般可以理解为不产生冲突。</li></ul><hr><h4 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h4><blockquote><p>给定一个长度为 n 的字符串，再给定 m 个询问，每个询问包含四个整数 l1,r1,l2,r2，请你判断 [l1,r1]和 [l2,r2] 这两个区间所包含的字符串子串是否完全相同。</p><p>字符串中只包含大小写英文字母和数字。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n 和 m，表示字符串长度和询问次数。</p><p>第二行包含一个长度为 n 的字符串，字符串中只包含大小写英文字母和数字。</p><p>接下来 m 行，每行包含四个整数 l1,r1,l2,r2，表示一次询问所涉及的两个区间。</p><p>注意，字符串的位置从 1 开始编号。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个询问输出一个结果，如果两个字符串子串完全相同则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><p>每个结果占一行。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤10^5</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">8</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">aabbaabb</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-keyword">Yes</span><br><span class="hljs-keyword">No</span><br><span class="hljs-keyword">Yes</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ULL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>, P = <span class="hljs-number">131</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">char</span> str[N];<br>ULL h[N], p[N];<br><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str + <span class="hljs-number">1</span>);<br><br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i];<br>        p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> l1, r1, l2, r2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">get</span>(l1, r1) == <span class="hljs-built_in">get</span>(l2, r2)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p><strong>我们数据结构学习到这里就告一段落了， 这4次的数据结构课知识，足够我们之后去面对简单和中档题了，就算是基础数据结构的知识，我觉得也并不简单，如果你们想完全学会也需要你们勤加练习，之后将进行图论和搜索的教学，先把搜索和图论要教学的目录拿出来吧~</strong></p><hr><ul><li>搜索<ul><li>dfs</li><li>bfs</li></ul></li><li>图论<ul><li>拓扑排序</li><li>最短路算法<ul><li>dijkstra算法（迪杰斯特拉）</li><li>bellman-ford（贝尔曼-福特算法）</li><li>spfa算法</li><li>floyd（弗洛伊德算法）</li></ul></li><li>最小生成树算法<ul><li>prim算法（普利姆算法）</li><li>Kruskal（克鲁斯卡尔算法）</li></ul></li><li>二分图<ul><li>染色法</li><li>匈牙利算法（恋爱哲学算法😂😂😂）</li></ul></li></ul></li></ul><p>预计会一周半左右讲完（基础）图论和搜索， 图论和搜索远不止这些，我觉得这些是最重要的~</p><hr>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kmp,并查集</title>
    <link href="/posts/3639522052.html"/>
    <url>/posts/3639522052.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述数据结构中的KMP字符串和并查集数据结构</p><span id="more"></span><h1 id="数据结构（3）"><a href="#数据结构（3）" class="headerlink" title="数据结构（3）"></a>数据结构（3）</h1><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><blockquote><p>KMP是什么？好像经常能听到，是字符串的算法？</p></blockquote><p><strong>KMP这个词来自三个外国人的名字，也是不多见的几个字符串算法，列举以下字符串算法把</strong></p><ul><li>manacher算法（业内叫做马拉车算法，解决的回文字符串问题）</li><li>字符串哈希（之后会讲，解决的是字符串的高效存储和查找问题）</li><li>KMP（字符串匹配时使用）</li><li>我本人才疏学浅，只知道这些，如果之后你们学到了别的可以再教我~</li></ul><hr><p><strong>提前声明一点，这个东西第一次学的时候一定要学懂，要不然在你之后的学习生涯之中，会留下很长时间的阴影，KMP和其他算法和数据结构关联不大，代码也非常短，背下来做题也是可行的，但是会给你留下阴影</strong></p><blockquote><p>所以KMP是什么东西呀？</p></blockquote><p><strong>首先要说的是，KMP是字符串匹配算法</strong></p><p><strong>首先大家设想一个场景，有这么俩个字符串 模式串：[abcdabcabavabcabbaa] 和 模板串[abcabb]，请问在模式串中，模板串出现过几次</strong></p><blockquote><p>这时大家的想法应该就是 o（n * m）的一个暴力算法</p><p>KMP做了这个的优化，把时间复杂度优化到了o(n + m)</p></blockquote><p><strong>先看一道例题再解释吧</strong></p><hr><blockquote><p>给定一个模式串 S，以及一个模板串 P，所有字符串中只包含大小写英文字母以及阿拉伯数字。</p><p>模板串 P 在模式串 S 中多次作为子串出现。</p><p>求出模板串 P 在模式串 S 中所有出现的位置的起始下标。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入整数 N，表示字符串 P 的长度。</p><p>第二行输入字符串 P。</p><p>第三行输入整数 M，表示字符串 S 的长度。</p><p>第四行输入字符串 S。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，输出所有出现位置的起始下标（下标从 0 开始计数），整数之间用空格隔开。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10^5<br>1≤M≤10^6</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>aba<br>5<br>ababa<br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">char</span> s1[N], s2[M];<br><span class="hljs-keyword">int</span> ne[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; s1 + <span class="hljs-number">1</span> &gt;&gt; m &gt;&gt; s2 + <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &amp;&amp; s1[j + <span class="hljs-number">1</span>] != s1[i]) j = ne[j];<br>        <span class="hljs-keyword">if</span>(s1[j + <span class="hljs-number">1</span>] == s1[i]) j ++;<br>        ne[i] = j;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &amp;&amp; s1[j + <span class="hljs-number">1</span>] != s2[i]) j = ne[j];<br>        <span class="hljs-keyword">if</span>(s1[j + <span class="hljs-number">1</span>] == s2[i]) j ++ ;<br>        <span class="hljs-keyword">if</span>(j == n)<br>        &#123;<br>            cout &lt;&lt; i - j &lt;&lt; endl;<br>            j = ne[j];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p><strong>并查集的作用是，合并集合，询问俩个元素是否在一个集合当中</strong></p><p><strong>并查集的操作也足够简单，并且在c++的stl模板库里并没有实现的并查集，也就是说并查集只能我们来手写这个数据结构</strong></p><p><strong>就直接看一道例题把</strong></p><hr><blockquote><p>一共有 n 个数，编号是 1∼n，最开始每个数各自在一个集合中。</p><p>现在要进行 m 个操作，操作共有两种：</p><ol><li><code>M a b</code>，将编号为 a 和 b 的两个数所在的集合合并，如果两个数已经在同一个集合中，则忽略这个操作；</li><li><code>Q a b</code>，询问编号为 a 和 b 的两个数是否在同一个集合中；</li></ol><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入整数 n 和 m。</p><p>接下来 m 行，每行包含一个操作指令，指令为 <code>M a b</code> 或 <code>Q a b</code> 中的一种。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个询问指令 <code>Q a b</code>，都要输出一个结果，如果 a 和 b 在同一集合内，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><p>每个结果占一行。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤10^5</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">4</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">M</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">M</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">Q</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">Q</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">Q</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-keyword">Yes</span><br><span class="hljs-keyword">No</span><br><span class="hljs-keyword">Yes</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> p[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">char</span> op[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d%d&quot;</span>, op, &amp;a, &amp;b);<br>        <span class="hljs-keyword">if</span> (*op == <span class="hljs-string">&#x27;M&#x27;</span>) p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><strong>此题来自信息学奥赛一本通</strong></p><blockquote><p>Alice和Bob玩了一个古老的游戏：首先画一个 n×n 的点阵（下图 n=3 ）。</p><p>接着，他们两个轮流在相邻的点之间画上红边和蓝边：</p><p><img src="https://cdn.acwing.com/media/article/image/2019/12/11/19_9edbcf521b-1.png" alt="1.png"></p><p>直到围成一个封闭的圈（面积不必为 1）为止，“封圈”的那个人就是赢家。因为棋盘实在是太大了，他们的游戏实在是太长了！</p><p>他们甚至在游戏中都不知道谁赢得了游戏。</p><p>于是请你写一个程序，帮助他们计算他们是否结束了游戏？</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入数据第一行为两个整数 n 和 m。n表示点阵的大小，m 表示一共画了 m 条线。</p><p>以后 m 行，每行首先有两个数字 (x,y)，代表了画线的起点坐标，接着用空格隔开一个字符，假如字符是 D，则是向下连一条边，如果是 R 就是向右连一条边。</p><p>输入数据不会有重复的边且保证正确。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行：在第几步的时候结束。</p><p>假如 m 步之后也没有结束，则输出一行“draw”。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤200<br>1≤m≤24000</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> D<br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> R<br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> D<br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> R<br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> D<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">210</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = N * N;<br><span class="hljs-keyword">int</span> g[N][N];<br><span class="hljs-keyword">int</span> p[M];<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <br>    <span class="hljs-keyword">if</span> (x != p[x]) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>; i &lt;= n; i ++ ) <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )&#123;<br>            g[i][j] = ++t;<br>        &#125;<br>        <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * n; i ++ )&#123;<br>        p[i] = i;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++ )&#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        <span class="hljs-keyword">char</span> c;<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; c;<br>        <br>        <span class="hljs-keyword">int</span> u = g[x][y];<br>        <br>        <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;D&#x27;</span>) x ++ ;<br>        <span class="hljs-keyword">else</span> y ++ ;<br>        <span class="hljs-keyword">int</span> q = g[x][y];<br>        <br>        <span class="hljs-keyword">int</span> px = <span class="hljs-built_in">find</span>(u);<br>        <span class="hljs-keyword">int</span> py = <span class="hljs-built_in">find</span>(q);<br>        <br>        <span class="hljs-keyword">if</span>(px == py)&#123;<br>            res = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            p[px] = py;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (!res) cout &lt;&lt; <span class="hljs-string">&quot;draw&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>今天的代码量是非常少了，但一定要多注重思考，下节课就是最后一堂数据结构课了，讲哈希和堆（优先队列）</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调栈，单调队列，Trie</title>
    <link href="/posts/3001841268.html"/>
    <url>/posts/3001841268.html</url>
    
    <content type="html"><![CDATA[<p>本讲义延续上节课的队列和栈，讲述单调队列和单调栈，再讲一讲Trie（字典树）</p><span id="more"></span><h1 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构(2)"></a>数据结构(2)</h1><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><blockquote><p>欸欸欸，啥是单调栈呀，听着好高级的样子</p></blockquote><p><strong>单调栈就是在原来普通栈的基础上，栈内元素维护一个单调性</strong></p><blockquote><p>有啥用途？</p></blockquote><p><strong>也是用于一些题目的优化，据我所知比较局限(一般就只能例题这种题)</strong></p><p><strong>上例题！！</strong></p><hr><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><blockquote><p>给定一个长度为 N 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 N，表示数列长度。</p><p>第二行包含 N 个整数，表示整数数列。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含 N 个整数，其中第 i 个数表示第 i 个数的左边第一个比它小的数，如果不存在则输出 1。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10^5<br>1≤数列中元素≤10^9</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit"><span class="hljs-string">-1</span> 3 <span class="hljs-string">-1</span> 2 2<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> stk[N], tt;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        <span class="hljs-keyword">while</span> (tt &amp;&amp; stk[tt] &gt;= x) tt -- ;<br>        <span class="hljs-keyword">if</span> (!tt) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1 &quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, stk[tt]);<br>        stk[ ++ tt] = x;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><blockquote><p>那单调队列是不是在队列的基础上维护一个单调性啊？</p></blockquote><p><strong>是的，所以我们就直接看例题了，一般来说单调队列的应用也很局限，一般只用来解决滑动窗口问题</strong></p><hr><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>给定一个大小为 n≤10^6 的数组。</p><p>有一个大小为 k 的滑动窗口，它从数组的最左边移动到最右边。</p><p>你只能在窗口中看到 k 个数字。</p><p>每次滑动窗口向右移动一个位置。</p><p>以下是一个例子：</p><p>该数组为 <code>[1 3 -1 -3 5 3 6 7]</code>，k 为 3。</p><table><thead><tr><th align="left">窗口位置</th><th align="left">最小值</th><th align="left">最大值</th></tr></thead><tbody><tr><td align="left">[1 3 -1] -3 5 3 6 7</td><td align="left">-1</td><td align="left">3</td></tr><tr><td align="left">1 [3 -1 -3] 5 3 6 7</td><td align="left">-3</td><td align="left">3</td></tr><tr><td align="left">1 3 [-1 -3 5] 3 6 7</td><td align="left">-3</td><td align="left">5</td></tr><tr><td align="left">1 3 -1 [-3 5 3] 6 7</td><td align="left">-3</td><td align="left">5</td></tr><tr><td align="left">1 3 -1 -3 [5 3 6] 7</td><td align="left">3</td><td align="left">6</td></tr><tr><td align="left">1 3 -1 -3 5 [3 6 7]</td><td align="left">3</td><td align="left">7</td></tr></tbody></table><p>你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含两行。</p><p>第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。</p><p>第二行有 n 个整数，代表数组的具体数值。</p><p>同行数据之间用空格隔开。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含两个。</p><p>第一行输出，从左至右，每个位置滑动窗口中的最小值。</p><p>第二行输出，从左至右，每个位置滑动窗口中的最大值。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">8 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> -<span class="hljs-number">1</span> -<span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit"><span class="hljs-string">-1</span> <span class="hljs-string">-3</span> <span class="hljs-string">-3</span> <span class="hljs-string">-3</span> 3 3<br>3 3 5 5 6 7<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> q[N];<br><span class="hljs-keyword">int</span> w[N];<br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; w[i];<br>    <br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> tt = <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (hh &lt;= tt &amp;&amp; i - q[hh] + <span class="hljs-number">1</span> &gt; m) hh ++ ;<br>        <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; w[i] &lt;= w[q[tt]]) tt -- ;<br>        q[ ++ tt] = i;<br>        <br>        <span class="hljs-keyword">if</span> (i &gt;= m - <span class="hljs-number">1</span>) cout &lt;&lt; w[q[hh]] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (hh &lt;= tt &amp;&amp; i - m + <span class="hljs-number">1</span> &gt; q[hh]) hh ++ ;<br>        <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; w[i] &gt;= w[q[tt]]) tt --;<br>        q[ ++ tt] = i;<br>        <span class="hljs-keyword">if</span> (i &gt;= m - <span class="hljs-number">1</span>) cout &lt;&lt; w[q[hh]] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="trie-字典树"><a href="#trie-字典树" class="headerlink" title="trie(字典树)"></a>trie(字典树)</h2><blockquote><p>这是啥，干啥的呀？都牵扯到树了？好厉害的样子</p></blockquote><p><strong>是一个集合，是一个高效存储和查找字符串的数据结构</strong></p><hr><h3 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>维护一个字符串集合，支持两种操作：</p><ol><li><code>I x</code> 向集合中插入一个字符串 x；</li><li><code>Q x</code> 询问一个字符串在集合中出现了多少次。</li></ol><p>共有 N 个操作，输入的字符串总长度不超过 10^5，字符串仅包含小写英文字母。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 N，表示操作数。</p><p>接下来 N 行，每行包含一个操作指令，指令为 <code>I x</code> 或 <code>Q x</code> 中的一种。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个询问指令 <code>Q x</code>，都要输出一个整数作为结果，表示 x 在集合中出现的次数。</p><p>每个结果占一行。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤2∗10^4</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-number">5</span><br><span class="hljs-selector-tag">I</span> abc<br><span class="hljs-selector-tag">Q</span> abc<br><span class="hljs-selector-tag">Q</span> ab<br><span class="hljs-selector-tag">I</span> ab<br><span class="hljs-selector-tag">Q</span> ab<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br>0<br>1<br></code></pre></div></td></tr></table></figure></blockquote><p><strong>看个图把</strong>:</p><p><img src="https://cdn.acwing.com/media/article/image/2020/06/13/31041_aa11ff2cad-Trie1.PNG" alt="Trie1.PNG"></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> s[N][<span class="hljs-number">26</span>];<br><span class="hljs-keyword">int</span> idx;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> count[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!s[p][u]) s[p][u] = ++ idx;<br>        p = s[p][u];<br>    &#125;<br>    count[p] ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(string str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!s[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p = s[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> count[p];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">char</span> op;<br>        string a;<br>        <br>        cin &gt;&gt; op &gt;&gt; a;<br>        <br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;I&#x27;</span>)<br>        &#123;<br>            <span class="hljs-built_in">insert</span>(a);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            cout &lt;&lt; <span class="hljs-built_in">find</span>(a) &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="实战："><a href="#实战：" class="headerlink" title="实战："></a>实战：</h2><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><p><strong>这道题来自算法竞赛进阶指南这本书</strong></p><blockquote><p>在给定的 N 个整数 A1，A2……AN 中选出两个进行 xor（异或）运算，得到的结果最大是多少？</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入一个整数 N。</p><p>第二行输入 N 个整数 A1～AN。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数表示答案。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10^5<br>0≤Ai&lt;2^31</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">31</span> * N;<br><br><span class="hljs-keyword">int</span> s[M][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> idx;<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(!s[p][u]) s[p][u] = ++ idx;<br>        p = s[p][u];<br>    &#125;<br>    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(s[p][!u])<br>        &#123;<br>            p = s[p][!u];<br>            res = res * <span class="hljs-number">2</span> + !u;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            p = s[p][u];<br>            res = res * <span class="hljs-number">2</span> + u; <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v;<br>        cin &gt;&gt; v;<br>        <span class="hljs-built_in">insert</span>(v);<br>        <span class="hljs-keyword">int</span> p = <span class="hljs-built_in">query</span>(v);<br>        res = <span class="hljs-built_in">max</span>(res, v ^ p);<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p><strong>单考单调队列的几乎没有，但单调队列能解决滑动窗口问题，这里出一道滑动窗口问题</strong>  </p><p><strong>此题来自第九届蓝桥杯省赛C++B组,第九届蓝桥杯省赛JAVAB组</strong></p><blockquote><p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有 N 行。</p><p>其中每一行的格式是：</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">ts <span class="hljs-built_in">id</span>  <br></code></pre></div></td></tr></table></figure><p>表示在 ts 时刻编号 id 的帖子收到一个”赞”。</p><p>现在小明想统计有哪些帖子曾经是”热帖”。</p><p>如果一个帖子曾在任意一个长度为 D 的时间段内收到不少于 K 个赞，小明就认为这个帖子曾是”热帖”。</p><p>具体来说，如果存在某个时刻 T 满足该帖在 [T,T+D) 这段时间内(注意是左闭右开区间)收到不少于 K 个赞，该帖就曾是”热帖”。</p><p>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 N,D,K。</p><p>以下 N 行每行一条日志，包含两个整数 ts 和 id。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>按从小到大的顺序输出热帖 id。</p><p>每个 id 占一行。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤K≤N≤10^5<br>0≤ts,id≤10^5<br>1≤D≤10000</p><h4 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">10</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br>3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n, d, k;<br>PII order[N];<br><span class="hljs-keyword">int</span> cnt[N];<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; d &gt;&gt; k;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> t, id;<br>        cin &gt;&gt; t &gt;&gt; id;<br>        <br>        order[i] = &#123;t, id&#125;;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(order, order + n);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        cnt[order[i].y] ++ ;<br>        <br>        <span class="hljs-keyword">while</span> (order[i].x - order[j].x &gt;= d)<br>        &#123;<br>            cnt[order[j].y] -- ;<br>            j ++ ;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (cnt[order[i].y] &gt;= k) <br>        &#123;<br>            st[order[i].y] = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (st[i])<br>            cout &lt;&lt; i &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表，栈，队列</title>
    <link href="/posts/805010829.html"/>
    <url>/posts/805010829.html</url>
    
    <content type="html"><![CDATA[<p>本讲义讲述数据结构中的链表，普通栈和普通队列</p><span id="more"></span><h1 id="数据结构（1）"><a href="#数据结构（1）" class="headerlink" title="数据结构（1）"></a>数据结构（1）</h1><h2 id="链表："><a href="#链表：" class="headerlink" title="链表："></a>链表：</h2><p>很多人都已经学过链表了，但今天这个数据结构的代码可能需要大家再次进行学习。</p><p><strong>首先呢普及一下链表， 链表是干啥的呀？</strong></p><blockquote><p>链表常用于在程序中临时存储一组不定长的线性数据。</p></blockquote><p><strong>但是这个东西是动态链表，一般来说我们不会去使用，因为对于算法题目来说，题目范围一般是给定的</strong></p><blockquote><p>害，我会写链表呀，不就是这么写嘛：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> val;<br>    Node *next;<br>&#125;<br><span class="hljs-comment">//然后动态new或者是malloc嘛，太简单了呀！！！</span><br><span class="hljs-comment">//不讲！！！！</span><br></code></pre></div></td></tr></table></figure></blockquote><p><strong>最重要的一点，在算法题里很看重的就是时间，可是这个太慢了，如果动态new的话花费时间是巨大的。</strong></p><blockquote><p>你说半天了，那你说你咋模拟？？？😡😡😡</p></blockquote><hr><p><strong>首先要说一个观点，这个世界上所有的数据结构是都可以用数组来模拟的，所以在我们的竞赛届，几乎都使用数组来模拟数据结构，因为这样快</strong></p><blockquote><p>那链表怎么用数组模拟呢？</p></blockquote><p><strong>先别急，先说今天会讲什么链表:</strong></p><ul><li>单链表<ul><li>在算法题中单链表应用比较局限，大多数（99%）会用来模拟邻接表（多个链表）</li><li>主要用来存储图和树</li></ul></li><li>双链表<ul><li>在算法题中双链表的应用就很局限，一般是应用在某些题的优化（据说是这样，我没用过）</li></ul></li></ul><h3 id="链式向前星：-优美至极"><a href="#链式向前星：-优美至极" class="headerlink" title="链式向前星：(优美至极)"></a>链式向前星：(优美至极)</h3><p>首先讲讲为啥我会接触到这个模拟方式吧：</p><h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><blockquote><p>为啥我会使用这个方式来模拟？</p></blockquote><p>其实在我们搞竞赛届里利用数组来模拟链表其实是蛮多见的，只不过外圈人并不知晓。到今天为止我写代码的方式，模拟数据结构的思想被一位北大的一位大神–<strong>黄哲威</strong>深受影响到至今。</p><blockquote><p><a href="http://hzwer.com/">http://hzwer.com/</a></p></blockquote><p>这个是他的博客，这位oier应该是我们算法届的标杆，真的很励志，大家有兴趣可以去看看他的经历</p><blockquote><p>“链式前向星”这个命名，最早见于山师附中吕潇的代码，具体发明者暂不可考。</p></blockquote><p><strong>咋模拟的,快教教我</strong></p><p>我们这时候就要用例题来讲了:</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题:"></a>例题:</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表:"></a>单链表:</h4><blockquote><p>实现一个单链表，链表初始为空，支持三种操作：</p><ol><li>向链表头插入一个数；</li><li>删除第 k 个插入的数后面的数；</li><li>在第 k 个插入的数后插入一个数。</li></ol><p>现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。</p><p><strong>注意</strong>:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 M，表示操作次数。</p><p>接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：</p><ol><li><code>H x</code>，表示向链表头插入一个 x。</li><li><code>D k</code>，表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。</li><li><code>I k x</code>，表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）。</li></ol><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，将整个链表从头到尾输出。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤M≤100000<br>所有操作保证合法。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">10</span><br><span class="hljs-attribute">H</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">I</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">D</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">D</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">H</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">I</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">I</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">I</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">I</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">D</span> <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> head, idx;<br><span class="hljs-keyword">int</span> ne[N], e[N];<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    idx = <span class="hljs-number">0</span>;<br>    head = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_head</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x;<br>    ne[idx] = head;<br>    head = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x;<br>    ne[idx] = ne[k];<br>    ne[k] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    ne[k] = ne[ne[k]];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-built_in">init</span>();<br>    <br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">char</span> op;<br>        <span class="hljs-keyword">int</span> k, x;<br>        cin &gt;&gt; op;<br>        <br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;H&#x27;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            <span class="hljs-built_in">add_head</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;D&#x27;</span>)<br>        &#123;<br>            cin &gt;&gt; k;<br>            <span class="hljs-keyword">if</span>(!k) head = ne[head];<br>            <span class="hljs-built_in">del</span>(k - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            cin &gt;&gt; k &gt;&gt; x;<br>            <span class="hljs-built_in">add</span>(k - <span class="hljs-number">1</span>, x);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head; ~i; i = ne[i])<br>    &#123;<br>        cout &lt;&lt; e[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表:"></a>双链表:</h4><blockquote><p>实现一个双链表，双链表初始为空，支持 5 种操作：</p><ol><li>在最左侧插入一个数；</li><li>在最右侧插入一个数；</li><li>将第 k 个插入的数删除；</li><li>在第 k 个插入的数左侧插入一个数；</li><li>在第 k 个插入的数右侧插入一个数</li></ol><p>现在要对该链表进行 M 次操作，进行完所有操作后，从左到右输出整个链表。</p><p><strong>注意</strong>:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 M，表示操作次数。</p><p>接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：</p><ol><li><code>L x</code>，表示在链表的最左端插入数 x。</li><li><code>R x</code>，表示在链表的最右端插入数 x。</li><li><code>D k</code>，表示将第 k 个插入的数删除。</li><li><code>IL k x</code>，表示在第 k 个插入的数左侧插入一个数。</li><li><code>IR k x</code>，表示在第 k 个插入的数右侧插入一个数。</li></ol><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，将整个链表从左到右输出。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤M≤100000<br>所有操作保证合法。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">10</span><br><span class="hljs-attribute">R</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">D</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">L</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">IL</span> <span class="hljs-number">2</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">D</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">IL</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">L</span> <span class="hljs-number">8</span><br><span class="hljs-attribute">R</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">IL</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">IR</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">8 </span><span class="hljs-number">7</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> m;<br><span class="hljs-keyword">int</span> e[N], l[N], r[N], idx;<br><br><span class="hljs-comment">// 在节点a的右边插入一个数x</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x;<br>    l[idx] = a, r[idx] = r[a];<br>    l[r[a]] = idx, r[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 删除节点a</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    l[r[a]] = l[a];<br>    r[l[a]] = r[a];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m;<br><br>    <span class="hljs-comment">// 0是左端点，1是右端点</span><br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    idx = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        string op;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">int</span> k, x;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;L&quot;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            <span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>, x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;R&quot;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            <span class="hljs-built_in">insert</span>(l[<span class="hljs-number">1</span>], x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;D&quot;</span>)<br>        &#123;<br>            cin &gt;&gt; k;<br>            <span class="hljs-built_in">remove</span>(k + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;IL&quot;</span>)<br>        &#123;<br>            cin &gt;&gt; k &gt;&gt; x;<br>            <span class="hljs-built_in">insert</span>(l[k + <span class="hljs-number">1</span>], x);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cin &gt;&gt; k &gt;&gt; x;<br>            <span class="hljs-built_in">insert</span>(k + <span class="hljs-number">1</span>, x);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = r[<span class="hljs-number">0</span>]; i != <span class="hljs-number">1</span>; i = r[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr>   <h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><blockquote><p>我们是要把栈和队列一起讲的,因为一般来说这俩个数据结构总是对比着出现,但普通的栈和队列是很简单的.</p><p>栈的特点呢就是先进后出, 队列的特点就是先进先出,课上会给大家模拟场景。</p></blockquote><p>我之前呢讲过，我们之后的所有数据结构都会使用数组来模拟，就是因为数组真的很快，并且数组模拟后你会对这个数据结构的底层更加由深刻的理解。</p><p>今天讲的呢是普通的队列和栈，其实他俩有很多的变种。</p><ul><li>栈<ul><li>普通栈</li><li>单调栈</li></ul></li><li>队列<ul><li>单端队列</li><li>双端队列</li><li>循环队列</li><li>单调队列</li></ul></li></ul><p>明天会讲单调栈和单调队列。</p><p><strong>看看例题吧~</strong></p><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h4><blockquote><p>实现一个栈，栈初始为空，支持四种操作：</p><ol><li><code>push x</code> – 向栈顶插入一个数 x；</li><li><code>pop</code> – 从栈顶弹出一个数；</li><li><code>empty</code> – 判断栈是否为空；</li><li><code>query</code> – 查询栈顶元素。</li></ol><p>现在要对栈进行 MM 个操作，其中的每个操作 33 和操作 44 都要输出相应的结果。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 M，表示操作次数。</p><p>接下来 M 行，每行包含一个操作命令，操作命令为 <code>push x</code>，<code>pop</code>，<code>empty</code>，<code>query</code> 中的一种。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个 <code>empty</code> 和 <code>query</code> 操作都要输出一个查询结果，每个结果占一行。</p><p>其中，<code>empty</code> 操作的查询结果为 <code>YES</code> 或 <code>NO</code>，<code>query</code> 操作的查询结果为一个整数，表示栈顶元素的值。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤M≤100000<br>1≤x≤10^9<br>所有操作保证合法。</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-number">10</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">query</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">6</span><br><span class="hljs-keyword">pop</span><br><span class="hljs-symbol">query</span><br><span class="hljs-keyword">pop</span><br><span class="hljs-symbol">empty</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">query</span><br><span class="hljs-symbol">empty</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-number">5</span><br><span class="hljs-number">5</span><br><span class="hljs-keyword">YES</span><br><span class="hljs-number">4</span><br><span class="hljs-keyword">NO</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> m;<br><span class="hljs-keyword">int</span> stk[N], tt;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m;<br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        string op;<br>        <span class="hljs-keyword">int</span> x;<br><br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;push&quot;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            stk[ ++ tt] = x;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;pop&quot;</span>) tt -- ;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;empty&quot;</span>) cout &lt;&lt; (tt ? <span class="hljs-string">&quot;NO&quot;</span> : <span class="hljs-string">&quot;YES&quot;</span>) &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; stk[tt] &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="队列："><a href="#队列：" class="headerlink" title="队列："></a>队列：</h4><blockquote><p>实现一个队列，队列初始为空，支持四种操作：</p><ol><li><code>push x</code> – 向队尾插入一个数 x；</li><li><code>pop</code> – 从队头弹出一个数；</li><li><code>empty</code> – 判断队列是否为空；</li><li><code>query</code> – 查询队头元素。</li></ol><p>现在要对队列进行 M 个操作，其中的每个操作 3 和操作 4 都要输出相应的结果。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 M，表示操作次数。</p><p>接下来 M 行，每行包含一个操作命令，操作命令为 <code>push x</code>，<code>pop</code>，<code>empty</code>，<code>query</code> 中的一种。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个 <code>empty</code> 和 <code>query</code> 操作都要输出一个查询结果，每个结果占一行。</p><p>其中，<code>empty</code> 操作的查询结果为 <code>YES</code> 或 <code>NO</code>，<code>query</code> 操作的查询结果为一个整数，表示队头元素的值。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤M≤100000<br>1≤x≤10^9<br>所有操作保证合法。</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-number">10</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">empty</span><br><span class="hljs-symbol">query</span><br><span class="hljs-keyword">pop</span><br><span class="hljs-symbol">empty</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">pop</span><br><span class="hljs-symbol">query</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-keyword">NO</span><br><span class="hljs-number">6</span><br><span class="hljs-keyword">YES</span><br><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> m;<br><span class="hljs-keyword">int</span> q[N], hh, tt = <span class="hljs-number">-1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m;<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        string op;<br>        <span class="hljs-keyword">int</span> x;<br><br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;push&quot;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            q[ ++ tt] = x;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;pop&quot;</span>) hh ++ ;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;empty&quot;</span>) cout &lt;&lt; (hh &lt;= tt ? <span class="hljs-string">&quot;NO&quot;</span> : <span class="hljs-string">&quot;YES&quot;</span>) &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; q[hh] &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></div></td></tr></table></figure><h2 id="讲述stl的链表，栈和队列"><a href="#讲述stl的链表，栈和队列" class="headerlink" title="讲述stl的链表，栈和队列"></a>讲述stl的链表，栈和队列</h2><p>课上讲述~~</p><h2 id="实战："><a href="#实战：" class="headerlink" title="实战："></a>实战：</h2><p>原谅我找不到实战题，的确是考单链表，他就考到图和树，双链表就要考到别的很难得知识点优化。</p><p>考队列就会考到bfs，考栈就会考到dfs。害，实在是找不出简单得裸题，把上面的例题模板敲熟了就可以了</p><p>就看几道练习题把~</p><hr><p><strong>表达式运算(栈在数据结构课中的核心应用)</strong></p><blockquote><p>给定一个表达式，其中运算符仅包含 <code>+,-,*,/</code>（加 减 乘 整除），可能包含括号，请你求出表达式的最终值。</p><p><strong>注意：</strong></p><ul><li>数据保证给定的表达式合法。</li><li>题目保证符号 <code>-</code> 只作为减号出现，不会作为负号出现，例如，<code>-1+2</code>,<code>(2+2)*(-(1+1)+2)</code> 之类表达式均不会出现。</li><li>题目保证表达式中所有数字均为正整数。</li><li>题目保证表达式在中间计算过程以及结果中，均不超过 2^31−1</li><li>题目中的整除是指向 0 取整，也就是说对于大于 0 的结果向下取整，例如 5/3=1，对于小于 0 的结果向上取整，例如 5/(1−4)=−1。</li><li>C++和Java中的整除默认是向零取整；Python中的整除<code>//</code>默认向下取整，因此Python的<code>eval()</code>函数中的整除也是向下取整，在本题中不能直接使用。</li></ul><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，为给定表达式。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，为表达式的结果。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>表达式的长度不超过 10^5</p><h4 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode"><span class="hljs-comment">(2+2)</span>*<span class="hljs-comment">(1+1)</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>stack&lt;<span class="hljs-keyword">int</span>&gt; num;<br>stack&lt;<span class="hljs-keyword">char</span>&gt; op;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> b = num.<span class="hljs-built_in">top</span>(); num.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">auto</span> a = num.<span class="hljs-built_in">top</span>(); num.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">auto</span> c = op.<span class="hljs-built_in">top</span>(); op.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;+&#x27;</span>) x = a + b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) x = a - b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;*&#x27;</span>) x = a * b;<br>    <span class="hljs-keyword">else</span> x = a / b;<br>    num.<span class="hljs-built_in">push</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    unordered_map&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; pr&#123;&#123;<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">2</span>&#125;&#125;;<br>    string str;<br>    cin &gt;&gt; str;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        <span class="hljs-keyword">auto</span> c = str[i];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(c))<br>        &#123;<br>            <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, j = i;<br>            <span class="hljs-keyword">while</span> (j &lt; str.<span class="hljs-built_in">size</span>() &amp;&amp; <span class="hljs-built_in">isdigit</span>(str[j]))<br>                x = x * <span class="hljs-number">10</span> + str[j ++ ] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            i = j - <span class="hljs-number">1</span>;<br>            num.<span class="hljs-built_in">push</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;(&#x27;</span>) op.<span class="hljs-built_in">push</span>(c);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;)&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (op.<span class="hljs-built_in">top</span>() != <span class="hljs-string">&#x27;(&#x27;</span>) <span class="hljs-built_in">eval</span>();<br>            op.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (op.<span class="hljs-built_in">size</span>() &amp;&amp; op.<span class="hljs-built_in">top</span>() != <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; pr[op.<span class="hljs-built_in">top</span>()] &gt;= pr[c]) <span class="hljs-built_in">eval</span>();<br>            op.<span class="hljs-built_in">push</span>(c);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (op.<span class="hljs-built_in">size</span>()) <span class="hljs-built_in">eval</span>();<br>    cout &lt;&lt; num.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>数据结构和算法不同，数据结构更偏向于代码能力，大家一定要多练（指的是手头上），今天的这几个写着算比较简单的了，但是有一个新概念–<strong>链式向前星</strong>需要大家理解。这个东西虽然刚学起来比较难，会对之后的学习益处特别大~</p><hr><p>数据结构大概会将4-5节课，要加油鸭~😀😀😀😀</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双指针and区间合并and离散化</title>
    <link href="/posts/123566776.html"/>
    <url>/posts/123566776.html</url>
    
    <content type="html"><![CDATA[<p>本讲义为介绍双指针算法和区间合并算法</p><span id="more"></span><h1 id="双指针算法-amp-区间合并-amp-离散化算法"><a href="#双指针算法-amp-区间合并-amp-离散化算法" class="headerlink" title="双指针算法&amp;区间合并&amp;离散化算法"></a>双指针算法&amp;区间合并&amp;离散化算法</h1><h2 id="双指针算法："><a href="#双指针算法：" class="headerlink" title="双指针算法："></a>双指针算法：</h2><blockquote><p>啥是双指针算法嘞？你不说以后指针这个东西不是不用嘛？怎么突然冒出来个双指针算法？</p></blockquote><p><strong>双指针算法是一种优化算法，利用一些特定性质去把暴力算法的时间复杂度降低，从而达到优化的作用。还有就是此指针非彼指针，指针在算法中是一个广泛的定义，而不单单指指针本身</strong></p><p>双指针算法呢分成俩种（<strong>个人总结，并没有书本记载，方便理解</strong>）</p><ul><li>单区间双指针</li><li>双区间双指针</li></ul><hr><p>**其实这么讲还是蛮抽象的啦，看一道例题吧~**（单区间的双指针算法）</p><blockquote><p>给定一个长度为 n 的整数序列，请找出最长的不包含重复的数的连续区间，输出它的长度。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>第二行包含 n 个整数（均在 0∼10^5 范围内），表示整数序列。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示最长的不包含重复的数的连续区间的长度。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^5</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> q[N], s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        s[q[i]] ++ ;<br>        <span class="hljs-keyword">while</span> (s[q[i]] &gt; <span class="hljs-number">1</span>) s[q[j ++ ]] -- ;<br>        res = <span class="hljs-built_in">max</span>(res, i - j + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>从o（n^2） –&gt; o(n)</strong></p><hr><p><strong>再看一道例题吧~</strong>(双区间的双指针算法)</p><blockquote><p>给定一个长度为 n 的整数序列 a1,a2,…,an 以及一个长度为 mm 的整数序列 b1,b2,…,bm</p><p>请你判断 a 序列是否为 b 序列的子序列。</p><p>子序列指序列的一部分项按<strong>原有次序排列</strong>而得的序列，例如序列 {a1,a3,a5} 是序列 {a1,a2,a3,a4,a5} 的一个子序列。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n,m</p><p>第二行包含 n 个整数，表示 a1,a2,…,an</p><p>第三行包含 m 个整数，表示 b1,b2,…,bm</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果 a 序列是 b 序列的子序列，输出一行 <code>Yes</code>。</p><p>否则，输出 <code>No</code>。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤m≤10^5<br>−10^9≤ai,bi≤10^9</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; n &amp;&amp; j &lt; m)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == b[j]) i ++ ;<br>        j ++ ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (i == n) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="该区间合并咯"><a href="#该区间合并咯" class="headerlink" title="该区间合并咯~"></a>该区间合并咯~</h2><blockquote><p>区间合并？是我理解的那个区间合并嘛？</p></blockquote><p><strong>是的，此区间合并就是彼区间合并</strong></p><blockquote><p>啊？那不是很简单嘛？这么简单你还讲？</p></blockquote><p><strong>好家伙，你写一个看看</strong>😅😅</p><hr><p>因为很简单，概念性的问题我就不说了，直接看例题吧~</p><hr><blockquote><p>给定 n 个区间 [li,ri]，要求合并所有有交集的区间。</p><p>注意如果在端点处相交，也算有交集。</p><p>输出合并完成后的区间个数。</p><p>例如：[1,3] 和 [2,6] 可以合并为一个区间 [1,6]。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含两个整数 l 和 r。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示合并区间完成后的区间个数。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000<br>−10^9≤li≤ri≤10^9</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br>vector&lt;PII&gt; q;<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;PII&gt; res;<br>    <span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-keyword">int</span> st = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">int</span> en = <span class="hljs-number">-2e9</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> a : q)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a.x &gt; en)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, en&#125;);<br>            st = a.x;<br>            en = a.y;<br>        &#125;    <br>        <span class="hljs-keyword">else</span> en = <span class="hljs-built_in">max</span>(a.y, en);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, en&#125;);<br>    <br>    q = res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <br>        q.<span class="hljs-built_in">push_back</span>(&#123;l, r&#125;);<br>    &#125;<br>    <br>    <span class="hljs-built_in">merge</span>();<br>    <br>    cout &lt;&lt; q.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>完事啦，简单吧😁😁😁</p><hr><h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><p><strong>离散化的本质，是映射，将间隔很大的点，映射到相邻的数组元素中。减少对空间的需求，也减少计算量。</strong></p><p>看一个例题就会明白了~</p><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。</p><p>现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。</p><p>接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r][l,r] 之间的所有数的和。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 m。</p><p>接下来 n 行，每行包含两个整数 x 和 c。</p><p>再接下来 m 行，每行包含两个整数 l 和 r。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 m 行，每行输出一个询问中所求的区间内数字和。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>−10^9≤x≤10^9<br>1≤n,m≤10^5<br>−10^9≤l≤r≤10^9<br>−10000≤c≤10000</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br>0<br>5<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">3e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> a[N], s[N];<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; alls;<br>vector&lt;PII&gt; add, query;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = alls.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>; <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> l + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">unique</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!i || a[i] != a[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            a[j ++ ] = a[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x, c;<br>        cin &gt;&gt; x &gt;&gt; c;<br>        <br>        add.<span class="hljs-built_in">push_back</span>(&#123;x, c&#125;);<br>        alls.<span class="hljs-built_in">push_back</span>(x);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <br>        query.<span class="hljs-built_in">push_back</span>(&#123;l, r&#125;);<br>        <br>        alls.<span class="hljs-built_in">push_back</span>(l);<br>        alls.<span class="hljs-built_in">push_back</span>(r);<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>());<br>    alls.<span class="hljs-built_in">erase</span>(alls.<span class="hljs-built_in">begin</span>() + <span class="hljs-built_in">unique</span>(alls), alls.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> item : add)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">find</span>(item.first);<br>        a[x] += item.second;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= alls.<span class="hljs-built_in">size</span>(); i ++ ) s[i] = s[i - <span class="hljs-number">1</span>] + a[i];<br><br>    <span class="hljs-comment">// 处理询问</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> item : query)<br>    &#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-built_in">find</span>(item.first), r = <span class="hljs-built_in">find</span>(item.second);<br>        cout &lt;&lt; s[r] - s[l - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="实战："><a href="#实战：" class="headerlink" title="实战："></a>实战：</h2><p><strong>此题来自第十届蓝桥杯省赛C++A/B组,第十届蓝桥杯省赛JAVA A组</strong></p><blockquote><p>给定一棵包含 N 个节点的完全二叉树，树上每个节点都有一个权值，按从上到下、从左到右的顺序依次是 A1,A2,⋅⋅⋅AN，如下图所示：</p><p><img src="https://cdn.acwing.com/media/article/image/2019/12/05/19_2f0cae5817-QQ%E6%88%AA%E5%9B%BE20191205124611.png" alt="完全二叉树.png"></p><p>现在小明要把相同深度的节点的权值加在一起，他想知道哪个深度的节点权值之和最大？</p><p>如果有多个深度的权值和同为最大，请你输出其中最小的深度。</p><p>注：根的深度是 1。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数 N。</p><p>第二行包含 N 个整数 A1,A2,⋅⋅⋅AN。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数代表答案。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10^5<br>−10^5≤Ai≤10^5</p><h4 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br></code></pre></div></td></tr></table></figure></blockquote><p>双指针方法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> tr[N];<br>LL maxv = <span class="hljs-number">-1e18</span>;<br><span class="hljs-keyword">int</span> depth = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; tr[i];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d = <span class="hljs-number">1</span>, i = <span class="hljs-number">1</span>; i &lt;= n; d ++ , i *= <span class="hljs-number">2</span>)<br>    &#123;<br>        LL s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; i + (<span class="hljs-number">1</span> &lt;&lt; d - <span class="hljs-number">1</span>) &amp;&amp; j &lt;= n ; j ++ ) s += tr[j];<br>        <br>        <span class="hljs-keyword">if</span> (s &gt; maxv)<br>        &#123;<br>            depth = d;<br>            maxv = s;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; depth &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>递归方法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lc (u &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rc (u &lt;&lt; 1 | 1)</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> tr[N];<br><span class="hljs-keyword">int</span> n;<br>LL sum[<span class="hljs-number">25</span>];<br><br>LL maxv = <span class="hljs-number">-1e18</span>;<br><span class="hljs-keyword">int</span> res;<br><span class="hljs-keyword">int</span> c;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-keyword">if</span> (u &gt; n) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (t &gt; c) c = t;<br>    sum[t] += tr[u];<br>    <span class="hljs-built_in">dfs</span>(lc, t + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">dfs</span>(rc, t + <span class="hljs-number">1</span>);<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; tr[i];<br> <br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= c; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (maxv &lt; sum[i])<br>        &#123;<br>            res = i;<br>            maxv = sum[i];<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p><strong>此题来自usaco（美国信息学竞赛）的一道入门题目</strong></p><blockquote><p>每天早上 5 点，三名农夫去牛场给奶牛们挤奶。</p><p>现在从 5 点开始按秒计时，第一名农夫在第 300 秒开始给牛挤奶，并在第 1000 秒停止挤奶。</p><p>第二名农夫在第 700 秒开始给牛挤奶，并在第 1200 秒停止挤奶。</p><p>第三名农夫在第 1500 秒开始给牛挤奶，并在第 2100 秒停止挤奶。</p><p>从开始挤奶到挤奶完全结束，这一期间，至少存在一名农夫正在挤奶的连续时间段的长度最长为 900 秒（第 300 秒至第 1200 秒），完全没有任何农夫在挤奶的连续时间段的长度最长为 300 秒（第 1200 秒至第 1500 秒）。</p><p>现在给你 N 名农夫挤 N 头奶牛的工作时间表，请你求出：</p><ol><li>至少存在一名农夫正在挤奶的连续时间段的最长长度。</li><li>没有任何农夫在挤奶的连续时间段的最长长度。</li></ol><p><strong>注意</strong>：本题中给出的所有时间均为时刻（时间点），因此在本题中挤奶区间 [100，200] 和 [201,300] 中间会有长度为 1 秒的间歇时间。</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 N，表示农夫数量。</p><p>接下来 N 行，每行包含两个非负整数 l,r，表示农夫挤奶的开始时刻和结束时刻。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含两个整数，分别表示最长连续挤奶时间以及最长连续无人挤奶时间。</p><h4 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤5000</p><p>1≤l≤r≤10^6</p><h4 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">300 </span><span class="hljs-number">1000</span><br><span class="hljs-symbol">700 </span><span class="hljs-number">1200</span><br><span class="hljs-symbol">1500 </span><span class="hljs-number">2100</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">900 </span><span class="hljs-number">300</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5010</span>;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br>PII q[N];<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-keyword">int</span> max_1, max_2;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i].x &gt;&gt; q[i].y;<br>    <br>    <span class="hljs-built_in">sort</span>(q, q + n);<br>    <br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">-2e9</span>, r = <span class="hljs-number">-2e9</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (r &lt; q[i].x)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(l != <span class="hljs-number">-2e9</span>)<br>            &#123;<br>            max_2 = <span class="hljs-built_in">max</span>(q[i].x - r, max_2);<br>            max_1 = <span class="hljs-built_in">max</span>(r - l, max_1);<br>            r = q[i].x;<br>            &#125;<br>            <br>        l = q[i].x, r = q[i].y;<br>            <br>        &#125;<br>        <span class="hljs-keyword">else</span> r = <span class="hljs-built_in">max</span>(q[i].y, r);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(l != <span class="hljs-number">-2e9</span>) max_1 = <span class="hljs-built_in">max</span>(r - l, max_1);<br>    <br>    cout &lt;&lt; max_1 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; max_2 &lt;&lt; endl;    <br>&#125;<br></code></pre></div></td></tr></table></figure><hr>这节是不是很简单呀，所以双指针和区间合并你们学会了嘛？😁😁😁]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11-18题解</title>
    <link href="/posts/3996583815.html"/>
    <url>/posts/3996583815.html</url>
    
    <content type="html"><![CDATA[<p>11-18号开放实验室题目题解</p><span id="more"></span><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><h2 id="T1："><a href="#T1：" class="headerlink" title="T1："></a>T1：</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N =<span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> ch[<span class="hljs-number">26</span>];<br><span class="hljs-keyword">char</span> str[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt;str;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        ch[str[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        <span class="hljs-keyword">if</span>(ch[str[i]-<span class="hljs-string">&#x27;a&#x27;</span>]==<span class="hljs-number">1</span>)&#123;<br>            cout&lt;&lt;str[i];<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;no&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2:"></a>T2:</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a, a != <span class="hljs-string">&quot;.&quot;</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> len  =  a.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span> (len % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                string s = a.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, i);<br>                string r;<br>                <br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len / i; j ++ ) r += s;<br>                <br>                <span class="hljs-keyword">if</span>(r == a) <br>                &#123;<br>                    ans = i;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; len / ans &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3:"></a>T3:</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">210</span>;<br>string s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; n, n)<br>    &#123;<br>        <span class="hljs-keyword">int</span> ans = N;<br>        <span class="hljs-keyword">int</span> minv = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        &#123;<br>            cin &gt;&gt; s[i];<br>            <span class="hljs-keyword">if</span>(s[i].<span class="hljs-built_in">size</span>() &gt; s[minv].<span class="hljs-built_in">size</span>()) minv = i;<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; maxv;</span><br>        <span class="hljs-keyword">int</span> v = s[minv].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i == minv) <span class="hljs-keyword">continue</span>;<br>            <br>            <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>            <br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = s[i].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; cnt &lt;= v; j -- , cnt ++ ) <span class="hljs-keyword">if</span>(s[i][j] != s[minv][v - cnt]) <span class="hljs-keyword">break</span>;<br><br>            ans = <span class="hljs-built_in">min</span>(ans, cnt);<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = ans - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>        &#123;<br>            cout &lt;&lt; s[minv][v - i];<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开放实验室</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11-18开放实验室</title>
    <link href="/posts/2979515555.html"/>
    <url>/posts/2979515555.html</url>
    
    <content type="html"><![CDATA[<p>用于11-18号开放实验室题目练习</p><span id="more"></span><h1 id="字符串专题"><a href="#字符串专题" class="headerlink" title="字符串专题"></a>字符串专题</h1><p>今天呢是字符串专题，分为easy，medium和hard来出三道题给大家来练手。</p><h2 id="T1（EASY）"><a href="#T1（EASY）" class="headerlink" title="T1（EASY）"></a>T1（EASY）</h2><blockquote><p>给你一个只包含小写字母的字符串。</p><p>请你判断是否存在只在字符串中出现过一次的字符。</p><p>如果存在，则输出满足条件的字符中位置最靠前的那个。</p><p>如果没有，输出 <code>no</code>。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含一个由小写字母构成的字符串。</p><p>数据保证字符串的长度不超过 100000。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出满足条件的第一个字符。</p><p>如果没有，则输出 <code>no</code>。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">abceabcd</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">e</span><br></code></pre></div></td></tr></table></figure></blockquote><h2 id="T2-medium"><a href="#T2-medium" class="headerlink" title="T2 (medium)"></a>T2 (medium)</h2><blockquote><p>给定两个字符串 a 和 b，我们定义 a×b 为他们的连接。</p><p>例如，如果 a=<code>abc</code> 而 b=<code>def</code>， 则 a×b=<code>abcdef</code>。</p><p>如果我们将连接考虑成乘法，一个非负整数的乘方将用一种通常的方式定义：a^0=``(空字符串)，a^(n+1)=a×(a^n)</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含多组测试样例，每组测试样例占一行。</p><p>每组样例包含一个字符串 s，s 的长度不超过 100。</p><p>最后的测试样例后面将是一个点号作为一行。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每一个 s，你需要输出最大的 n，使得存在一个字符串 a，让 s=a^n。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang">abcd<br>aaaa<br>ababab<br>.<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br>4<br>3<br></code></pre></div></td></tr></table></figure></blockquote><h2 id="T3-hard"><a href="#T3-hard" class="headerlink" title="T3(hard)"></a>T3(hard)</h2><blockquote><p>给出若干个字符串，输出这些字符串的最长公共后缀。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>由若干组输入组成。</p><p>每组输入的第一行是一个整数 N。</p><p>N 为 0 时表示输入结束，否则后面会继续有 N 行输入，每行是一个字符串（字符串内不含空白符）。</p><p>每个字符串的长度不超过 200。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，为 N 个字符串的最长公共后缀（可能为空）。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤200</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-number">3</span><br>baba<br>aba<br>cba<br><span class="hljs-number">2</span><br>aa<br>cc<br><span class="hljs-number">2</span><br>aa<br><span class="hljs-selector-tag">a</span><br><span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">ba<br><br><span class="hljs-selector-tag">a</span><br></code></pre></div></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>开放实验室</category>
      
      <category>题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀和，差分</title>
    <link href="/posts/3861384037.html"/>
    <url>/posts/3861384037.html</url>
    
    <content type="html"><![CDATA[<p>本讲义位前缀和，差分讲义，在后期的学习中至关重要</p><span id="more"></span><h1 id="前缀和-amp-差分"><a href="#前缀和-amp-差分" class="headerlink" title="前缀和&amp;差分"></a>前缀和&amp;差分</h1><blockquote><p>前缀和&amp;差分，这俩个到底是什么东西呀？</p></blockquote><p><strong>如果想引出这俩个算法要从俩个场景开始说起：</strong></p><blockquote><p>现在存在这么俩个场景</p><p>你要对区间[l.r]询问sum，你会怎么做？</p><p>你要对区间[l,r]区间都增加（减少）一个数你会怎么做？</p></blockquote><p><strong>我想你脑子里的那个算法是不是o(n)的呀？</strong></p><p>前缀和&amp;差分可以用o（n）处理后每步o(1)的处理就可以对他进行这俩步操作，是不是很强呀？😁😁</p><h2 id="思想？"><a href="#思想？" class="headerlink" title="思想？"></a>思想？</h2><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>前缀和的思想就是，处理出一个前缀和数组：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=nums;i++)&#123;a[i]=a[i<span class="hljs-number">-1</span>]+q[i];&#125;<br></code></pre></div></td></tr></table></figure><p>然后每一项就代表着是所有前面项的和，那么要求[l,r]是不是就很简单了呢？</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">s[r]-s[l - <span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><p>这就可以了呢~</p><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><p>差分思想就是，处理出一个差分数组：</p><p>这个差分数组满足什么性质呢？</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">b[i] = a[i] - a[i - <span class="hljs-number">1</span>];<br></code></pre></div></td></tr></table></figure><p>其实容易就会发现差分数组求完前缀和就是原数组，前缀和数组求完差分就是原数组。</p><p>差分这一步后你就会发现想在区间[l,r]内增减一个数只需：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">b[l] += x, b[r + <span class="hljs-number">1</span>] -= x<br></code></pre></div></td></tr></table></figure><p>这样就可以了呢~</p><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><h3 id="前缀和："><a href="#前缀和：" class="headerlink" title="前缀和："></a>前缀和：</h3><blockquote><p>输入一个长度为 n 的整数序列。</p><p>接下来再输入 m 个询问，每个询问输入一对 l,r</p><p>对于每个询问，输出原序列中从第 l 个数到第 r 个数的和。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 m。</p><p>第二行包含 n 个整数，表示整数数列。</p><p>接下来 m 行，每行包含两个整数 l 和 r，表示一个询问的区间范围。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 m 行，每行输出一个询问的结果。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤l≤r≤n<br>1≤n,m≤100000<br>−1000≤数列中元素的值≤1000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>6<br>10<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> s[N];<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v;<br>        cin &gt;&gt; v;<br>        s[i] = s[i - <span class="hljs-number">1</span>] + v;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <br>        cout &lt;&lt; s[r] - s[l - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>是不是太简单啦，还没完呢<del>，前缀和还有二维的呀</del></p><hr><h3 id="二维前缀和："><a href="#二维前缀和：" class="headerlink" title="二维前缀和："></a>二维前缀和：</h3><blockquote><p>输入一个 n 行 m 列的整数矩阵，再输入 qq 个询问，每个询问包含四个整数 x1,y1,x2,y2表示一个子矩阵的左上角坐标和右下角坐标。</p><p>对于每个询问输出子矩阵中所有数的和。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 n，m，q</p><p>接下来 n 行，每行包含 m 个整数，表示整数矩阵。</p><p>接下来 q 行，每行包含四个整数 x1,y1,x2,y2，表示一组询问。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 q 行，每行输出一个询问的结果。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤1000<br>1≤q≤200000<br>1≤x1≤x2≤n<br>1≤y1≤y2≤m<br>−1000≤矩阵内元素的值≤1000</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">8</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">17<br>27<br>21<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">int</span> n, m, k;<br><span class="hljs-keyword">int</span> s[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">int</span> v;<br>            cin &gt;&gt; v;<br>            <br>            s[i][j] = s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + v;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (k -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x1, y1, x2, y2;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        <br>        cout &lt;&lt; (s[x2][y2] - s[x1 - <span class="hljs-number">1</span>][y2] - s[x2][y1 - <span class="hljs-number">1</span>] + s[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>]) &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="差分："><a href="#差分：" class="headerlink" title="差分："></a>差分：</h3><blockquote><p>输入一个长度为 n 的整数序列。</p><p>接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r][l,r] 之间的每个数加上 c。</p><p>请你输出进行完所有操作后的序列。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 m。</p><p>第二行包含 n 个整数，表示整数序列。</p><p>接下来 m 行，每行包含三个整数 l，r，c，表示一个操作。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含 nn 个整数，表示最终序列。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤100000<br>1≤l≤r≤n<br>−1000≤c≤1000<br>−1000≤整数序列中元素的值≤1000</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    q[l] += x;<br>    q[r + <span class="hljs-number">1</span>] -= x; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v;<br>        cin &gt;&gt; v;<br>        <br>        <span class="hljs-built_in">add</span>(i, i, v);<br>    &#125; <br>    <br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        q[i] += q[i - <span class="hljs-number">1</span>];<br>        cout &lt;&lt; q[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个还是简单的，先别高兴太早，差分也有二维的：</p><hr><h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><blockquote><p>输入一个 n 行 m 列的整数矩阵，再输入 q 个操作，每个操作包含五个整数 x1,y1,x2,y2,c，其中 (x1,y1)和 (x2,y2） 表示一个子矩阵的左上角坐标和右下角坐标。</p><p>每个操作都要将选中的子矩阵中的每个元素的值加上 c。</p><p>请你将进行完所有操作后的矩阵输出。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n,m,q</p><p>接下来n 行，每行包含 m 个整数，表示整数矩阵。</p><p>接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c表示一个操作。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤1000<br>1≤q≤100000<br>1≤x1≤x2≤n<br>1≤y1≤y2≤m<br>−1000≤c≤1000<br>−1000≤矩阵内元素的值≤1000</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">int</span> s[N][N];<br><span class="hljs-keyword">int</span> n, m, k;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x1, <span class="hljs-keyword">int</span> y1, <span class="hljs-keyword">int</span> x2, <span class="hljs-keyword">int</span> y2, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    s[x1][y1] += c;<br>    s[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += c;<br>    s[x2 + <span class="hljs-number">1</span>][y1] -= c;<br>    s[x1][y2 + <span class="hljs-number">1</span>] -= c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">int</span> v;<br>            cin &gt;&gt; v;<br>            <span class="hljs-built_in">add</span>(i, j, i, j, v);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (k -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x1, y1, x2, y2, v;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; v;<br>        <span class="hljs-built_in">add</span>(x1, y1, x2, y2, v);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>        &#123;<br>            s[i][j] += s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]; <br>            cout &lt;&lt; s[i][j] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="实战："><a href="#实战：" class="headerlink" title="实战："></a>实战：</h2><p>‘<strong>此题来自HNOI（湖南省选题）</strong></p><blockquote><p>地图上有 N 个目标，用整数 Xi,Yi 表示目标在地图上的位置，每个目标都有一个价值 Wi。</p><p><strong>注意</strong>：不同目标可能在同一位置。</p><p>现在有一种新型的激光炸弹，可以摧毁一个包含 R×R 个位置的正方形内的所有目标。</p><p>激光炸弹的投放是通过卫星定位的，但其有一个缺点，就是其爆炸范围，即那个正方形的边必须和 x，y 轴平行。</p><p>求一颗炸弹最多能炸掉地图上总价值为多少的目标。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入正整数 N 和 R，分别代表地图上的目标数目和正方形的边长，数据用空格隔开。</p><p>接下来 N 行，每行输入一组数据，每组数据包括三个整数 Xi,Yi,Wi分别代表目标的 x 坐标，y 坐标和价值，数据用空格隔开。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个正整数，代表一颗炸弹最多能炸掉地图上目标的总价值数目。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>0≤R≤10^9<br>0&lt;N≤10000<br>0≤Xi,Yi≤5000<br>0≤Wi≤1000</p><h4 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5000</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> q[N][N];<br><span class="hljs-keyword">int</span> cnt, r;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; cnt &gt;&gt; r;<br>    <br>    r = <span class="hljs-built_in">min</span>(<span class="hljs-number">5001</span>, r);<br>    <br>    <span class="hljs-keyword">int</span> n = r, m = r;<br>    <br>    <br>    <span class="hljs-keyword">while</span> (cnt -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x, y, v;<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; v;<br>        <br>        x ++ , y ++ ; <br>        <br>        n = <span class="hljs-built_in">max</span>(x, n);<br>        m = <span class="hljs-built_in">max</span>(y, m);<br>        <br>        q[x][y] += v;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>        &#123;<br>            q[i][j] += q[i - <span class="hljs-number">1</span>][j] + q[i][j - <span class="hljs-number">1</span>] - q[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = r; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = r; j &lt;= m; j ++ )<br>        &#123;<br>            res = <span class="hljs-built_in">max</span>(res, q[i][j] + q[i - r][j - r] - q[i - r][j] - q[i][j - r]);<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p><strong>此题来自第八届蓝桥杯省赛c++/java的b组</strong></p><blockquote><p>给定一个长度为 NN 的数列，A1,A2,…AN如果其中一段连续的子序列 Ai,Ai+1,…Aj之和是 K 的倍数，我们就称这个区间 [i,j] 是 K 倍区间。</p><p>你能求出数列中总共有多少个 K 倍区间吗？</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 N 和 K。</p><p>以下 N 行每行包含一个整数 Ai。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，代表 K 倍区间的数目。</p><h4 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N,K≤100000<br>1≤Ai≤100000</p><h4 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">6<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br>LL s[N];<br><span class="hljs-keyword">int</span> cnt[N];<br><br><span class="hljs-keyword">int</span> n, k; <br>LL res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v;<br>        cin &gt;&gt; v;<br>        <br>        s[i] = s[i - <span class="hljs-number">1</span>] + v;<br>    &#125;<br>    <br>    cnt[<span class="hljs-number">0</span>] ++ ;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        res += cnt[s[i] % k];<br>        cnt[s[i] % k] ++ ;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>这一节的知识代码量是不大的，但是要非常的注重理解，因为这类题理解难度上有一些难度，所以要注重理解。多去练习，就会变得熟练😊😊😊</p><p>此节作为之后算法内容的基础，对于以后的学习由至关重要的作用，一定要理解哈~</p><hr><p>所以，前缀和and差分你都学会了吗😁😁😁😁</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高精度</title>
    <link href="/posts/1237449692.html"/>
    <url>/posts/1237449692.html</url>
    
    <content type="html"><![CDATA[<p>本文将主要分享c++高精度的写法，也会附带java的高精度写法</p><span id="more"></span><h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><p>有人看到我讲c++高精度，可能会说：</p><blockquote><p>你在讲个什么东西呀？谁写高精还用c++？<strong>真是害人不浅</strong>，赶紧找个班上吧</p></blockquote><hr><p>说一说我的想法吧：</p><p><code>即使之后的我们不会使用c++去写高精，我为啥还要讲呢。是因为的确写高精的coding思想和一些技巧的处理，对初入算法的人来说会有一个指导作用，并且对coding能力也有提高，这也是我讲c++高精的理由。</code></p><hr><p><strong>好了，解释清楚了为啥要讲这个东西，那么我就该说这东西有啥用了。</strong></p><blockquote><p>大家会发现int类型（甚至longlong）也就最多只能表示出10位数字（20位）而已，这就对我们这种身价（100位数）的人存钱精度就不够了，对吧？😁😁</p><p>这时大家会想，像这种大整数怎么去记录呢？</p><p>至此高精度算法横空出世，这也就是高精度的来历</p></blockquote><hr><h2 id="写高精度的思想？"><a href="#写高精度的思想？" class="headerlink" title="写高精度的思想？"></a>写高精度的思想？</h2><blockquote><p>其实这个计算大整数的思想就是我们<strong>小学</strong>列竖式的思想，利用数组来存储每一位数，对每一位数逐个进行加减或乘除，进位，从而算出最后的结果存储在数组中，最后输出。</p></blockquote><p>其实很简单啦~，大家一起看看例题和代码吧😀😀</p><hr><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><h3 id="高精度加法："><a href="#高精度加法：" class="headerlink" title="高精度加法："></a><strong>高精度加法</strong>：</h3><blockquote><p>给定两个正整数（不含前导 0），计算它们的和。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共两行，每行包含一个整数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含所求的和。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤整数长度≤100000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">12<br>23<br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">35<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; A, B;<br><br>string a, b;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x % p + p) % p;<br>&#125;<br><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; a, vector&lt;<span class="hljs-keyword">int</span>&gt; b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a.<span class="hljs-built_in">size</span>() &lt; b.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(b, a);<br>    <br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; c;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += a[i];<br>        <span class="hljs-keyword">if</span> (i &lt; b.<span class="hljs-built_in">size</span>()) t += b[i];<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>      <br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">add</span>(A, B);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        cout &lt;&lt; C[i];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br>        Scanner scanner =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        BigInteger a=scanner.nextBigInteger();<br>        BigInteger b=scanner.nextBigInteger();<br>        System.out.print(a.add(b).toString());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="高精度减法："><a href="#高精度减法：" class="headerlink" title="高精度减法："></a>高精度减法：</h3><blockquote><p>给定两个正整数（不含前导 0），计算它们的差，计算结果可能为负数。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>共两行，每行包含一个整数。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含所求的差。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤整数长度≤10^5</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">32<br>11<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">21<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; A, B;<br>string a, b;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;a, vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n = a.<span class="hljs-built_in">size</span>(), m = b.<span class="hljs-built_in">size</span>();<br>    <br>    <span class="hljs-keyword">if</span> (n != m) <span class="hljs-keyword">return</span> n &gt; m;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i] != b[i]) <span class="hljs-keyword">return</span> a[i] &gt; b[i];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x % p + p) % p;<br>&#125;<br><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;a, vector&lt;<span class="hljs-keyword">int</span>&gt; b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; C;<br>    <br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t = a[i] - t;<br>        <br>        <span class="hljs-keyword">if</span> (i &lt; b.<span class="hljs-built_in">size</span>()) t -= b[i];<br>        <br>        C.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">mod</span>(t, <span class="hljs-number">10</span>));<br>    <br>        <span class="hljs-keyword">if</span>(t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <br>    vector&lt;<span class="hljs-keyword">int</span>&gt; C;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">cmp</span>(A, B)) C = <span class="hljs-built_in">sub</span>(A, B);<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        C = <span class="hljs-built_in">sub</span>(B, A);<br>        cout &lt;&lt; <span class="hljs-string">&#x27;-&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) cout &lt;&lt; C[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        BufferedReader reader=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        String sa=reader.readLine();<br>        String sb=reader.readLine();<br>        BigInteger a=<span class="hljs-keyword">new</span> BigInteger(sa);<br>        BigInteger b=<span class="hljs-keyword">new</span> BigInteger(sb);<br>        System.out.print(a.subtract(b).toString());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="高精度乘法："><a href="#高精度乘法：" class="headerlink" title="高精度乘法："></a>高精度乘法：</h3><p><strong>在实战中，我们几乎用不到（99.9999%）高精度 * 高精度，几乎都是高精度 * 低精度， 所以也只讲授后者</strong></p><blockquote><p>给定两个非负整数（不含前导 0） A 和 B，请你计算 A×B 的值。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>共两行，第一行包含整数 AA，第二行包含整数 B。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含 A×B 的值。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤A的长度≤100000<br>0≤B≤10000</p><p>输入样例：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br>3<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">6<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; A, B;<br><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n = a.<span class="hljs-built_in">size</span>();<br>    <br>    vector&lt;<span class="hljs-keyword">int</span>&gt; c;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        t += a[i] * b;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(t) c.<span class="hljs-built_in">push_back</span>(t);<br>    <br>    <span class="hljs-keyword">while</span> (c.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; c.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) c.<span class="hljs-built_in">pop_back</span>();<br>    <br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a;<br>    <span class="hljs-keyword">int</span> b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">mul</span>(A, b);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) cout &lt;&lt; C[i];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        BufferedReader reader=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        System.out.print(<span class="hljs-keyword">new</span> BigInteger(reader.readLine()).multiply(<span class="hljs-keyword">new</span> BigInteger(reader.readLine())).toString());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="高精度除法："><a href="#高精度除法：" class="headerlink" title="高精度除法："></a>高精度除法：</h3><p><strong>在实战中，我们几乎用不到（99.9999%）高精度 / 高精度，几乎都是高精度 / 低精度， 所以也只讲授后者</strong></p><blockquote><p>给定两个非负整数（不含前导 0） A，B，请你计算 A/B 的商和余数。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>共两行，第一行包含整数 A，第二行包含整数 B。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>共两行，第一行输出所求的商，第二行输出所求余数。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤A的长度≤100000<br>1≤B≤100001≤B≤10000,<br>B 一定不为 0</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">7<br>2<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br>1<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">divide</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n = a.<span class="hljs-built_in">size</span>();<br>    <br>    vector&lt;<span class="hljs-keyword">int</span>&gt; c; <br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + a[i];<br>        c.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <br>    <span class="hljs-built_in">reverse</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-keyword">while</span> (c.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; c.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) c.<span class="hljs-built_in">pop_back</span>();<br>    <br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; A;<br>    <span class="hljs-keyword">int</span> b;<br>    <br>    cin &gt;&gt; a &gt;&gt; b;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <br>    <span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">divide</span>(A, b, r);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) cout &lt;&lt; C[i];<br>    <br>    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br>        Scanner scanner =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        BigInteger a=scanner.nextBigInteger();<br>        BigInteger b=scanner.nextBigInteger();<br>        BigInteger []d=a.divideAndRemainder(b);<br>        System.out.print(d[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;\n&quot;</span>+d[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>java写高精以后也是会教的，现在的目标是大家的编程能力提升上来，所以大家要多写几遍高精度的加减乘除呀，毕竟里面的几个技巧会在之后很多类型的算法和题目上会用到。</p><p>完事咯，记得多熟悉熟悉高精度加减乘除的模板，多练习呀~😀😀😀</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快排，归并，二分</title>
    <link href="/posts/1033444265.html"/>
    <url>/posts/1033444265.html</url>
    
    <content type="html"><![CDATA[<p>本讲义是琴理工作室算法组第一节课讲义，将讲述快排，归并排序和二分</p><span id="more"></span><h1 id="第一次课"><a href="#第一次课" class="headerlink" title="第一次课"></a>第一次课</h1><h2 id="快排-amp-归并"><a href="#快排-amp-归并" class="headerlink" title="快排&amp;归并"></a>快排&amp;归并</h2><p>因为之前有写过归并和快排，就跳过咯~ <a href="https://jxj777.top/posts/775143932.html">链接在这</a></p><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><blockquote><p>大家对二分的刻板印象就是，二分只能解决查找问题，在一段序列查找一个特定的数，<strong>其实不然</strong>。</p><p>二分其实可以解决一大类问题，而且二分在算法竞赛中也尤为重要，那么他能解决什么问题呢？</p><p>解决的是<strong>二段性</strong>问题，只要存在二段性那么就可以使用二分来解决。</p></blockquote><hr><h3 id="那啥是二段性呀？"><a href="#那啥是二段性呀？" class="headerlink" title="那啥是二段性呀？"></a>那啥是二段性呀？</h3><p>就是给定一个条件时，俩边呈现俩个状态，且只有这俩个状态。</p><h3 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h3><ul><li>就用二分查找来说吧： 给定一个值供你去寻找，那么这个排好序的左边就是比这个数小，右边就是比它大，这样就整个序列就呈现了二段性。</li><li>或让你在一个只有一个根的函数上寻找根，那么这个根的左右俩侧值相乘小于零，同侧大于零</li><li>等等等等</li></ul><p>二分的应用性真的很广泛，不得不说二分已经成为必须要掌握的一个算法了。</p><h3 id="代码咋写呢："><a href="#代码咋写呢：" class="headerlink" title="代码咋写呢："></a>代码咋写呢：</h3><p>我们的二分又分成<strong>整数二分</strong>和<strong>浮点数二分</strong></p><h4 id="整数二分："><a href="#整数二分：" class="headerlink" title="整数二分："></a>整数二分：</h4><p>整数二分的代码有俩个模板，分别对应着俩个不同情况</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;    <span class="hljs-comment">// check()判断mid是否满足性质</span><br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="浮点数二分："><a href="#浮点数二分：" class="headerlink" title="浮点数二分："></a>浮点数二分：</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">bsearch_3</span><span class="hljs-params">(<span class="hljs-keyword">double</span> l, <span class="hljs-keyword">double</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;   <span class="hljs-comment">// eps 表示精度，取决于题目对精度的要求</span><br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-keyword">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="看看这三个算法的例题吧：（要多加练习鸭）"><a href="#看看这三个算法的例题吧：（要多加练习鸭）" class="headerlink" title="看看这三个算法的例题吧：（要多加练习鸭）"></a>看看这三个算法的例题吧：（要多加练习鸭）</h2><blockquote><p>给定你一个长度为 n 的整数数列。</p><p>请你使用快速排序&amp;归并排序实现对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入共两行，第一行包含整数n。</p><p>第二行包含 n 个整数（所有整数均在 1∼10^9 范围内），表示整个数列。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共一行，包含 n 个整数，表示排好序的数列。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure></blockquote><h4 id="快排版本："><a href="#快排版本：" class="headerlink" title="快排版本："></a>快排版本：</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-keyword">int</span> left = l - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> right = r + <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">int</span> standard = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">while</span> (left &lt; right)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (q[ ++ left] &lt; standard);<br>        <span class="hljs-keyword">while</span> (q[-- right] &gt; standard);<br>        <span class="hljs-keyword">if</span> (left &lt; right) <span class="hljs-built_in">swap</span>(q[left], q[right]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">quickSort</span>(l, right);<br>    <span class="hljs-built_in">quickSort</span>(right + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-built_in">quickSort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cout &lt;&lt; q[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="归并版本："><a href="#归并版本：" class="headerlink" title="归并版本："></a>归并版本：</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> q[N], temp[N];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-built_in">merge_sort</span>(l, mid);<br>    <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);<br>    <br>    <span class="hljs-keyword">int</span> i = l;<br>    <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) temp[t ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            temp[t ++ ] = q[j ++ ];<br>            ans += mid - i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (i &lt;= mid) temp[t ++ ] = q[i ++ ];<br>    <br>    <span class="hljs-keyword">while</span> (j &lt;= r) temp[t ++ ] = q[j ++ ];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j1 = l, j2 = <span class="hljs-number">0</span>; j1 &lt;= r; j1 ++ , j2 ++ )<br>    &#123;<br>        q[j1] = temp[j2];<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cout &lt;&lt; q[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="那快排和归并有啥应用啊？"><a href="#那快排和归并有啥应用啊？" class="headerlink" title="那快排和归并有啥应用啊？"></a>那快排和归并有啥应用啊？</h3><h4 id="快选-快排的应用-：（第k个数）"><a href="#快选-快排的应用-：（第k个数）" class="headerlink" title="快选(快排的应用)：（第k个数）"></a>快选(快排的应用)：（第k个数）</h4><blockquote><p>给定一个长度为 n 的整数数列，以及一个整数 k，请用快速选择算法求出数列从小到大排序后的第 k 个数。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 k。</p><p>第二行包含 n 个整数（所有整数均在 1∼10^9 范围内），表示整数数列。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示数列的第 k 小数。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000<br>1≤k≤n</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n, k;<br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">quickSe</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span> q[k];<br>    <br>    <span class="hljs-keyword">int</span> left = l - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> right = r + <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">int</span> standard = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">while</span> (left &lt; right)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (q[ ++ left] &lt; standard);<br>        <span class="hljs-keyword">while</span> (q[ -- right] &gt; standard);<br>        <span class="hljs-keyword">if</span>(left &lt; right) <span class="hljs-built_in">swap</span>(q[left], q[right]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(k &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-built_in">quickSe</span>(right + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">quickSe</span>(l, right);<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; q[i];<br>    <br>    cout &lt;&lt; <span class="hljs-built_in">quickSe</span>(<span class="hljs-number">1</span>, n) &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="求逆序对（归并的应用）："><a href="#求逆序对（归并的应用）：" class="headerlink" title="求逆序对（归并的应用）："></a>求逆序对（归并的应用）：</h4><blockquote><p>给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。</p><p>逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i&lt;j且 a[i]&gt;a[j]，则其为一个逆序对；否则不是。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n，表示数列的长度。</p><p>第二行包含 n 个整数，表示整个数列。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示逆序对的个数。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000，<br>数列中的元素的取值范围 [1,10^9]</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">6</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">5<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> q[N], temp[N];<br><span class="hljs-keyword">int</span> n;<br>LL ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-built_in">merge_sort</span>(l, mid);<br>    <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);<br>    <br>    <span class="hljs-keyword">int</span> i = l;<br>    <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) temp[t ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            temp[t ++ ] = q[j ++ ];<br>            ans += mid - i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (i &lt;= mid) temp[t ++ ] = q[i ++ ];<br>    <br>    <span class="hljs-keyword">while</span> (j &lt;= r) temp[t ++ ] = q[j ++ ];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j1 = l, j2 = <span class="hljs-number">0</span>; j1 &lt;= r; j1 ++ , j2 ++ )<br>    &#123;<br>        q[j1] = temp[j2];<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="再来看看二分的例题吧："><a href="#再来看看二分的例题吧：" class="headerlink" title="再来看看二分的例题吧："></a>再来看看二分的例题吧：</h3><p><strong>先来俩简单的</strong></p><h4 id="整数二分的："><a href="#整数二分的：" class="headerlink" title="整数二分的："></a>整数二分的：</h4><blockquote><p>给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。</p><p>对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n 和 q，表示数组长度和询问个数。</p><p>第二行包含 n 个整数（均在 1∼10000 范围内），表示完整数组。</p><p>接下来 q 行，每行包含一个整数 k，表示一个询问元素。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000<br>1≤q≤10000<br>1≤k≤10000</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">3 4<br>5 5<br><span class="hljs-string">-1</span> <span class="hljs-string">-1</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v;<br>        cin &gt;&gt; v;<br>        <br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> r = n - <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">while</span> (l &lt; r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (q[mid] &gt;= v) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> left = l;<br>        <br>        <span class="hljs-keyword">if</span> (q[l] != v)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <br>        l = <span class="hljs-number">0</span>;<br>        r = n;<br>        <br>        <span class="hljs-keyword">while</span> (l &lt; r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (q[mid] &gt; v) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        cout &lt;&lt; left &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; l - <span class="hljs-number">1</span> &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="浮点数二分的："><a href="#浮点数二分的：" class="headerlink" title="浮点数二分的："></a>浮点数二分的：</h4><blockquote><p>给定一个浮点数 n，求它的三次方根。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含一个浮点数 n。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个浮点数，表示问题的解。</p><p>注意，结果保留 6 位小数。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>−10000≤n≤10000</p><h4 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1000</span>.<span class="hljs-number">00</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">10</span>.<span class="hljs-number">000000</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-8</span>;<br><br><span class="hljs-keyword">double</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">double</span> l = <span class="hljs-number">-10000</span>;<br>    <span class="hljs-keyword">double</span> r = <span class="hljs-number">10000</span>;<br>    <br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-keyword">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <br>        <span class="hljs-keyword">if</span> (mid * mid * mid &lt; n) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6lf&quot;</span>, l);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="看俩道稍微有点难度的二分题吧"><a href="#看俩道稍微有点难度的二分题吧" class="headerlink" title="看俩道稍微有点难度的二分题吧"></a>看俩道稍微有点难度的二分题吧</h3><p>说是难点，就只是在题目的基础上加了个背景，说人话就是不是裸题了hh~</p><h4 id="这道来自蓝桥杯第八届A-B组真题"><a href="#这道来自蓝桥杯第八届A-B组真题" class="headerlink" title="这道来自蓝桥杯第八届A/B组真题"></a>这道来自蓝桥杯第八届A/B组真题</h4><blockquote><p>儿童节那天有 K 位小朋友到小明家做客。</p><p>小明拿出了珍藏的巧克力招待小朋友们。</p><p>小明一共有 N 块巧克力，其中第 i 块是 Hi×Wi 的方格组成的长方形。</p><p>为了公平起见，小明需要从这 N 块巧克力中切出 K 块巧克力分给小朋友们。</p><p>切出的巧克力需要满足：</p><ol><li>形状是正方形，边长是整数</li><li>大小相同</li></ol><p>例如一块 6×5 的巧克力可以切出 6 块 2×2的巧克力或者 2 块 3×3 的巧克力。</p><p>当然小朋友们都希望得到的巧克力尽可能大，你能帮小明计算出最大的边长是多少么？</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 N 和 K。</p><p>以下 N 行每行包含两个整数 Hi 和 Wi。</p><p>输入保证每位小朋友至少能获得一块 1×1 的巧克力。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出切出的正方形巧克力最大可能的边长。</p><h4 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N,K≤10^5<br>1≤Hi,Wi≤10^5</p><h4 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br><span class="hljs-keyword">int</span> n, k, area;<br>PII q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> mid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        res += (q[i].x / mid) * (q[i].y / mid);<br>     &#125;<br>     <br>     <span class="hljs-keyword">return</span> res &gt;= k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> h, w;<br>        cin &gt;&gt; h &gt;&gt; w;<br>        <br>        q[i] = &#123;h, w&#125;;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = <span class="hljs-number">1e5</span>;<br>    <br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    cout &lt;&lt; l &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="再来到今日头条2019的面试题吧"><a href="#再来到今日头条2019的面试题吧" class="headerlink" title="再来到今日头条2019的面试题吧~"></a>再来到今日头条2019的面试题吧~</h4><blockquote><p>机器人正在玩一个古老的基于 DOS 的游戏。</p><p>游戏中有 N+1 座建筑——从 0 到 N 编号，从左到右排列。</p><p>编号为 0 的建筑高度为 0 个单位，编号为 i 的建筑高度为 H(i) 个单位。</p><p>起初，机器人在编号为 0 的建筑处。</p><p>每一步，它跳到下一个（右边）建筑。</p><p>假设机器人在第 k 个建筑，且它现在的能量值是 E，下一步它将跳到第 k+1 个建筑。</p><p>如果 H(k+1)&gt;E，那么机器人就失去 H(k+1)−E 的能量值，否则它将得到 E−H(k+1) 的能量值。</p><p>游戏目标是到达第 N 个建筑，在这个过程中能量值不能为负数个单位。</p><p>现在的问题是机器人至少以多少能量值开始游戏，才可以保证成功完成游戏？</p><h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入整数 N。</p><p>第二行是 N 个空格分隔的整数，H(1),H(2),…,H(N) 代表建筑物的高度。</p><h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示所需的最少单位的初始能量值上取整后的结果。</p><h4 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N,H(i)≤10^5</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">4</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure><h4 id="输入样例3："><a href="#输入样例3：" class="headerlink" title="输入样例3："></a>输入样例3：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> h[N];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        x = <span class="hljs-number">2</span> * x - h[i];<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// if (x &gt;= 1e5) return true;</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; h[i];<br>    <br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    cout &lt;&lt; l &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>完事咯，记得多熟悉熟悉模板，多练习呀~😀😀😀</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用用法</title>
    <link href="/posts/978741524.html"/>
    <url>/posts/978741524.html</url>
    
    <content type="html"><![CDATA[<p>本文分享琴理工作室算法组git教学</p><span id="more"></span><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>git本质上来讲其实是树状结构，但很多地方讲的时候只讲命令及其用法，显得就很难理解。</p><p>git是版本管理工具，有时候会迭代，会更新，会回滚，所以就会有这样一种工具</p><p>git最好的一个特点也是可以多人合作</p><h2 id="git基本概念"><a href="#git基本概念" class="headerlink" title="git基本概念"></a>git基本概念</h2><ul><li>工作区：仓库的目录。工作区是独立于各个分支的。</li><li>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。</li><li>版本库：存放所有已经提交到本地仓库的代码版本</li><li>版本结构：树结构，树中每个节点代表一个代码版本。</li></ul><h2 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h2><p><code>git config -- global user.name xxx</code></p><p><code>git config --global user.email xxxxxx</code></p><p>创建一个文件夹里</p><p><code>git init</code> 创建一个仓库</p><p> <code>git status</code> 查看状态</p><p><code>git commit -m &quot;填写你的注释&quot;</code></p><p><code>git diff</code> 工作区文件和暂存区文件的区别</p><p><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉</p><p><code>git restore --staged</code> 将文件从暂存区撤出，但不会撤销文件的更改<br><code>git resore</code> 将不在暂存区的文件撤销更改 (不仅可以把修改回滚掉，删除也可以)</p><p><code>git log</code>查看当前分支的所有版本：<code>git log --pretty=online</code></p><p><code>git reflog</code>：查看HEAD指针的移动历史（包括被回滚的版本）</p><p>reflog 和log 还是有不同的地方的– reflog记录你所有移动的记录，log记录你从源头到head的记录</p><ul><li><p><code>git reset --hard HEAD^ </code>或 <code>git reset --hard HEAD~</code>：将代码库回滚到上一个版本</p><ul><li>git reset –hard HEAD^^：往上回滚两次，以此类推、</li><li>git reset –hard HEAD~100：往上回滚100个版本</li><li>git reset –hard 版本号：回滚到某一特定版本</li></ul></li><li><p><code>git push -u</code> (第一次需要-u以后不需要)：将当前分支推送到远程仓库</p><ul><li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li></ul></li></ul><p><code>git remote add origin git@git.gitee.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库(后面那一串就是仓库地址)</p><p><code>git checkout -b branch_name</code>：创建并切换到branch_name这个分支</p><p><code>git branch</code>：查看所有分支和当前所处分支<br><code>git checkout branch_name</code>：切换到branch_name这个分支<br><code>git merge branch_name</code>：将分支branch_name合并到当前分支上<br><code>git branch -d branch_name</code>：删除本地仓库的branch_name分支</p><p><code>git push --set-upstream origin branch_name</code>：设置本地的branch_name分支对应远程仓库的branch_name分支<br><code>git push -d origin branch_name</code>：删除远程仓库的branch_name分支</p><p><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的branch_name1分支与本地的branch_name2分支对应<br><code>git checkout -t origin/branch_name</code> 将远程的branch_name分支拉取到本地</p><hr><h3 id="关于stash"><a href="#关于stash" class="headerlink" title="关于stash"></a>关于stash</h3><p><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中<br><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素<br><code>git stash drop</code>：删除栈顶存储的修改<br><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素<br><code>git stash list</code>：查看栈中所有元素</p><hr><p><strong>这些东西足够在之后的学习和工作中使用了，一般不会出现脱离这些命令的场景</strong></p><hr><p>完结撒花~😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>常用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机工具</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11-10题解</title>
    <link href="/posts/3721939424.html"/>
    <url>/posts/3721939424.html</url>
    
    <content type="html"><![CDATA[<p>11-10号开放实验室题目题解</p><span id="more"></span><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p><strong>没啥难度很大的地方，就是要判断一下闰年就可以了</strong></p><h2 id="T1："><a href="#T1：" class="headerlink" title="T1："></a>T1：</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> months[<span class="hljs-number">13</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br><span class="hljs-keyword">int</span> week[<span class="hljs-number">7</span>];<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">int</span> year = <span class="hljs-number">1900</span>;<br>    <span class="hljs-keyword">int</span> days = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i ++ )<br>        &#123;<br>        week[(days + <span class="hljs-number">12</span>) % <span class="hljs-number">7</span>] ++ ;<br>        days += months[i];<br>        <br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)<br>            days ++ ;<br>        &#125;<br>        &#125;<br>         year ++ ;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">5</span>; i &lt; <span class="hljs-number">7</span>; i ++ , j++ )<br>    &#123;<br>        cout &lt;&lt; week[j % <span class="hljs-number">7</span>] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2:"></a>T2:</h2><p><strong>因为一共就9999个年份，都枚举一遍就可以了</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> date1, date2;<br><span class="hljs-keyword">int</span> ans;<br><br><span class="hljs-keyword">int</span> months[<span class="hljs-number">13</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> year = x / <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">int</span> month = x % <span class="hljs-number">10000</span> / <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">int</span> day = x % <span class="hljs-number">100</span>;<br>    <br>    <span class="hljs-keyword">if</span> (month &gt; <span class="hljs-number">12</span> || !month) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (day == <span class="hljs-number">0</span> || month != <span class="hljs-number">2</span> &amp;&amp; day &gt; months[month]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-keyword">if</span> (month == <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span> || year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> day &lt;= <span class="hljs-number">29</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> day &lt;= <span class="hljs-number">28</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; date1 &gt;&gt; date2;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1000</span>; i &lt; <span class="hljs-number">10000</span>; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = i;<br>        <span class="hljs-keyword">int</span> be = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (t)<br>        &#123;<br>            be = be * <span class="hljs-number">10</span> + t % <span class="hljs-number">10</span>;<br>            t /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> r = i * <span class="hljs-number">10000</span> + be;<br>        <br>        <span class="hljs-keyword">if</span> (r &lt;= date2 &amp;&amp; r &gt;= date1 &amp;&amp; <span class="hljs-built_in">check</span>(r)) ans ++ ;<br>    &#125;<br>    <br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3:"></a>T3:</h2><p><strong>输入有些难度，可能要仔细观看一下以下代码来学习一下</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_second</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h * <span class="hljs-number">3600</span> + m * <span class="hljs-number">60</span> + s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_time</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string line;<br>    <span class="hljs-built_in">getline</span>(cin, line);<br>    <br>    <span class="hljs-keyword">if</span> (line.<span class="hljs-built_in">back</span>() != <span class="hljs-string">&#x27;)&#x27;</span>) line += <span class="hljs-string">&quot;(+0)&quot;</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; line &lt;&lt; endl;</span><br>    <br>    <span class="hljs-keyword">int</span> h1, m1, s1, h2, m2, s2, d;<br>    <br>    <span class="hljs-built_in">sscanf</span>(line.<span class="hljs-built_in">c_str</span>(), <span class="hljs-string">&quot;%d:%d:%d %d:%d:%d (+%d)&quot;</span>,&amp;h1, &amp;m1, &amp;s1, &amp;h2, &amp;m2, &amp;s2, &amp;d);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_second</span>(h2, m2, s2) - <span class="hljs-built_in">get_second</span>(h1, m1, s1) + d * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span>;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// scanf(&quot;%d&quot;, &amp;n);</span><br>    cin &gt;&gt; n;<br>    string line;<br>    <span class="hljs-built_in">getline</span>(cin, line);<br>    <br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> time = (<span class="hljs-built_in">get_time</span>() + <span class="hljs-built_in">get_time</span>()) / <span class="hljs-number">2</span>;<br>        <br>        <span class="hljs-keyword">int</span> hour = time / <span class="hljs-number">3600</span>;<br>        <span class="hljs-keyword">int</span> minute = time % <span class="hljs-number">3600</span> / <span class="hljs-number">60</span>;<br>        <span class="hljs-keyword">int</span> second = time % <span class="hljs-number">60</span>;<br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02d:%02d:%02d\n&quot;</span>, hour, minute, second);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开放实验室</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11-10开放实验室题目</title>
    <link href="/posts/332003567.html"/>
    <url>/posts/332003567.html</url>
    
    <content type="html"><![CDATA[<p>用于11-10号开放实验室题目练习</p><span id="more"></span><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul><li><p>今天的题目将围绕着日期处理展开研究，共三道题目，难度会分为easy，medium， hard。</p></li><li><p>请大家观察好数据范围，写出符合时间复杂度的解法即可（也就是说不必最优），请运行时间控制在<strong>1s</strong>左右（也就是说时间复杂度要在<strong>1e8</strong>左右）</p></li></ul><p><strong>那就让我们看看题吧</strong>😁😁</p><h2 id="T1（easy）"><a href="#T1（easy）" class="headerlink" title="T1（easy）"></a>T1（easy）</h2><ul><li><strong>本题是来自usaco（美国信息学竞赛）的一道入门题目，usaco也被大家戏称为关于牛的竞赛（因为题目中只要出现动物就和牛有关hh~）。</strong></li></ul><blockquote><p>十三号星期五真的很不常见吗？</p><p>每个月的十三号是星期五的频率是否比一周中的其他几天低？</p><p>请编写一个程序，计算 N 年内每个月的 13 号是星期日，星期一，星期二，星期三，星期四，星期五和星期六的频率。</p><p>测试的时间段将会开始于 1900年 1 月 1 日，结束于 1900+N−1年 12 月 31日。</p><p>一些有助于你解题的额外信息：</p><ol><li>1900 年 1 月 1 日是星期一。</li><li>在一年中，4 月、6 月、9 月、1 月每个月 30 天，2 月平年 28 天，闰年 29 天，其他月份每个月31天。</li><li>公历年份是 4 的倍数且不是 100 的倍数的年份为闰年，例如 1992 年是闰年，1990 年不是闰年。</li><li>公历年份是整百数并且是 400 的倍数的也是闰年，例如1700年，1800年，1900年，2100年不是闰年，2000年是闰年。</li></ol><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含一个整数 N。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含七个整数，整数之间用一个空格隔开，依次表示星期六，星期日，星期一，星期二，星期三，星期四，星期五在十三号出现的次数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤400</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">20<br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">36 </span><span class="hljs-number">33</span> <span class="hljs-number">34</span> <span class="hljs-number">33</span> <span class="hljs-number">35</span> <span class="hljs-number">35</span> <span class="hljs-number">34</span><br></code></pre></div></td></tr></table></figure></blockquote><hr><h2 id="T2（medium）"><a href="#T2（medium）" class="headerlink" title="T2（medium）"></a>T2（medium）</h2><ul><li><strong>本题来自noip(全国青少年信息学联赛)2016普及组的一道题。</strong></li></ul><blockquote><p>在日常生活中，通过年、月、日这三个要素可以表示出一个唯一确定的日期。</p><p>牛牛习惯用 8 位数字表示一个日期，其中，前 4 位代表年份，接下来 2 位代表月份，最后 2 位代表日期。</p><p>显然：一个日期只有一种表示方法，而两个不同的日期的表示方法不会相同。</p><p>牛牛认为，一个日期是回文的，当且仅当表示这个日期的 8 位数字是回文的。</p><p>现在，牛牛想知道：在他指定的两个日期之间（包含这两个日期本身），有多少个真实存在的日期是回文的。</p><p>一个 8 位数字是回文的，当且仅当对于所有的 i（1≤i≤8) 从左向右数的第 ii 个数字和第 9−i 个数字（即从右向左数的第 i 个数字）是相同的。</p><p>例如：</p><ul><li>对于 2016 年 11 月 19 日，用 8 位数字20161119 表示，它不是回文的。</li><li>对于 2010 年 1 月 2 日，用 8 位数字 20100102 表示，它是回文的。</li><li>对于 2010 年 10 月 2 日，用 8 位数字 20101002 表示，它不是回文的。</li></ul><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包括两行，每行包括一个 8 位数字。</p><p>第一行表示牛牛指定的起始日期 date1，第二行表示牛牛指定的终止日期 date2。保证 date1 和 date2 都是真实存在的日期，且年份部分一定为 4 位数字，且首位数字不为 0。</p><p>保证 date1 一定不晚于 date2。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共一行，包含一个整数，表示在 date1 和 date2 之间，有多少个日期是回文的。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">20110101</span><br><span class="hljs-number">20111231</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br></code></pre></div></td></tr></table></figure></blockquote><hr><h2 id="T3（hard）"><a href="#T3（hard）" class="headerlink" title="T3（hard）"></a>T3（hard）</h2><ul><li><strong>此题来自第九届蓝桥杯c++/javaA组的一道题，请处理好输入输出😊😊</strong></li></ul><blockquote><p>小 h 前往美国参加了蓝桥杯国际赛。</p><p>小 h 的女朋友发现小 h 上午十点出发，上午十二点到达美国，于是感叹到“现在飞机飞得真快，两小时就能到美国了”。</p><p>小 h 对超音速飞行感到十分恐惧。</p><p>仔细观察后发现飞机的起降时间都是当地时间。</p><p>由于北京和美国东部有 12 小时时差，故飞机总共需要 14 小时的飞行时间。</p><p>不久后小 h 的女朋友去中东交换。</p><p>小 h 并不知道中东与北京的时差。</p><p>但是小 h 得到了女朋友来回航班的起降时间。</p><p>小 h 想知道女朋友的航班飞行时间是多少。</p><p>对于一个可能跨时区的航班，给定来回程的起降时间。</p><p>假设飞机来回飞行时间相同，求飞机的飞行时间。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个输入包含多组数据。</p><p>输入第一行为一个正整数 T，表示输入数据组数。</p><p>每组数据包含两行，第一行为去程的起降时间，第二行为回程的起降时间。</p><p>起降时间的格式如下:</p><ol><li>h1:m1:s1 h2:m2:s2</li><li>h1:m1:s1 h3:m3:s3 (+1)</li><li>h1:m1:s1 h4:m4:s4 (+2)</li></ol><p>第一种格式表示该航班在<strong>当地</strong>时间h1时m1分s1秒起飞，在<strong>当地</strong>时间<strong>当日</strong>h2时m2分s2秒降落。</p><p>第二种格式表示该航班在<strong>当地</strong>时间h1时m1分s1秒起飞，在<strong>当地</strong>时间<strong>次日</strong>h2时m2分s2秒降落。</p><p>第三种格式表示该航班在<strong>当地</strong>时间h1时m1分s1秒起飞，在<strong>当地</strong>时间<strong>第三日</strong>h2时m2分s2秒降落。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每一组数据输出一行一个时间hh:mm:ss，表示飞行时间为hh小时mm分ss秒。</p><p>注意，当时间为一位数时，要补齐前导零，如三小时四分五秒应写为03:04:05。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>保证输入时间合法（0≤h≤23,0≤m,s≤59），飞行时间不超过24小时。</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">3</span><br><span class="hljs-attribute">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">19</span> <span class="hljs-number">21</span>:<span class="hljs-number">57</span>:<span class="hljs-number">24</span><br><span class="hljs-attribute">11</span>:<span class="hljs-number">05</span>:<span class="hljs-number">18</span> <span class="hljs-number">15</span>:<span class="hljs-number">14</span>:<span class="hljs-number">23</span><br><span class="hljs-attribute">17</span>:<span class="hljs-number">21</span>:<span class="hljs-number">07</span> <span class="hljs-number">00</span>:<span class="hljs-number">31</span>:<span class="hljs-number">46</span> (+<span class="hljs-number">1</span>)<br><span class="hljs-attribute">23</span>:<span class="hljs-number">02</span>:<span class="hljs-number">41</span> <span class="hljs-number">16</span>:<span class="hljs-number">13</span>:<span class="hljs-number">20</span> (+<span class="hljs-number">1</span>)<br><span class="hljs-attribute">10</span>:<span class="hljs-number">19</span>:<span class="hljs-number">19</span> <span class="hljs-number">20</span>:<span class="hljs-number">41</span>:<span class="hljs-number">24</span><br><span class="hljs-attribute">22</span>:<span class="hljs-number">19</span>:<span class="hljs-number">04</span> <span class="hljs-number">16</span>:<span class="hljs-number">41</span>:<span class="hljs-number">09</span> (+<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">04</span>:<span class="hljs-number">09</span>:<span class="hljs-number">05</span><br><span class="hljs-attribute">12</span>:<span class="hljs-number">10</span>:<span class="hljs-number">39</span><br><span class="hljs-attribute">14</span>:<span class="hljs-number">22</span>:<span class="hljs-number">05</span><br></code></pre></div></td></tr></table></figure></blockquote><hr><p><strong>大家可以用这三题来训练关于日期的一些处理方法和做法，希望可以对大家产生帮助</strong></p><p class="note note-success">要加油鸭同学们</p>]]></content>
    
    
    <categories>
      
      <category>开放实验室</category>
      
      <category>题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容斥原理</title>
    <link href="/posts/3138397678.html"/>
    <url>/posts/3138397678.html</url>
    
    <content type="html"><![CDATA[<p>本文将讲述容斥原理的证明与应用</p><span id="more"></span><h1 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h1><p><strong>容斥原理看的时候真的很像小学的算面积的感觉，好多面积重叠后还学要减去并计算。其实背后是存在一个数论原理在的</strong></p><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><blockquote><p>在计数时，必须注意没有重复，没有遗漏。为了使重叠部分不被重复计算，人们研究出一种新的计数方法，这种方法的基本思想是：先不考虑重叠的情况，把包含于某内容中的所有对象的数目先计算出来，然后再把计数时重复计算的数目排斥出去，使得计算的结果既无遗漏又无重复，这种计数的方法称为容斥原理。</p></blockquote><p>以上呢是百度百科的原话，说个人话吧😁😁</p><p>说白了不就是要不重不漏的算出所有要计算的东西咯~</p><h2 id="给出一个例子方便理解"><a href="#给出一个例子方便理解" class="headerlink" title="给出一个例子方便理解"></a>给出一个例子方便理解</h2><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20211107222407285.png" alt="image-20211107222407285"></p><p>相信大家在初高中一定学过韦恩图，这个东西在各个地方以好理解著称频繁出现，那么我也用这个来解释一下~</p><p>现在抛出一个题目，我们要计算这三个圆占据的总面积，如何计算呢？</p><p>其实很简单：</p><p>s = 1 + 2 + 3 - 4 - 5 - 6 + 7；</p><p>那么我们很容易想到，会不会有一个通项公式去做出这个答案呢？</p><p>这时<strong>容斥原理</strong>就登场了：</p><p>​    <img src="http://jin-xuanjie.gitee.io/note-pad/image-20211107223345726.png" alt="image-20211107223345726"></p><h2 id="咋证明的呀？"><a href="#咋证明的呀？" class="headerlink" title="咋证明的呀？"></a>咋证明的呀？</h2><p>用到了组合数恒等式，之后会整理出来，先不说证明了。</p><h2 id="看一看题吧："><a href="#看一看题吧：" class="headerlink" title="看一看题吧："></a>看一看题吧：</h2><blockquote><p>给定一个整数 n 和 m 个不同的质数 p1,p2,…,pm。</p><p>请你求出 1∼n 中能被 p1,p2,…,pm 中的至少一个数整除的整数有多少个。</p><p>输入格式<br>第一行包含整数 n 和 m。</p><p>第二行包含 m 个质数。</p><p>输出格式<br>输出一个整数，表示满足条件的整数的个数。</p><p>数据范围<br>1≤m≤16,<br>1≤n,pi≤109<br>输入样例：<br>10 2<br>2 3<br>输出样例：<br>7</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-keyword">int</span> n, m;<br>LL res;    <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ ) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; m; i ++ ) <br>    &#123;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>, cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;&gt; j &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((LL)t * q[j] &lt;= n)<br>                &#123;<br>                    t *= q[j];<br>                    cnt ++ ;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <br>                &#123;<br>                    t = <span class="hljs-number">-1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cnt % <span class="hljs-number">2</span>)<br>            &#123;<br>                res += n / t;<br>            &#125;<br>            <span class="hljs-keyword">else</span> res -= n / t;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实考察容斥原理的这类题目吧，也不会很难，主要是考察你到底懂不懂这个东西</p><p>很多数论的定理和小学数奥的结论还是要多积累呀！！😃😃</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stringstream用法</title>
    <link href="/posts/1102605851.html"/>
    <url>/posts/1102605851.html</url>
    
    <content type="html"><![CDATA[<p>本文将介绍c++中stringstream类在算法竞赛中的常用方法</p><span id="more"></span><h1 id="stringstream"><a href="#stringstream" class="headerlink" title="stringstream"></a>stringstream</h1><p>首先呢使用stringstream之前我们要先包含进来一个头文件</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstring&gt;</span><span class="hljs-comment">//这个库里面不仅stringstream，我们只会用到stringstream</span></span><br></code></pre></div></td></tr></table></figure><p>那我们都能用这个做啥呢？让我娓娓道来😀</p><hr><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>大家有时候会有一个烦恼，你拿出了一个数字你想把他转成字符串，又或者你想把一个字符串转成数字，那么stringstream将满足你</p><p>看看代码吧：</p><h3 id="int-–-gt-string"><a href="#int-–-gt-string" class="headerlink" title="int –&gt;string"></a>int –&gt;string</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    stringstream sstream;<br>    string strResult;<br>    <span class="hljs-keyword">int</span> nValue = <span class="hljs-number">1000</span>;<br> <br>    <span class="hljs-comment">// 将int类型的值放入输入流中</span><br>    sstream &lt;&lt; nValue;<br>    <span class="hljs-comment">// 从sstream中抽取前面插入的int类型的值，赋给string类型</span><br>    sstream &gt;&gt; strResult;<br> <br>    cout &lt;&lt; <span class="hljs-string">&quot;[cout]strResult is: &quot;</span> &lt;&lt; strResult &lt;&lt; endl;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[printf]strResult is: %s\n&quot;</span>, strResult.<span class="hljs-built_in">c_str</span>());<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="string-–-gt-int"><a href="#string-–-gt-int" class="headerlink" title="string –&gt; int"></a>string –&gt; int</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br>   <span class="hljs-function">istringstream <span class="hljs-title">inbuf</span><span class="hljs-params">(<span class="hljs-string">&quot;-10&quot;</span>)</span></span>;<br>    nbuf &gt;&gt; n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;n = &quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>这里有个坑点，如果想多次进行类型转换，请把stringstream清空哈，说一下如何清空</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">ssin.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//重置状态标志</span><br>ssin.<span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//清空数据，因为这个很占内存，要及时清空数据</span><br></code></pre></div></td></tr></table></figure><h2 id="分割一行中的空格制表符等（课上讲过了）"><a href="#分割一行中的空格制表符等（课上讲过了）" class="headerlink" title="分割一行中的空格制表符等（课上讲过了）"></a>分割一行中的空格制表符等（课上讲过了）</h2><p>通用模板：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">string line;<br><br><span class="hljs-built_in">getline</span>(cin, line);<br><br><span class="hljs-function">stringstream <span class="hljs-title">ssin</span><span class="hljs-params">(line)</span></span>;<br><br>string node;<br><br><span class="hljs-keyword">while</span> (ssin &gt;&gt; node)<br>&#123;<br><span class="hljs-comment">//处理输入细节</span><br>&#125;<br><span class="hljs-comment">//处理离线细节</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="多个字符串的拼接"><a href="#多个字符串的拼接" class="headerlink" title="多个字符串的拼接"></a>多个字符串的拼接</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    stringstream sstream;<br> <br>    <span class="hljs-comment">// 将多个字符串放入 sstream 中</span><br>    sstream &lt;&lt; <span class="hljs-string">&quot;first&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;string,&quot;</span>;<br>    sstream &lt;&lt; <span class="hljs-string">&quot; second string&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;strResult is: &quot;</span> &lt;&lt; sstream.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br> <br>    <span class="hljs-comment">// 清空 sstream</span><br>    sstream.<span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    sstream &lt;&lt; <span class="hljs-string">&quot;third string&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;After clear, strResult is: &quot;</span> &lt;&lt; sstream.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>利用+运算符也是可以的啦~~😀😀（区别是有的，但是先不讲，在算法竞赛中不会卡这么死）</p><p class="note note-success">stringstream，你学会了吗😁😁</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++教案</title>
    <link href="/posts/182611664.html"/>
    <url>/posts/182611664.html</url>
    
    <content type="html"><![CDATA[<p>本文分享琴理工作室算法组c++教案</p><span id="more"></span><p>此c++教案只针对于算法竞赛入门使用，几乎涵盖了算法竞赛中c++的所有用法，请认真观看呀~</p><p><a href="https://gitlab.jxj777.top/usr/img/in_out.docx">c++中的输入输出与顺序结构</a></p><p><a href="https://gitlab.jxj777.top/usr/img/if_structure.docx">c++中的判断</a></p><p><a href="https://gitlab.jxj777.top/usr/img/for_while.docx">c++中的循环</a></p><p><a href="https://gitlab.jxj777.top/usr/img/array.docx">c++中的数组</a></p><p><a href="https://gitlab.jxj777.top/usr/img/string.docx">c++中的字符串</a></p><p><a href="https://gitlab.jxj777.top/usr/img/bitOperation_funcution.docx">c++中的函数</a></p><p><a href="https://gitlab.jxj777.top/usr/img/STL.docx">c++中的stl模板库</a></p><p><a href="https://gitlab.jxj777.top/usr/img/struct_quote_pointer.docx">c++中的指针，结构体，引用</a></p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>教案</category>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>教案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>琴理工作室选拔赛题解</title>
    <link href="/posts/3009977438.html"/>
    <url>/posts/3009977438.html</url>
    
    <content type="html"><![CDATA[<p>本文是琴理工作室算法组第一次选拔赛的题解</p><span id="more"></span><h1 id="题解？（给出思路）"><a href="#题解？（给出思路）" class="headerlink" title="题解？（给出思路）"></a>题解？（给出思路）</h1><p>本文不会出现任何代码，若想观看代码，请移步▶▶ <a href="https://gitee.com/jin-xuanjie/qin-li-studio-algorithm-group/tree/master/firstTrials">选拔赛代码</a></p><h2 id="难度？"><a href="#难度？" class="headerlink" title="难度？"></a>难度？</h2><p>还好吧，几乎都是秒出思路的题</p><h3 id="T1（签到题）"><a href="#T1（签到题）" class="headerlink" title="T1（签到题）"></a>T1（签到题）</h3><blockquote><p>其实就是扫描一遍数组去找<strong>是否存在</strong>这个特定的值。可能是好多人题目没读懂？</p></blockquote><h3 id="T2（中档题）"><a href="#T2（中档题）" class="headerlink" title="T2（中档题）"></a>T2（中档题）</h3><blockquote><p>利用哈希的思想（不懂的也没关系）</p><p>先从头到尾扫描一遍，然后记录出每个字符出现的次数，然后再次扫描，扫描出字符个数为1的那个字符直接输出然后结束就可以了</p><p>若没有输出NO就可以了。既然有可能没有，那么必须要打布尔标记咯~</p></blockquote><h3 id="T3-困难题，其实就是在防ak，防的是c语言选手的ak，java选手表示太简单"><a href="#T3-困难题，其实就是在防ak，防的是c语言选手的ak，java选手表示太简单" class="headerlink" title="T3 (困难题，其实就是在防ak，防的是c语言选手的ak，java选手表示太简单)"></a>T3 (困难题，其实就是在防ak，防的是c语言选手的ak，java选手表示太简单)</h3><blockquote><p>这里的不确定因素就是第一个和第二个串谁长，所以到后来要一直分类讨论。</p><p>这类问题有一个通用的解法，不管是谁长，我们都把长的交换到第一个串，这样之后会免掉分类讨论这一环。</p><p>判断子串的方式呢就是双指针算法了，可以使用每个位置比对的暴力方法，有能力者当然也可以使用kmp算法。</p></blockquote><h3 id="T4-签到题"><a href="#T4-签到题" class="headerlink" title="T4(签到题)"></a>T4(签到题)</h3><blockquote><p>按照题目指示做就可以了，没啥难的</p><p>唯一的难点就在于如何分解每一位数，利用 %10 /10这个方法来分解每一位数</p><p>也可以用我给大家提供的标程，char数组的方法来处理，也比较好理解</p></blockquote><h3 id="T5（防ak题，思维题（贪心题））"><a href="#T5（防ak题，思维题（贪心题））" class="headerlink" title="T5（防ak题，思维题（贪心题））"></a>T5（防ak题，思维题（贪心题））</h3><blockquote><p>这一步要先把题看懂%%%</p><p>假设这里你已经把题看懂了，看懂后思考片刻大家就会发现一个事情，想让自己存在某个科目的分并不是最低的，有一个万能构造法就是，第一个科目所有人降序排列分，第二个科目所有人升序排列分，那么一定有人某个会比自己的分数低。</p><p>想懂了这个其实就很简单了，但是比赛中却没有人碰这道题😦😦😦</p></blockquote><h3 id="T6（中档题）"><a href="#T6（中档题）" class="headerlink" title="T6（中档题）"></a>T6（中档题）</h3><blockquote><p>如果你把这个东西乘上 10的要求位数的次幂，一定会超出int 或者是long long 的范围，那必然会有一些数据算不出来。</p><p>如果你会高精算我没说（<strong>java选手，py选手哼哧一笑</strong>）</p><p>如果你是c语言或者是c++，那么就要手写高精，这工作量将巨大</p><p>这里给出一个方法就是，利用我们小学列竖式的方法去一步一步算出那位小数，具体可以观看代码，明天会讲这个解法。</p></blockquote><h3 id="T7（签到题）"><a href="#T7（签到题）" class="headerlink" title="T7（签到题）"></a>T7（签到题）</h3><blockquote><p>按照题目标准枚举就好了</p></blockquote><h3 id="T8（中档题）"><a href="#T8（中档题）" class="headerlink" title="T8（中档题）"></a>T8（中档题）</h3><blockquote><p>用到了一个高中阶段的数学结论—-<strong>n元均值不等式</strong></p><p>利用这个不等式，告诉我们在和为一定的时候，当三个数越靠近乘积越大，通过这个想法来说这道题不久解决了😀😀</p></blockquote><h3 id="T9（防爆零题）"><a href="#T9（防爆零题）" class="headerlink" title="T9（防爆零题）"></a>T9（防爆零题）</h3><blockquote><p>不多讲了，大家都会！</p></blockquote><h3 id="T10（签到题）"><a href="#T10（签到题）" class="headerlink" title="T10（签到题）"></a>T10（签到题）</h3><blockquote><p>其实就是对x和y坐标取一个绝对值判断它是否小于1就完事了，不多讲了，大家也都会</p></blockquote><hr><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>这样看完大家还觉得很难吗，希望大家通过之后的学习，都可以对这套题目哼哧一笑，露出非常不屑的表情。😎😎</p><p>之后的训练赛还有很多，希望大家加油呀！！</p><p>所以这套题目，你学会了吗😉😉😉</p>]]></content>
    
    
    <categories>
      
      <category>琴理工作室算法组教学</category>
      
      <category>选拔赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数位dp</title>
    <link href="/posts/227678581.html"/>
    <url>/posts/227678581.html</url>
    
    <content type="html"><![CDATA[<p>本文将讲述在dp中比较难的part–数位dp，这类dp考虑条件偏多，难思考，考到的知识点繁杂，希望这篇文章可以带来一些帮助</p><span id="more"></span><h1 id="数位dp"><a href="#数位dp" class="headerlink" title="数位dp"></a>数位dp</h1><p>给出一个数位dp的定义：</p><blockquote><p>数位dp是一种计数用的dp，一般就是要统计一个区间[le,ri]内满足一些条件数的个数</p></blockquote><hr><p>其实是这样，大家会发现数位dp问的是这么一种问题，是在一个区间内满足条件数的个数。</p><p>首先在这类题中会应用到几个技巧：</p><h3 id="技巧："><a href="#技巧：" class="headerlink" title="技巧："></a>技巧：</h3><h4 id="类前缀和的思想："><a href="#类前缀和的思想：" class="headerlink" title="类前缀和的思想："></a>类前缀和的思想：</h4><p>因为如果在这个区间内去求解解集，显然是较费劲的，而且也很难思考，这时我们就会使用类前缀和思想，让俩个端点和1做区间求出[1,l - 1], [1, r]。这样把这俩个直接相减就可以了</p><h4 id="预处理思想："><a href="#预处理思想：" class="headerlink" title="预处理思想："></a>预处理思想：</h4><p>其实在做题的过程中你会发现一些东西会被反复用到，如之后的例题中的组合数，提前用dp处理好的条件（详情可见下题）</p><h4 id="树形分类讨论思想："><a href="#树形分类讨论思想：" class="headerlink" title="树形分类讨论思想："></a>树形分类讨论思想：</h4><p>一般来说都会对每一位是否可填最高位进行分类讨论，进行讨论时，那个图形特别像树形，所以这里暂时取名叫做树形😁</p><p>其实懂了这些想解出题目还是有些费劲，那么就让我们再看看例题吧</p><hr><blockquote><p>科协里最近很流行数字游戏。</p><p>某人命名了一种不降数，这种数字必须满足从左到右各位数字呈非下降关系，如 123，446。</p><p>现在大家决定玩一个游戏，指定一个整数闭区间 [a,b]，问这个区间内有多少个不降数。</p><p>输入格式<br>输入包含多组测试数据。</p><p>每组数据占一行，包含两个整数 a 和 b。</p><p>输出格式<br>每行给出一组测试数据的答案，即 [a,b] 之间有多少不降数。</p><p>数据范围<br>1≤a≤b≤2^31−1<br>输入样例：<br>1 9<br>1 19<br>输出样例：<br>9<br>18</p></blockquote><p>这道题首先一看就是一道典型的数位dp，并且说到了不降数，估计就是要讨论每位数字和上一位数字的递推。</p><p>这里我们给出一个标程：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">15</span>;<br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-comment">//预处理出共i位，最高位位j的所有方案书</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i ++ ) f[<span class="hljs-number">1</span>][i] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">9</span>; j ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j; k &lt;= <span class="hljs-number">9</span>; k ++ )<br>                f[i][j] += f[i - <span class="hljs-number">1</span>][k];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!n) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <br>    vector&lt;<span class="hljs-keyword">int</span>&gt; nums;<br>    <br>    <span class="hljs-keyword">while</span> (n) nums.<span class="hljs-built_in">push_back</span>(n % <span class="hljs-number">10</span>), n /= <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> last = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x = nums[i];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = last; j &lt; x; j ++ )<br>            res += f[i + <span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">if</span> (x &lt; last) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//是否下降</span><br>            last = x;<br>            <br>            <span class="hljs-keyword">if</span> (!i) res ++ ;<span class="hljs-comment">//本身的方案数也算一个</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <br>    <span class="hljs-keyword">int</span> l, r;<br>    <br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; l &gt;&gt; r) cout &lt;&lt; <span class="hljs-built_in">dp</span>(r) - <span class="hljs-built_in">dp</span>(l - <span class="hljs-number">1</span>) &lt;&lt; endl;<span class="hljs-comment">//类前缀和思想</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这道题其实也是可以使用记忆化搜索的（其实记忆化搜索就是dp）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> A,B,a[<span class="hljs-number">11</span>],f[<span class="hljs-number">11</span>][<span class="hljs-number">10</span>];    <span class="hljs-comment">//f存储在没有贴合上界的情况下，从第i位开始且前一位是j的不降数方案数</span><br>                            <span class="hljs-comment">//因为f是没有贴合上界的情况下，即剩下i位可以从00…00~99…99随便填，所以无论数a[]是多少都可以适用</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> pre,<span class="hljs-keyword">bool</span> lim)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (~f[i][pre] &amp;&amp; !lim) <span class="hljs-keyword">return</span> f[i][pre];    <span class="hljs-comment">//f是没有贴合上界的情况下，即!lim</span><br>    <span class="hljs-keyword">int</span> up=lim ? a[i]:<span class="hljs-number">9</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=pre ; k&lt;=up ; k++)               <span class="hljs-comment">//枚举可以填的数</span><br>     ans+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,k,lim &amp;&amp; k==up);<br>    <span class="hljs-keyword">if</span> (!lim) f[i][pre]=ans;                    <span class="hljs-comment">//f是没有贴合上界的情况下，即!lim</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;        <span class="hljs-comment">//拆分每一位</span><br>    <span class="hljs-keyword">if</span> (!x) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> ( ; x ; x/=<span class="hljs-number">10</span>) a[++len]=x%<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(len,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> f);<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;A&gt;&gt;B) cout&lt;&lt;<span class="hljs-built_in">solve</span>(B)-<span class="hljs-built_in">solve</span>(A<span class="hljs-number">-1</span>)&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr>这类题要做到分类讨论的时候不重不漏，这也是这类题最难的地方，一不小心就漏掉一个部分，如果多加训练应该会做的出来了吧。（至少现在给我一个新题，我估计我应该是做不出来）<hr><p><strong>希望这篇文章会让你们对数位dp有一个更深的了解吧</strong></p><hr><h2 id="再给出一道练习题吧："><a href="#再给出一道练习题吧：" class="headerlink" title="再给出一道练习题吧："></a>再给出一道练习题吧：</h2><blockquote><p>求给定区间 [X,Y] 中满足下列条件的整数个数：这个数恰好等于 K 个互不相等的 B 的整数次幂之和。</p><p>例如，设 X=15,Y=20,K=2,B=2，则有且仅有下列三个数满足题意：</p><p>17=24+20<br>18=24+21<br>20=24+22<br>输入格式<br>第一行包含两个整数 X 和 Y，接下来两行包含整数 K 和 B。</p><p>输出格式<br>只包含一个整数，表示满足条件的数的个数。</p><p>数据范围<br>1≤X≤Y≤2^31−1,<br>1≤K≤20,<br>2≤B≤10<br>输入样例：<br>15 20<br>2<br>2<br>输出样例：<br>3</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">35</span>;<br><br><span class="hljs-keyword">int</span> K, B;<br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j ++ )<br>            <span class="hljs-keyword">if</span> (!j) f[i][j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> f[i][j] = f[i - <span class="hljs-number">1</span>][j] + f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; nums;<br>    <span class="hljs-keyword">while</span> (n) nums.<span class="hljs-built_in">push_back</span>(n % B), n /= B;<br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x = nums[i];<br>        <span class="hljs-keyword">if</span> (x)  <span class="hljs-comment">// 求左边分支中的数的个数</span><br>        &#123;<br>            res += f[i][K - last];<br>            <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (K - last - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>) res += f[i][K - last - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                last ++ ;<br>                <span class="hljs-keyword">if</span> (last &gt; K) <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!i &amp;&amp; last == K) res ++ ;   <span class="hljs-comment">// 最右侧分支上的方案</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br><br>    <span class="hljs-keyword">int</span> l, r;<br>    cin &gt;&gt; l &gt;&gt; r &gt;&gt; K &gt;&gt; B;<br><br>    cout &lt;&lt; <span class="hljs-built_in">dp</span>(r) - <span class="hljs-built_in">dp</span>(l - <span class="hljs-number">1</span>) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p class="note note-success">所以数位dp你学会了吗😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区间合并</title>
    <link href="/posts/795397410.html"/>
    <url>/posts/795397410.html</url>
    
    <content type="html"><![CDATA[<p>这里讲到无序区间的合并的代码，板子和原理</p><span id="more"></span><h1 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h1><p>首先大家想到区间合并的时候觉得，<strong>啊~这个好简单</strong> 。是不是这样想？</p><p>我最开始也是这样的，这个东西如果自己有积累过的确是很简单的一个思想和代码，如果没有接触过在考试中或比赛中现场想还是比较费劲的。</p><p>这里首先给出一个区间合并的模板代码</p><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br>vector&lt;PII&gt; q;<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;PII&gt; res;<br>    <span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-keyword">int</span> st = <span class="hljs-number">-2e9</span>, en = <span class="hljs-number">-2e9</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> a : q)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(en &lt; a.x)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, en&#125;);<br>            st = a.x;<br>            en = a.y;<br>        &#125;<br>        <span class="hljs-keyword">else</span> en = <span class="hljs-built_in">max</span>(en, a.y);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, en&#125;);<br>    <br>    q = res;<br>    <br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <br>        q.<span class="hljs-built_in">push_back</span>(&#123;l, r&#125;);<br>    &#125;<br>    <br>    <span class="hljs-built_in">merge</span>();<br>    <br>    cout &lt;&lt; q.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里呢是这样，利用了贪心的思想给左端点排序，然后逐步合并，并且维护者右端点和左端点，这个东西第一次还是较难写出来的，推荐大家背过把！！</p><hr><h2 id="usaco题目："><a href="#usaco题目：" class="headerlink" title="usaco题目："></a>usaco题目：</h2><p>这里在分享一道usaco的一道题来结束这个知识点：</p><blockquote><p>每天早上 5 点，三名农夫去牛场给奶牛们挤奶。</p><p>现在从 5 点开始按秒计时，第一名农夫在第 300 秒开始给牛挤奶，并在第 1000 秒停止挤奶。</p><p>第二名农夫在第 700 秒开始给牛挤奶，并在第1200 秒停止挤奶。</p><p>第三名农夫在第 1500 秒开始给牛挤奶，并在第 2100 秒停止挤奶。</p><p>从开始挤奶到挤奶完全结束，这一期间，至少存在一名农夫正在挤奶的连续时间段的长度最长为 900 秒（第 300 秒至第 1200 秒），完全没有任何农夫在挤奶的连续时间段的长度最长为 300 秒（第 1200秒至第 1500 秒）。</p><p>现在给你 N 名农夫挤 N 头奶牛的工作时间表，请你求出：</p><ol><li>至少存在一名农夫正在挤奶的连续时间段的最长长度。</li><li>没有任何农夫在挤奶的连续时间段的最长长度。</li></ol><p><strong>注意</strong>：本题中给出的所有时间均为时刻（时间点），因此在本题中挤奶区间 [100，200][100，200] 和 [201,300][201,300] 中间会有长度为 1 秒的间歇时间。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 N，表示农夫数量。</p><p>接下来 N 行，每行包含两个非负整数 l,r，表示农夫挤奶的开始时刻和结束时刻。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含两个整数，分别表示最长连续挤奶时间以及最长连续无人挤奶时间。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤5000<br>1≤l≤r≤10^6</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">300 </span><span class="hljs-number">1000</span><br><span class="hljs-symbol">700 </span><span class="hljs-number">1200</span><br><span class="hljs-symbol">1500 </span><span class="hljs-number">2100</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">900 </span><span class="hljs-number">300</span><br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5010</span>;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br>PII q[N];<br><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-keyword">int</span> max_1, max_2;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i].x &gt;&gt; q[i].y;<br>    <br>    <span class="hljs-built_in">sort</span>(q, q + n);<br>    <br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">-2e9</span>, r = <span class="hljs-number">-2e9</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (r &lt; q[i].x)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(l != <span class="hljs-number">-2e9</span>)<br>            &#123;<br>            max_2 = <span class="hljs-built_in">max</span>(q[i].x - r, max_2);<br>            max_1 = <span class="hljs-built_in">max</span>(r - l, max_1);<br>            r = q[i].x;<br>            &#125;<br>            <br>        l = q[i].x, r = q[i].y;<br>            <br>        &#125;<br>        <span class="hljs-keyword">else</span> r = <span class="hljs-built_in">max</span>(q[i].y, r);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(l != <span class="hljs-number">-2e9</span>) max_1 = <span class="hljs-built_in">max</span>(r - l, max_1);<br>    <br>    cout &lt;&lt; max_1 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; max_2 &lt;&lt; endl;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>好了，区间合并就完事了！😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于子集的状压dp</title>
    <link href="/posts/3960819418.html"/>
    <url>/posts/3960819418.html</url>
    
    <content type="html"><![CDATA[<p>本文将分享一个状压dp的一类题：基于子集的动态规划</p><span id="more"></span><h2 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h2><p>写此篇文章的原因也是因为在周赛遇到了此问题，当时用的是dfs+剪枝解决，后来观看一些人的题解发现利用了状压dp，也学到了很多的东西</p><h1 id="状压dp"><a href="#状压dp" class="headerlink" title="状压dp"></a>状压dp</h1><p>其实，状压 DP 就是枚举所有情况的 「 暴力 」。</p><p>状态压缩，其实就是将每个任务 <code>task[i]</code> 看作某个 「 十进制数字 」 的<strong>二进制上的第 <code>i</code> 位</strong>，<code>1</code> 表示该任务被选择，反之不被选择。</p><p><strong>Tips</strong>： 十进制数字是多少我们根本不用关心，我们关心的是它的二进制长啥样。</p><p>状态压缩可以简单的理解为把一个布尔 boolean 数组压缩到了一个十进制数字上，之后便可以使用位运算的各种技巧来简化代码逻辑，这可比布尔数组好用多了！(๑•̀ㅂ•́)و✧</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// m =&gt; 总状态数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-comment">// 枚举状态 i 的二进制子集</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &gt; <span class="hljs-number">0</span>; j = (j - <span class="hljs-number">1</span>) &amp; i) &#123;<br>        <span class="hljs-comment">// To Do..</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实状压dp并不会很难，然后这里是主要想说明一个枚举自己的一个方式，就是 j = (j - 1) &amp; i) </p><p>如果不会这步暴力来写的话：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// m =&gt; 总状态数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-comment">// 从 [1, i] 就可以了，后面的一定不会是 i 的子集</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>        <span class="hljs-comment">// 检查状态 j 是不是状态 i 的二进制子集</span><br>        <span class="hljs-keyword">if</span> ((i | j) == i) &#123;<br>            <span class="hljs-comment">// To Do..</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>很明显的看出，第二个代码有些许的笨重并且没有任何美感hhh</p><h3 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h3><p>其实我想了想写程序的我们不就是追求美感和效率吗？</p><p>当二者兼顾的时候，那应该已经超过很多人了把hhh，个人理解</p><hr><p>所以这个枚举子集的方法你学会了吗？😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IEEE754</title>
    <link href="/posts/2366819883.html"/>
    <url>/posts/2366819883.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章将介绍IEEE754 浮点数二进制存储标准</p><span id="more"></span><h1 id="浮点数存储"><a href="#浮点数存储" class="headerlink" title="浮点数存储"></a>浮点数存储</h1><p>由一个我的经历来引出今天的博文</p><p>今天在看算法题解的时候看见一个人把double类型的初值赋值成了1e20，这个引起了我的深思，因为double同long long同为8字节存储，但是long long却只能存储最大到1e18这个数量级，而这个double通过查询居然可以过分的存储到1e308，这我完全是蒙圈的。所以通过学习就有了这篇博客。</p><h2 id="IEEE浮点数二进制算数标准"><a href="#IEEE浮点数二进制算数标准" class="headerlink" title="IEEE浮点数二进制算数标准"></a>IEEE浮点数二进制算数标准</h2><p>通过学习我发现浮点数拥有一个新的存储标准，这个标准就是IEEE754</p><h3 id="组成（此文都以单精度浮点数为例）"><a href="#组成（此文都以单精度浮点数为例）" class="headerlink" title="组成（此文都以单精度浮点数为例）"></a>组成（此文都以单精度浮点数为例）</h3><p>在IEEE 754标准中浮点数由三部分组成：</p><ul><li>符号位（sign bit）</li><li>有偏指数（biased exponent）</li><li>小数（fraction）</li></ul><p>浮点数分为两种，单精度浮点数（single precision）和双精度浮点数（double precision），它们两个所占的位数不同。</p><p>单精度浮点数（共32位）：<br>1个符号位<br>8个指数位<br>23个小数位</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1070689-20190310165139947-1347641585.png" alt="img"></p><p>双精度浮点数：</p><p>1个符号位</p><p>11个指数为</p><p>52个小数位</p><h4 id="符号位："><a href="#符号位：" class="headerlink" title="符号位："></a>符号位：</h4><p>符号位决定符号，这个很好理解</p><h4 id="指数位："><a href="#指数位：" class="headerlink" title="指数位："></a>指数位：</h4><p>这里是利用了移码的存储规则，也就是说是存在偏移量的，-3 在单精度浮点中会被偏移成124</p><h4 id="小数位："><a href="#小数位：" class="headerlink" title="小数位："></a>小数位：</h4><p>这里是以2的负几次幂分之以来表示，从而会出现精度问题。</p><h4 id="二进制原码："><a href="#二进制原码：" class="headerlink" title="二进制原码："></a>二进制原码：</h4><p>二进制原数 = （-1）^ 符号位 * （2）^ 阶码真值 * 尾数真值</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>例如178.125</p><ol><li><p>先把浮点数分别把整数部分和小数部分转换成2进制</p><ol><li>整数部分用除2取余的方法，求得：10110010</li><li>小数部分用乘2取整的方法，求得：001</li><li>合起来即是：10110010.001</li><li>转换成二进制的浮点数，即把小数点移动到整数位只有1，即为：1.0110010001 * 2^111，111是二进制，由于左移了7位，所以是111</li></ol></li><li><p>把浮点数转换二进制后，这里基本已经可以得出对应3部分的值了</p><ol><li><p>数符：由于浮点数是整数，故为0.(负数为1)</p></li><li><p>阶码 : 阶码是需要作移码运算，在转换出来的二进制数里，阶数是111(十进制为7)，对于单精度的浮点数，偏移值为01111111(127)[偏移量的计算是：2^(e-1)-1, e为阶码的位数，即为8，因此偏移值是127]，即：111+01111111 = 10000110</p></li><li><p>尾数：小数点后面的数，即0110010001</p></li><li><p>最终根据位置填到对位的位置上：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20211101151638074.png" alt="image-20211101151638074"></p></li></ol></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>因为小数位是以2的负几次幂的存储方式，必定会有精度差，所以我们判断小数是否相等的时候是不就必定不能用双等了呢？</p><p>答案是肯定的</p><hr><p>所以IEEE754规则你学会了吗？😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>计算机原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>计算机原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可持久化数据结构</title>
    <link href="/posts/849974245.html"/>
    <url>/posts/849974245.html</url>
    
    <content type="html"><![CDATA[<p>本文将分享俩个我们常见的可持久化数据结构：主席树，可持久化字典树</p><span id="more"></span><h1 id="可持久化数据结构："><a href="#可持久化数据结构：" class="headerlink" title="可持久化数据结构："></a>可持久化数据结构：</h1><p>首先要提的一点是，可持久化说到底是一种思想。</p><p>可持久化说白了就可以存下来修改的历史版本（有点像git工具）</p><ul><li>可持久化的前提：<ul><li>在修改的过程中，数据结构本身的拓扑结构不会发生改变。</li></ul></li><li>可持久化的数据结构例子：<ul><li>trie树，线段树——主席树，堆，树状数组</li></ul></li><li>不可持久化的数据结构例子：<ul><li>平衡树（左旋右旋后，拓扑结构会发生改变）</li></ul></li><li>可持久化数据结构解决的问题：<ul><li>我们希望把每次修改的版本都记录下来（类似git工具）</li></ul></li><li>核心思想：<ul><li>只会记录每一个版本与前一个版本不一样的结点</li></ul></li></ul><h2 id="可持久化字典树"><a href="#可持久化字典树" class="headerlink" title="可持久化字典树"></a>可持久化字典树</h2><p>也是举出一道经典的例题：最大异或和</p><blockquote><p>给定一个非负整数序列 a，初始长度为 N。</p><p>有 M 个操作，有以下两种操作类型：</p><ol><li><code>A x</code>：添加操作，表示在序列末尾添加一个数 x，序列的长度 N 增大 1。</li><li><code>Q l r x</code>：询问操作，你需要找到一个位置 p，满足 l≤p≤r，使得：a[p] xor a[p+1] xor … xor a[N] xor x 最大，输出这个最大值。</li></ol><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 N，M，含义如问题描述所示。</p><p>第二行包含 N个非负整数，表示初始的序列 A。</p><p>接下来 M 行，每行描述一个操作，格式如题面所述。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每个询问操作输出一个整数，表示询问的答案。</p><p>每个答案占一行。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>N,M≤3×10^5,0≤a[i]≤10^7</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">5</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">A</span> <span class="hljs-number">1</span> <br><span class="hljs-attribute">Q</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <br><span class="hljs-attribute">A</span> <span class="hljs-number">4</span> <br><span class="hljs-attribute">Q</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <br><span class="hljs-attribute">Q</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br>5<br>6<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">6e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = N * <span class="hljs-number">25</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-keyword">int</span> s[N];<br><span class="hljs-keyword">int</span> tr[M][<span class="hljs-number">2</span>], max_id[M];<br><span class="hljs-keyword">int</span> root[N], idx;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        max_id[q] = i;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> v = s[i] &gt;&gt; k &amp; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (p) tr[q][v ^ <span class="hljs-number">1</span>] = tr[p][v ^ <span class="hljs-number">1</span>]; <span class="hljs-comment">//因为上一个版本存在，我们要把附带信息一起带过来</span><br>    tr[q][v] = ++ idx;<br>    <span class="hljs-built_in">insert</span> (i, k - <span class="hljs-number">1</span>, tr[p][v], tr[q][v]);<br>    max_id[q] = <span class="hljs-built_in">max</span>(max_id[tr[q][<span class="hljs-number">0</span>]], max_id[tr[q][<span class="hljs-number">1</span>]]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p = root;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">23</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = C &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (max_id[tr[p][v ^ <span class="hljs-number">1</span>]] &gt;= L) p = tr[p][v ^ <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> p = tr[p][v];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> C ^ s[max_id[p]];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-comment">//首先要初始化最开始，因为0节点是不存在的节点所存储的地方，所以我们要对0节点进行一些初始化</span><br>    max_id[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    root[<span class="hljs-number">0</span>] = ++ idx;<br>    <span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>, <span class="hljs-number">23</span>, <span class="hljs-number">0</span>, root[<span class="hljs-number">0</span>]);<br>  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        cin &gt;&gt; x;<br>        <br>        s[i] = s[i - <span class="hljs-number">1</span>] ^ x;<br>        <br>        root[i] = ++ idx;<br>        <span class="hljs-built_in">insert</span>(i, <span class="hljs-number">23</span>, root[i - <span class="hljs-number">1</span>], root[i]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">char</span> op;<br>        <span class="hljs-keyword">int</span> l, r, x;<br>        cin &gt;&gt; op;<br>        <br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;A&#x27;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            n ++ ;<br>            s[n] = s[n - <span class="hljs-number">1</span>] ^ x;<br>            root[n] = ++ idx;<br>            <span class="hljs-built_in">insert</span>(n, <span class="hljs-number">23</span>, root[n - <span class="hljs-number">1</span>], root[n]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;<br>            cout &lt;&lt; <span class="hljs-built_in">query</span>(root[r - <span class="hljs-number">1</span>], s[n] ^ x, l - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里呢用到了一个前缀和的转换加贪心的一个做法</p><p>所以什么是持久化trie呢？</p><p><img src="https://img-blog.csdnimg.cn/20181209112435987.png" alt="在这里插入图片描述"></p><p>是利用了每次存储改变信息，保留原有信息的方式建立成的一个字典树，这道题里使用了二进制串来当这个字符串，并且维护了一个max_id来看当前这个版本是否在这个区间里头，从而来判断是否使用这个节点</p><h2 id="主席树（可持久化权值线段树）"><a href="#主席树（可持久化权值线段树）" class="headerlink" title="主席树（可持久化权值线段树）"></a>主席树（可持久化权值线段树）</h2><p>权值线段树的本质是线段树维护桶</p><p>我们知道，普通线段树维护的信息是数列的区间信息，比如区间和、区间最大值、区间最小值等等。在维护序列的这些信息的时候，我们更关注的是这些数本身的信息，换句话说，我们要维护区间的最值或和，我们最关注的是这些数统共的信息。而权值线段树<strong>维护一列数中数的个数</strong>。</p><p>拿出我们的经典例题，第k小数</p><blockquote><p>给定长度为 N 的整数序列 AA，下标为 1∼N</p><p>现在要执行 M 次操作，其中第 ii 次操作为给出三个整数 li,ri,ki，求 A[li],A[li+1],…,A[ri] (即 A 的下标区间 [li,ri][li,ri])中第 ki 小的数是多少。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 N 和 M。</p><p>第二行包含 N 个整数，表示整数序列 A。</p><p>接下来 M 行，每行包含三个整数 li,ri,ki，用以描述第 i 次操作。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每次操作输出一个结果，表示在该次操作中，第 k 小的数的数值。</p><p>每个结果占一行。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>N≤10^5,M≤10^4,|A[i]|≤10^9</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">5<br>6<br>3<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> a[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; nums;<span class="hljs-comment">//离散化</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l, r;<span class="hljs-comment">//并不是区间，而是左右儿子</span><br>    <span class="hljs-keyword">int</span> cnt;<br>&#125;tr[N * <span class="hljs-number">4</span> + N * <span class="hljs-number">17</span>];<br><br><span class="hljs-keyword">int</span> root[N], idx;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lower_bound</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), x) - nums.<span class="hljs-built_in">begin</span>();<br>&#125;<br><br><br><span class="hljs-comment">//建立好骨架，供每个版本的insert</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p = ++ idx;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> p;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    tr[p].l = <span class="hljs-built_in">build</span>(l, mid), tr[p].r = <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> q = ++ idx;<br>    tr[q] = tr[p];<span class="hljs-comment">//这一步是在复制上一个版本</span><br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        tr[q].cnt ++ ;<br>        <span class="hljs-keyword">return</span> q;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) tr[q].l = <span class="hljs-built_in">insert</span>(tr[p].l, l, mid, x);<br>    <span class="hljs-keyword">else</span> tr[q].r = <span class="hljs-built_in">insert</span>(tr[p].r, mid + <span class="hljs-number">1</span>, r, x);<br>    <br>    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;<br>    <span class="hljs-keyword">return</span> q;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> r;<br>    <span class="hljs-keyword">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(k &lt;= cnt) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(tr[q].l, tr[p].l, l, mid, k);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(tr[q].r, tr[p].r, mid + <span class="hljs-number">1</span>, r, k - cnt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        nums.<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>    nums.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>()), nums.<span class="hljs-built_in">end</span>());<br>    <br>    root[<span class="hljs-number">0</span>] = <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        root[i] = <span class="hljs-built_in">insert</span>(root[i - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, <span class="hljs-built_in">find</span>(a[i]));<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> l, r, k;<br>        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;<br>        cout &lt;&lt; nums[<span class="hljs-built_in">query</span>(root[r], root[l - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, k)] &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>权值线段树和普通线段树不同，权值线段树维护的是一个个的桶，而普通线段树维护的是每个区间的具体信息</p><p>这道题作为经典题解法是蛮多的</p><ul><li>划分树</li><li>树套数</li></ul><p>之后我学到这些再去更新这些吧</p><p class="note note-success">可持久化数据结构，你懂了吗😁😁</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异或解题技巧</title>
    <link href="/posts/3254579777.html"/>
    <url>/posts/3254579777.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章将介绍异或的解题技巧</p><span id="more"></span><h1 id="异或技巧"><a href="#异或技巧" class="headerlink" title="异或技巧"></a>异或技巧</h1><p>首先说一下异或这个运算的性质：</p><ul><li><strong>结合律</strong></li><li><strong>交换律</strong></li><li><strong>x ^ x =0, x ^ 0 = x;</strong></li></ul><p>接着由一道题引出思考：</p><blockquote><p><strong>1-1000放在含有1001个元素的数组中，只有唯一的一个元素值重复，其它均只出现</strong><br><strong>一次。每个数组元素只能访问一次，设计一个算法，将它找出来；不用辅助存储空</strong><br><strong>间，能否设计一个算法实现？</strong></p></blockquote><h2 id="解法1：求sum相减"><a href="#解法1：求sum相减" class="headerlink" title="解法1：求sum相减"></a>解法1：求sum相减</h2><p>这个技巧的用法就和名字一样，直接求和相减就可以找出这个缺失的数字，算法也非常的好</p><p>缺点也很明显，如果数列过大那么溢出的风险也是巨大的</p><h2 id="解法2：异或"><a href="#解法2：异或" class="headerlink" title="解法2：异或"></a>解法2：异或</h2><p>这个方法就没有溢出的风险</p><p>将所有的数全部异或，得到的结果与1^2^3^…^1000的结果进行异或，得到的结果就是重复数。</p><p>这个为什么是对的呢？ 是这样，因为异或满足交换律，我们可以把所有的数都交换成 1^1 ^2^2^3^3^4^4^5^5^6^6^7^7 …… 1000^1000</p><p>又从上面的性质可知x ^ x =0, x ^ 0 = x; 也就是说落单的就是那个重复的数，其他的都为0 了</p><p>方法是不是非常的妙呢</p><p>我们从这个方法可以推出一系列题的解法：</p><blockquote><p>给定两个字符串 s 和 t，它们只包含小写字母。</p><p>字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。</p><p>请找出在 t 中被添加的字母。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">findTheDifference</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i ++ )&#123;<br>            res ^= s[i];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t.<span class="hljs-built_in">size</span>(); i ++ )&#123;<br>            res ^= t[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>        <br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>那这道题的原理的背景就是上面的那个证明，只不过利用了字符串来转换，利用ascll码转换一下就可直接找出那个添加的字母</p><p>所以这类题的做法你学会了吗？😊😊😊</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>破链成环方法</title>
    <link href="/posts/2182568315.html"/>
    <url>/posts/2182568315.html</url>
    
    <content type="html"><![CDATA[<p>本文将分享一个破链成环的方法</p><span id="more"></span><p>由一道题引出今天破链成环方法的技巧</p><blockquote><p>一天可以被分为 n 个时段。</p><p>一个工人的每日工作安排可以用一个长度为 n 的 0101 序列 a1,a2,…,an 来表示。</p><p>ai 为 00 表示第 ii 个时间段是工作时间ai 为 1 表示第 i个时间段是休息时间。</p><p>工人日复一日的严格按照这个工作安排来进行工作和休息。</p><p>请问，工人的最长连续休息时间有多长（单位：时段）？</p><p>注意，连续休息时间可能跨天。</p><p>保证工人至少在一个时间段处于工作状态。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 T，表示共有 T 组测试数据。</p><p>每组数据第一行包含整数 n。</p><p>第二行包含 n 个整数 a1,a2,…,an</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每组数据输出一行结果，表示最长连续休息时间。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤T≤10<br>1≤n≤2×105<br>0≤ai≤1<br>同一测试点内所有 n 的和不超过 2×1052×105。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">6</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br>2<br>3<br>0<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">400010</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> w[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br>            w[n + i] = w[i];<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, s = <span class="hljs-number">0</span>; i &lt; n * <span class="hljs-number">2</span>; i ++ )<br>            <span class="hljs-keyword">if</span> (w[i])<br>            &#123;<br>                s ++ ;<br>                res = <span class="hljs-built_in">max</span>(res, s);<br>            &#125;<br>            <span class="hljs-keyword">else</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>题意：休息时间可以跨天，那么就是告诉我们这个的数据背景就是一个环，日复一日的在循环，这里如果我们硬做的话，我们需要特判最后的那个，并且也非常的麻烦，在这道题可能还没啥，所以我们会用到以上的这个破链成环的方法，开俩倍区间，然后这个序列循环俩次，来算出正确答案</p><p>第一次做的时候没有想到这个方法，用的是分类讨论，这个方法是真的非常好用</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc第254场周赛</title>
    <link href="/posts/1920835834.html"/>
    <url>/posts/1920835834.html</url>
    
    <content type="html"><![CDATA[<p>这场周赛整体来说难度可以，快速幂那里的指数取模简直就是经典，虽然可以使用longlong飘过，时间卡的再死一点就更棒了</p><span id="more"></span><h1 id="T1：子字符串在字符串中出现数目（1967）"><a href="#T1：子字符串在字符串中出现数目（1967）" class="headerlink" title="T1：子字符串在字符串中出现数目（1967）"></a>T1：子字符串在字符串中出现数目（1967）</h1><p>这道题就没啥可说的，直接用语言自带的api也可以，手写也可以，kmp也可以，ac自动机也可以</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">numOfStrings</span><span class="hljs-params">(vector&lt;string&gt;&amp; patterns, string word)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> str:patterns)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(str,word))<br>            res++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(string str,string word)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>;l+str.<span class="hljs-built_in">size</span>()&lt;=word.<span class="hljs-built_in">size</span>();l++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;str.<span class="hljs-built_in">size</span>();k++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(word[l+k]!=str[k]) <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(k==str.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>这里的话是手写了一个系统自带的find函数</p><hr><h1 id="T2：构造元素不等于两相邻元素平均值的数组（1968）"><a href="#T2：构造元素不等于两相邻元素平均值的数组（1968）" class="headerlink" title="T2：构造元素不等于两相邻元素平均值的数组（1968）"></a>T2：构造元素不等于两相邻元素平均值的数组（1968）</h1><p>这里就是考到了一个贪心，我的思路就是先排序，然后从中点开始左边填一个，右边填一个，这样就能保证这个数组，一个大一个小，来保证不等于相邻元素的平均值</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">rearrangeArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; n)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(n.<span class="hljs-built_in">begin</span>(), n.<span class="hljs-built_in">end</span>());<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        <span class="hljs-keyword">int</span> s =(n.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)/<span class="hljs-number">2</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s <span class="hljs-number">-1</span> ,j = s+<span class="hljs-number">1</span>;j&lt;n.<span class="hljs-built_in">size</span>() &amp;&amp; i &gt;=<span class="hljs-number">0</span> ;j++,i-- )&#123;<br>            res.<span class="hljs-built_in">push_back</span>(n[j]);<br>            res.<span class="hljs-built_in">push_back</span>(n[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span>((n.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>) res.<span class="hljs-built_in">push_back</span>(n[n.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]);<br>        <br>        res.<span class="hljs-built_in">push_back</span>(n[s]);<br>        <span class="hljs-keyword">return</span> res;<br>        &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>赛后也看到了其他人的代码，先排完序，先填奇数序列，再填进去偶数，这样也保证了一个大一个小，觉得这个思路也蛮不错的</p><hr><h1 id="T3：-数组元素的最小非零乘积（1969）"><a href="#T3：-数组元素的最小非零乘积（1969）" class="headerlink" title="T3： 数组元素的最小非零乘积（1969）"></a>T3： 数组元素的最小非零乘积（1969）</h1><p>这里呢考到了一个快速幂加上指数取模。 也是一个贪心，但是这个贪心比较好看出来，因为均值不等式，俩个数越相近，乘积越大，在和为一定的时候，也就说明了在非零的情况下，一个是一，一个是最大值这样是最小的。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">1</span>%p;<br>        <span class="hljs-keyword">while</span> (b&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> ((b&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)&#123;res= (<span class="hljs-keyword">int</span>) (((<span class="hljs-keyword">long</span>)res*a)%p);&#125;<span class="hljs-comment">//按位与</span><br>                a=(<span class="hljs-keyword">int</span>)((<span class="hljs-keyword">long</span>)a*a%p);<br>                b&gt;&gt;=<span class="hljs-number">1</span>;<br>       &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minNonZeroProduct</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>        <span class="hljs-comment">// int res = 0;</span><br><br>    <span class="hljs-keyword">int</span> n = ( ( (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)<span class="hljs-number">1</span> &lt;&lt; p )- <span class="hljs-number">1</span>)% mod ;<br>    <span class="hljs-comment">// res = max(res , t);</span><br>    <span class="hljs-keyword">int</span>  t =( ( (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)<span class="hljs-number">1</span> &lt;&lt; (p - <span class="hljs-number">1</span>) )- <span class="hljs-number">1</span>) % (mod - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// int a = ((long long )1 &lt;&lt; p) % mod - 2;</span><br>    <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">qmi</span>(n - <span class="hljs-number">1</span> , t, mod);<br>    <span class="hljs-comment">// res = max(r , t);</span><br>    <span class="hljs-keyword">int</span> mn =(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)x * n % mod;<br>    <span class="hljs-comment">// res = max(res , h);</span><br>    <span class="hljs-keyword">return</span> mn;<br><br><br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>至于指数取模问题，讨论区上很多人写指数不要取模，其实不是这样的。</p><p>指数是可以取模的，但是不能直接取</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210816133711933.png" alt="image-20210816133711933"></p><p>这里提到的已经很详细了，在这里就是质数取模的特点，也就是p-1就ok了</p><hr><h1 id="T4：你能穿过矩阵的最后一天（1970）"><a href="#T4：你能穿过矩阵的最后一天（1970）" class="headerlink" title="T4：你能穿过矩阵的最后一天（1970）"></a>T4：你能穿过矩阵的最后一天（1970）</h1><p>这里我用的是多源bfs + 二分，看到题解说有并查集更快的做法，还没有仔细看之后会更新出来</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><br>   <br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// static const int N = 5e3 + 10;</span><br>    <br>    <span class="hljs-comment">// int dist[N][N];</span><br>    <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br>   <br>        <br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">latestDayToCross</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; cells)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> r = row * col;<br>        <span class="hljs-comment">// cout &lt;&lt; cells[0][0] &lt;&lt; cells[0][1] &lt;&lt; endl;</span><br>        <span class="hljs-keyword">bool</span> st[row +<span class="hljs-number">10</span>][col + <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">while</span> (l &lt; r)&#123;<br>            <span class="hljs-comment">// exit(0);</span><br>            <span class="hljs-keyword">int</span> mid = l+r + <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-number">1</span>  ;<br>            <span class="hljs-comment">// cout &lt;&lt; mid;</span><br>          <span class="hljs-keyword">bool</span>  flag = <span class="hljs-literal">false</span>;<br>          <br>            <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>        <span class="hljs-comment">// memset(dist, 0x3f, sizeof dist);</span><br>        queue&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; q;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mid; i ++ )&#123;<br>            <span class="hljs-comment">// q.push(&#123;cells[i][0], cells[i][1]&#125;);</span><br>            st[cells[i][<span class="hljs-number">0</span>]][cells[i][<span class="hljs-number">1</span>]] = <span class="hljs-literal">true</span>;<br>        &#125;<br>       <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= col; i ++ ) &#123;<br>            <span class="hljs-comment">// cout &lt;&lt; st[1][1] &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span>(!st[<span class="hljs-number">1</span>][i])&#123;<br>             q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">1</span>, i&#125;);<br>             <br>        &#125;<br>        &#125;<br>        <br><br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">auto</span> a = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-comment">// cout &lt;&lt; a.first &lt;&lt; a.second &lt;&lt; endl;</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++ )&#123;<br>                <span class="hljs-keyword">int</span> x = a.first + dx[i];<br>               <br>                <span class="hljs-keyword">int</span> y = a.second + dy[i];<br>                <span class="hljs-keyword">if</span>( x &gt; row || x &lt;= <span class="hljs-number">0</span> || y &gt; col || y &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <br>                <br>                <span class="hljs-keyword">if</span>(x == row) &#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                 <span class="hljs-keyword">break</span>;&#125; <br>                <span class="hljs-comment">//  if(mid = 3) exit(0);</span><br>                <span class="hljs-comment">// if(!)&#123;</span><br>                    <span class="hljs-keyword">if</span>(!st[x][y])&#123;<br>                        q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>                    st[x][y] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                    <br>                <span class="hljs-comment">// &#125;</span><br>                <br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">//  </span><br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; flag &lt;&lt; endl ;</span><br>        <span class="hljs-comment">// exit(0);</span><br>            <span class="hljs-keyword">if</span>(flag) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// </span><br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="更新一个并查集的做法："><a href="#更新一个并查集的做法：" class="headerlink" title="更新一个并查集的做法："></a>更新一个并查集的做法：</h4><p>并查集 + 时光倒流</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> p[N + <span class="hljs-number">2</span>];<br><span class="hljs-keyword">bool</span> st[N];<br><br><br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>   <span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> x == p[x] ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> fx = <span class="hljs-built_in">find</span>(x), fy = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (fx == fy)<br>            <span class="hljs-keyword">return</span>;<br><br>        p[fx] = fy;<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">latestDayToCross</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; cells)</span> </span>&#123;<br>        <span class="hljs-comment">// cout &lt;&lt; (++i) &lt;&lt; endl;</span><br><span class="hljs-comment">//   cout &lt;&lt;st[1] &lt;&lt; endl;</span><br><br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row * col + <span class="hljs-number">2</span>; i ++ ) p[i] = i;<br><br>    <span class="hljs-keyword">int</span> S = row * col;<br>    <span class="hljs-keyword">int</span> E = row * col + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = row * col - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )&#123;<br>        <span class="hljs-keyword">int</span> ax = cells[i][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>, ay = cells[i][<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br><br>        st[ax * col + ay] = <span class="hljs-literal">true</span>; <br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j ++ )&#123;<br>            <span class="hljs-keyword">int</span> x = ax + dx[j];<br>            <span class="hljs-keyword">int</span> y = ay + dy[j];<br>            <br>            <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span> || x &gt;= row || y &lt; <span class="hljs-number">0</span> || y &gt;= col || !st[x * col + y]) <span class="hljs-keyword">continue</span>;<br>            <br>            <span class="hljs-built_in">add</span>(ax * col + ay, x * col + y);            <br>        &#125;<br>       <span class="hljs-keyword">if</span>(ax == <span class="hljs-number">0</span>)<span class="hljs-built_in">add</span>(S, ax * col + ay);<br>            <span class="hljs-keyword">if</span>(ax == row - <span class="hljs-number">1</span>) <span class="hljs-built_in">add</span>(ax * col + ay, E);<br><br>             <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(S) == <span class="hljs-built_in">find</span>(E)) <span class="hljs-keyword">return</span> i;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>这里呢要求第一行到最后一行是否有可行通路，那么我们逆向走的方法，利用超级源点和汇点来操作，如果源点和汇点联通了，那么就表示可以了</p><hr><p class="note note-success">可能是个人能力问题，很不习惯lc这种函数式编程</p>]]></content>
    
    
    <categories>
      
      <category>lc周赛</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心</tag>
      
      <tag>快速幂</tag>
      
      <tag>多源bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于快排和归并排序</title>
    <link href="/posts/775143932.html"/>
    <url>/posts/775143932.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章会讲到最常用的排序算法–快排和归并排序（不是冒泡和选择！！），超详细的！！</p><span id="more"></span><h1 id="快排-amp-归并排序"><a href="#快排-amp-归并排序" class="headerlink" title="快排&amp;归并排序"></a>快排&amp;归并排序</h1><p>首先谈一谈为什么摒弃掉了冒泡和选择排序：</p><p>冒泡排序和选择排序在效率上是很低的，时间复杂度在o（n^2）这个量级。</p><p>所以说冒泡和选择就是一无是处了？</p><ol><li>从算法复杂性上来看，冒泡排序可以从生活中找到场景，实现逻辑相对简单、快速排序由于涉及到每趟都要更新分界值在理解上有一定的复杂度。</li><li>在稳定性来说，冒泡排序的时间复杂度是非常稳定的，快排在最坏的情况下也会达到n^2</li></ol><hr><p>那就正式讲一讲快排和归并排序：</p><h2 id="快速排序（quick-sort）o（nlogn）"><a href="#快速排序（quick-sort）o（nlogn）" class="headerlink" title="快速排序（quick sort）o（nlogn）"></a>快速排序（quick sort）o（nlogn）</h2><p>这个排序就如他的名字一样特别快,利用了分治的思想。</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>这个排序的主要思想是什么呢：</p><ul><li>首先在一个未排序的序列中选出一个分界值（随机选，一般我们选中间值或者是左一或右一）</li><li>然后把比这个分界值小的放在左边，比这个分界值大的放在右侧</li><li>以这个方法，递归排左边和右边</li></ul><p>听着抽象看一个动态图了解一下排序过程把：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1130_1196bbb27a-2.gif" alt="2.gif"></p><h3 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h3><p>给出一个代码模板，也就是我们俗称的板子</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[],<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>       <span class="hljs-keyword">if</span> (r&lt;=l)<span class="hljs-keyword">return</span>;<br>       <span class="hljs-keyword">int</span> standard=q[l];<br>       <span class="hljs-keyword">int</span> left=l-<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">int</span> right=r+<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>           <span class="hljs-keyword">while</span> (q[++left]&lt;standard);<span class="hljs-comment">//想要倒序就把这俩行的大于小于号反置</span><br>           <span class="hljs-keyword">while</span> (q[--right]&gt;standard);<br>          <span class="hljs-keyword">if</span> (left&lt;right)&#123;<br>               <span class="hljs-keyword">int</span> t = q[left];<br>               q[left] = q[right];<br>               q[right] = t;<br>           &#125;<br>       &#125;<br>       quickSort(q,l,right);<br>       quickSort(q,right+<span class="hljs-number">1</span>,r);<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>大家在写的时候，在15，16行这里可能会出现边界问题</p><p>我对边界做了一个总结：</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">quickSort(<span class="hljs-keyword">q</span>, l, j);<br>quickSort(<span class="hljs-keyword">q</span>, j + <span class="hljs-number">1</span>, r);<br>或<br><br>quickSort(<span class="hljs-keyword">q</span>, l, i - <span class="hljs-number">1</span>);<br>quickSort(<span class="hljs-keyword">q</span>, i, r);<br>是因为对于第一次处理后的数组，索引i左侧的数字都是小于等于<span class="hljs-keyword">x</span>，但不包括<span class="hljs-string">q[i]</span>。索引i右侧的数字都是大于等于<span class="hljs-keyword">x</span>，包括<span class="hljs-string">q[i]</span>。故区间分为[l,i-<span class="hljs-number">1</span>]和[i,r]。<br>同理，对于第一次处理后的数组，索引j左侧的数字都是小于等于<span class="hljs-keyword">x</span>，包括<span class="hljs-string">q[j]</span>。索引j右侧的数字都是大于等于<span class="hljs-keyword">x</span>，不包括<span class="hljs-string">q[j]</span>。故区间分为[l,j]和[j+<span class="hljs-number">1</span>,r]。<br><br>再对<span class="hljs-keyword">x</span>位置小结：<br><br>如果区间取[l,i-<span class="hljs-number">1</span>]和[i,r]这种，那么<span class="hljs-keyword">x</span>不应该取左边界(l、(l+r)/<span class="hljs-number">2</span>)。<br>应取 <span class="hljs-keyword">x</span> = <span class="hljs-string">q[r]</span>; <span class="hljs-keyword">x</span> = <span class="hljs-string">q[(l+r+1)/2]</span>;<br><br>如果区间取[l,j]和[j+<span class="hljs-number">1</span>,r]这种，那么<span class="hljs-keyword">x</span>不应该取右边界(如r、(l+r+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)。<br>应取 <span class="hljs-keyword">x</span> = <span class="hljs-string">q[l]</span>; <span class="hljs-keyword">x</span> = <span class="hljs-string">q[(l+r)/2]</span>;<br><br>自己选择其中一种即可。<br></code></pre></div></td></tr></table></figure><p>理解后背下一种即可</p><h3 id="时间复杂度分析："><a href="#时间复杂度分析：" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h3><p><strong>了解一个算法后，时间的复杂度分析环节必不可少呀！！</strong></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/20190418144938184.png" alt="img"></p><p>根据代码我们知道，每一层的递归操作次数为该次递归所传入的元素个数，忽略每次减去的枢轴（1个元素并没有给到下一层，但是每层这里减掉一个常数对复杂度的分析影响不大，所以暂时忽略），即：</p><p>第1层是n次，</p><p>第2层有2次递归，每次n/2次，共n次操作，</p><p>第3层有4次递归，每次n/4次，共n次操作，</p><p>……</p><p>（最后一层）第k层有k次递归，每次n/2^(k-1)次，共n次操作</p><p>由于递归结束的条件是只有一个元素，所以这里的n/2^(k-1)=1   =&gt;   k=logn+1 </p><p>即递归树的深度为logn</p><p>时间复杂度=每层的操作次数*树的深度=nlogn 即：O(nlgn);</p><p>这就得出了时间复杂度</p><p><strong>要注意的是，快排这里说的时间复杂度是平均时间复杂度，因为不可能每次都是对半分</strong></p><h2 id="归并排序（merge-sort）o（nlogn）"><a href="#归并排序（merge-sort）o（nlogn）" class="headerlink" title="归并排序（merge sort）o（nlogn）"></a>归并排序（merge sort）o（nlogn）</h2><p>归并也是利用到了分治的思想哦</p><h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>先看图解：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1024555-20161218163120151-452283750.png" alt="img"></p><p>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。</p><p>可以明确的看出，这个排序分俩个阶段，一个是分区间的阶段，一个是排序阶段，以下来一一解读</p><p>分阶段：</p><p><strong>分</strong>阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n。</p><p>治阶段：（重点，思想很重要，之后这种思想可能会一直出来）</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1024555-20161218194508761-468169540.png" alt="img"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/1024555-20161218194621308-588010220.png" alt="img"></p><p>这就是治阶段的排序算法，是不是会联想到双指针算法呢，是的，就是典型的不同区间的双指针算法，之后还会写关于双指针算法的博客的</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>直接上板子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[],<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l&gt;=r) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">int</span> mid =l+r &gt;&gt;<span class="hljs-number">1</span>;<br>mergeSort(q, l, mid);<br>mergeSort(q, mid+<span class="hljs-number">1</span>, r);<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i&lt;=mid&amp;&amp;j&lt;=r) &#123;<br><span class="hljs-keyword">if</span> (q[i]&lt;=q[j]) t[k++]=q[i++];<span class="hljs-comment">//这里的符号反向就可以逆序输出</span><br><span class="hljs-keyword">else</span> t[k++]=q[j++];<br>&#125;<br><span class="hljs-keyword">while</span> (i&lt;=mid) &#123;<br>t[k++]=q[i++];<br>&#125;<br><span class="hljs-keyword">while</span> (j&lt;=r) &#123;<br>t[k++]=q[j++]; <br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j2 = <span class="hljs-number">0</span>,j3=l; j3 &lt;=r ; j2++,j3++) &#123;<br>q[j3]=t[j2];<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里的边界值处理也是挺蛋疼的，建议理解原理后，把模板直接背过</p><h3 id="时间复杂度的分析："><a href="#时间复杂度的分析：" class="headerlink" title="时间复杂度的分析："></a>时间复杂度的分析：</h3><p>这里的时间复杂度分析和快排非常相似</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/20170909101802866" alt="这里写图片描述"></p><p>从这个递归树可以看出，第一层时间代价为cn，第二层时间代价为cn/2+cn/2=cn…..每一层代价都是cn，总共有logn+1层。所以总的时间代价为cn*(logn+1).时间复杂度是o(nlogn).</p><p>我们分析快排和归并排序的时间复杂度的时候，一般用到的都是这种递归树</p><hr>所以快排和归并排序你学会了吗？😄]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021-7-11</title>
    <link href="/posts/1617049186.html"/>
    <url>/posts/1617049186.html</url>
    
    <content type="html"><![CDATA[<h2 id="每日心情和事情分享"><a href="#每日心情和事情分享" class="headerlink" title="每日心情和事情分享"></a>每日心情和事情分享</h2><span id="more"></span><p>最近给我的感觉就是过的很费，没有做什么实质性的东西，为了不挂科在学文化课，就是挺功利的。</p><p>就感觉是啥也没干一天就过去了，这样的日子已经持续了不下一周了，都快疯掉了。</p><p>并且之后要做的事真的很多，想赶出来时间早点去弄，却天天还在学文化课。</p><ul><li><input disabled="" type="checkbox"> 移动应用大赛</li><li><input disabled="" type="checkbox"> 算法提高</li><li><input disabled="" type="checkbox"> 剪辑视频</li><li><input disabled="" type="checkbox"> 讲解算法（在b站）</li><li><input disabled="" type="checkbox"> 大数据分析比赛（py三大库，matplotlib，numpy，pandas）</li><li><input disabled="" type="checkbox"> 排课系统的大创（要先学好redis和boot）</li><li><input disabled="" type="checkbox"> springboot</li><li><input disabled="" type="checkbox"> redis</li><li><input disabled="" type="checkbox"> 编译原理</li><li><input disabled="" type="checkbox"> 概率论</li><li><input disabled="" type="checkbox"> 驾照</li><li><input disabled="" type="checkbox"> c++（竞赛向）</li><li><input disabled="" type="checkbox"> Java新特性（lambda表达式等）</li></ul><p>属实是挺多的吧，但是也会努力在假期赶出很多。</p><p>希望等下学期来的时候我应该已经提升很多了吧，<strong>不是应该，是肯定！！！</strong></p><p>这篇文章不会删掉，假期回来后看看学了多少，之后也会发出对应的文章。</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>筛质数</title>
    <link href="/posts/2574143239.html"/>
    <url>/posts/2574143239.html</url>
    
    <content type="html"><![CDATA[<p>说到筛质数，大家想到的可能都会是那个暴力枚举的方法，这篇文章将讲述三种比暴力枚举好的方法：朴素筛，埃氏筛法，欧拉筛法</p><span id="more"></span><p>由一道题来引出三种筛质数的方法：</p><h2 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h2><blockquote><p>给定一个正整数 n，请你求出 1∼n 中质数的个数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含整数 n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示 1∼n1∼n 中质数的个数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤10^6</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure></blockquote><h3 id="比较暴力的解法：o（nlogn）"><a href="#比较暴力的解法：o（nlogn）" class="headerlink" title="比较暴力的解法：o（nlogn）"></a>比较暴力的解法：o（nlogn）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> shai;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>;<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cnt;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> primes[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> st[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> num=scanner.nextInt();<br><br>        get_primes(num);<br>        System.out.println(cnt);<br>        <span class="hljs-comment">//System.out.println(Arrays.toString(primes));</span><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i])&#123;<br>                primes[cnt++]=i;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>*i; j &lt;=n ; j+=i) &#123;<br>                    st[j]=<span class="hljs-keyword">true</span>;<br>            &#125;<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个primes数组来存质数；其实这个就比原来那个暴力的就好一点了，但是缺点还是比较明显的，就是为每一个数筛倍数的时候很明显是有可能和之前筛过的重复。举个例子</p><p>6这个数在2的时候会把6筛掉，4的时候也会去把6筛掉，很明显重复次数是非常多</p><p>这个时间复杂度怎么理解呢？</p><img src="http://jin-xuanjie.gitee.io/note-pad\image-20210707182426474.png" alt="image-20210707182426474" style="zoom:50%;" /><p>所有的次数就是第一行，然后把n提出来就是第二行的那个式子，第三行是怎么来的呢？</p><p>这时我们就要利用调和级数，就会得到最后一行，所以时间复杂度就得出了</p><h3 id="埃氏筛法：O-nloglogn"><a href="#埃氏筛法：O-nloglogn" class="headerlink" title="埃氏筛法：O(nloglogn)"></a>埃氏筛法：O(nloglogn)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i])&#123;<br>                primes[cnt++]=i;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>*i; j &lt;=n ; j+=i) &#123;<br>                st[j] = <span class="hljs-keyword">true</span>;<br>            &#125;&#125;<br><br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>这里比上面优化的一点是，不是每个数的自己的倍数都去改成true，而是只改质数的，<strong>毕竟所有的合数可以被质数整除</strong>，这个就是比朴素筛法的优化点，但是依旧不够，还是有冲突</p><p>21既是3的倍数也是7的倍数，那么3和7都会把他筛一遍，很明显是有浪费的，那么就会出现优化</p><p>这个时间复杂度计算用到了<strong>质数定理</strong>，具体可以去百度查，我这里放一个图片吧</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210707182335990.png" alt="image-20210707182335990"></p><p>这个质数定理，大概说了一件什么事呢？ 就是在n很大的时候，n以下的质数个数趋近于n/lgn</p><p>所以带进去时间复杂度就是O(nloglogn)</p><h3 id="线性筛法：-也叫欧拉筛-o-n"><a href="#线性筛法：-也叫欧拉筛-o-n" class="headerlink" title="线性筛法：(也叫欧拉筛)o(n)"></a>线性筛法：(也叫欧拉筛)o(n)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000010</span>;<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cnt;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> primes[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> st[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> num=scanner.nextInt();<br><br>        get_primes(num);<br>        System.out.println(cnt);<br>        <span class="hljs-comment">// System.out.println(Arrays.toString(primes));</span><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;=n ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i]) &#123;<br>                primes[cnt++] = i;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>; primes[j] &lt;=n/i ; j++) &#123;<br>                st[primes[j]*i] = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">if</span> ·(i%primes[j]==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>主要思想是每个数都只能被自己的最小质因数排除,因为所有的合数都会被质数筛掉，这样每个数就不会被重复筛，那么理所当然的时间复杂度就是o（n）</p><hr><p>这时有人可能会说，有欧拉筛说这么多干嘛？</p><p>的确是的，以后我们用的都是时间最节约的欧拉筛，但是对于更多人而言，我觉得演变的思想理解，远比一个代码模板重要的多。</p><hr><p>所以筛质数的方法你理解了吗？😄</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021/7/6</title>
    <link href="/posts/3683252258.html"/>
    <url>/posts/3683252258.html</url>
    
    <content type="html"><![CDATA[<h2 id="每日的心情，和事情分享"><a href="#每日的心情，和事情分享" class="headerlink" title="每日的心情，和事情分享"></a>每日的心情，和事情分享</h2><span id="more"></span><p>之前见到的那个人今天又有见到，意外的是旁边还有人😄</p><hr><p>今天的状态还挺差的，就没有怎么学习，一下午等答辩最后都没有答上，也是挺难受的。</p><p>晚上去洗个澡，来写了这篇日记，没什么感慨的，就是总结一下今天，最近的状态挺糟糕的，希望能早点脱离出这种状态</p><p>之后为了算法竞赛和一些事情的考虑，准备转战c++了，又要忙一阵了，想了想这不就是我们这个年纪该做的事吗，如果现在做着80岁了还能做的事，到了那个年纪的我也会对自己很失望吧。</p><hr><p>之后我准备试着搭一下oj，不知道会不会成功hh</p><p>如果成功了，之后的教学就又会轻松很多，刷题也可以来我这里了，配着在B站的课程一起食用应该是不错</p><hr><p>有时候累了倦了就停下来休息休息，没什么的。</p><p><strong>我是这样觉得：开心的时候呢就笑，痛了就哭，困了就睡，喜欢就爱，饿了就吃，恨了就放手，累了就休息，生活不易，简单那才是最好</strong></p><p class="note note-success">希望看了这篇文章的人都能掌握自己的航舵，走向自己精彩的人生！！</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次献血</title>
    <link href="/posts/2673705868.html"/>
    <url>/posts/2673705868.html</url>
    
    <content type="html"><![CDATA[<p>今天第一次献血，也算是完成了自己之前比较怕的事情吧！</p><span id="more"></span><p>原本没有想着去，因为室友的一句话，就动了要去的念头。其实还真的蛮怕的，主要的恐惧还是因为未知，所以就想要挑战一下自己吧。</p><p>另一方面呢想了想，其实对于我们来说不会任何坏处，甚至会有好处，如果我们的这一点点的努力，真的可以让一些人得到帮助，我觉得就凭这个也值得我去做。</p><p>种种原因驱使着我去了献血······</p><p>献完血后，之前的恐惧也就烟消云散了，这算不算战胜了自己呢？hh</p><p>有时候我们拼了命的翻山越岭，去越过山头，有时候山的另一面可能真的没啥，或许还比山的这面还要差，有时候我们很怕的事情到头来也不过是过眼云烟</p><p><strong>不管怎样吧，常怀赤子之心，不坠青云之志，我觉得就够了，希望之后我在任何事情上，都会有今天的勇气去不断战胜自己，加油吧！</strong></p><p>献的时候忘记照相了，就附俩张献血证的照片吧hh：</p><img src="http://jin-xuanjie.gitee.io/note-pad\image-20210705185335114.png" alt="image-20210705185335114" style="zoom: 25%;" /><img src="http://jin-xuanjie.gitee.io/note-pad\image-20210705185434461.png" alt="image-20210705185434461" style="zoom:33%;" />]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL语句</title>
    <link href="/posts/3038647440.html"/>
    <url>/posts/3038647440.html</url>
    
    <content type="html"><![CDATA[<p>sql语句是操作对数据库和表增删改查的基础，并且sql语句是对任何关系型数据库系统都是通用的，本笔记以mysql为例子哦！</p><span id="more"></span><h1 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h1><h2 id="DQL语句"><a href="#DQL语句" class="headerlink" title="DQL语句"></a>DQL语句</h2><h3 id="简单的查询："><a href="#简单的查询：" class="headerlink" title="简单的查询："></a>简单的查询：</h3><p>select 字段名1，字段名2， from 表名。</p><p>提示：</p><ul><li>任何一条sql语句以；结尾</li><li>sql不区分大小写</li></ul><p>我们的字段可以参与数学运算</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210121616640.png" alt="image-20210210121616640"></p><p>也可以为这个数学运算后的字段重新改个名，如下：</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210121712952.png" alt="image-20210210121712952"></p><p>若有中文要括上单引号；</p><p>标准sql语句中要求字符串使用单引号括起来。</p><p>查询所有字段：</p><p>实际开发中不建议使用。</p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>利用where来限制条件</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210122302072.png" alt="image-20210210122302072"></p><p>执行顺序：先from，然后where，最后select</p><p>对于不等于来说可以使用！=也可以使用&lt;&gt;，都是可以的。 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210123159560.png" alt="image-20210210123159560"></p><p>and可以</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210123325041.png" alt="image-20210210123325041"></p><p>between可以（between是闭区间）</p><p>between and使用的时候小数字在前，大数字在后。</p><p>between and也可以用在字符方面，此时是左闭右开<img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210124021482.png" alt="image-20210210124021482"></p><p>数据库中null不是一个值，代表什么都没有，为空</p><p>空不是一个值，不能用等号来衡量，</p><p>必须使用is null 或者is not null。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210125341124.png" alt="image-20210210125341124"></p><p>查询时or和and是由优先级的。</p><p>当运算符的优先级不确定的时候利用小括号。</p><p>in关键字：</p><p>in等同于or</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210125651759.png" alt="image-20210210125651759"></p><p>in后面的不是区间，而只是一个值。</p><p>当然有in 也就也有not in</p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>必须掌握%和_的使用</p><p>%代表任意多个字符，_代表任意的一个字符。</p><h3 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h3><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210134930895.png" alt="image-20210210134930895"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210135420494.png" alt="image-20210210135420494"></p><p>执行顺序，oredr by是最后执行的。</p><h3 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h3><p>输入一行，输出一行。</p><p>只要数学表达式中有null出现，最终结果就必须是null</p><p>ifnull（）空处理函数</p><p>ifnull（可能为null的数据，被当做什么处理）：单行处理</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210154445168.png" alt="image-20210210154445168"></p><h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><ul><li>count 技术</li><li>sum求和</li><li>avg平均值</li><li>max最大值</li><li>min最小值</li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210153555737.png" alt="image-20210210153555737"></p><p>也叫多行处理函数：输入多行，最终输出结果是一行。</p><p>分组函数会自动忽略空（null）。</p><h3 id="group-by-和having"><a href="#group-by-和having" class="headerlink" title="group by 和having"></a>group by 和having</h3><p>group by：按照某个字段或者某些字段进行分组</p><p>having：对分组之后的数据进行再次的过滤。</p><p>分组函数都会和group一起使用。分组函数都会在group by结束之后再执行的。没有group by整张表就自成一组。</p><p>where后面不能用分组函数。</p><p>再写一遍顺序：</p><ol><li>from</li><li>where</li><li>group by</li><li>having</li><li>select</li><li>order by</li></ol><p>若一条sql语句中有group by的话，select后面只能加分组函数和分组的字段，其他的一律不行。</p><p>多个字段可以联合起来分组</p><p> <img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210191259506.png" alt="image-20210210191259506"></p><p>可以用where过滤的话，尽量在where就把数据过滤掉。</p><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210192727699.png" alt="image-20210210192727699"></p><p>distinct只能出现在所有字段的最前面，如果多条字段说明是联合去重。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210194456287.png" alt="image-20210210194456287"></p><h3 id="完整的dql语句："><a href="#完整的dql语句：" class="headerlink" title="完整的dql语句："></a>完整的dql语句：</h3><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210192537089.png" alt="image-20210210192537089"></p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>一一般来说。大部分都不是从单表中查询数据，一般都是多张联合取出的最终结果，在实际开发中，一般一个业务都会对应多张表。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210194906219.png" alt="image-20210210194906219"> </p><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><p>根据语法：</p><ul><li>sql92</li><li>sql99</li></ul><p>根据连接方式</p><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li><li>全连接（很少用）</li></ul><h5 id="笛卡尔积现象"><a href="#笛卡尔积现象" class="headerlink" title="笛卡尔积现象"></a>笛卡尔积现象</h5><p>当俩张表进行连接查询的时候，没有任何条件限制，最终查询结果条数是俩张表记录条数的乘积。</p><p>关于表的别名：</p><ul><li>执行效率高</li><li>可读性好</li></ul><p>避免笛卡尔现象的方法是加条件来进行过滤。</p><p>但是要注意的是，避免了笛卡尔积现象，并不会减少记录的匹配次数，只不过显示的时候显示的是有效数据。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210203216468.png" alt="image-20210210203216468"></p><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p>条件是等量关系</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210212925382.png" alt="image-20210210212925382"></p><p>上述是sql99语法</p><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210224100786.png" alt="image-20210210224100786"></p><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210231319594.png" alt="image-20210210231319594"></p><p>假象复制一份相同的，然后自连接。</p><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>假设a，b表进行连接，使用外连接的话，ab俩张表中一张是主表，一张是副表，主要查询主表上的数据，捎带着查询副表，当副表中没有和主表数据匹配上的自动模拟出null来与之匹配。 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211075820541.png" alt="image-20210211075820541"></p><h4 id="三张以上表查询"><a href="#三张以上表查询" class="headerlink" title="三张以上表查询"></a>三张以上表查询</h4><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211081708047.png" alt="image-20210211081708047"></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>select语句嵌套select语句查询</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211085057173.png" alt="image-20210211085057173"></p><p>where里嵌套（上述）</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211105112132.png" alt="image-20210211105112132"></p><p>这个是from里嵌套</p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>可以将查询结果集相加</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211162901983.png" alt="image-20210211162901983"></p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>limit可以限制条数</p><p>语法是 limit 起点，个数</p><p>分页查询全靠这玩意。</p><p>limit是sql语句中最后执行的一个环节。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211164115218.png" alt="image-20210211164115218"></p><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>建表语句语法格式：</p><p>create table 表名{</p><p>​    字段名 1 数据类型，</p><p>​    字段名 2 数据类型，</p><p>​    字段名 3 数据类型，</p><p>}</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211164701465.png" alt="image-20210211164701465"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211180423765.png" alt="image-20210211180423765"></p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>insert语句：</p><p>insert into 表名（字段名1，2，3，4） values（值1，2，3，4）；</p><p>字段如果只写部分的，就会为其他的字段附上null</p><p>可以省略前面的字段，但是要按照顺序，并且全写。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211182040917.png" alt="image-20210211182040917"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211182618059.png" alt="image-20210211182618059"></p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>可以用default来设定默认值</p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>update</p><p>update 表名 set 字段名=值······ where 条件</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211183216776.png" alt="image-20210211183216776"></p><p>没有限制条件，整张表所有字段全部更新。</p><h2 id="删除数据（表）"><a href="#删除数据（表）" class="headerlink" title="删除数据（表）"></a>删除数据（表）</h2><p>删除表：drop table 表名</p><p>语法格式</p><p>delete from 表名 where 条件；</p><p>没有条件将全部删除</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211184212309.png" alt="image-20210211184212309"></p><h2 id="对于表结构的修改"><a href="#对于表结构的修改" class="headerlink" title="对于表结构的修改"></a>对于表结构的修改</h2><p> 使用工具完成就可以了，因为实际开发中，表一旦设计好，对表结构的修改是很少的。</p><p>增删改查有一个术语：crud操作</p><p>create（增） retrieve（检索） update（修改） delete（删除）</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>添加约束的目的时为了保证表的数据的合法性，有效性，完整性。</p><p>常见的约束：</p><ul><li>非空约束（not null）</li><li>唯一约束（unique）唯一性但可以为null</li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211200536663.png" alt="image-20210211200536663"></p><ul><li>主键约束（primary key）不可为空也不能重复 </li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211201831871.png" alt="image-20210211201831871"></p><p>主键应该不和业务挂钩。<img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211202657776.png" alt="image-20210211202657776"></p><p>可以以这种方式，自动添加自增的主键。</p><ul><li>外键约束（foreign key）</li></ul><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211203647137.png" alt="image-20210211203647137"></p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210211204005433.png" alt="image-20210211204005433"></p><p>外键值可以为null</p><p>被引用的字段可以不用为主键，但至少要有unique约束，是独一无二的。</p><ul><li>检查约束（check）：oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</li></ul><h2 id="悲观锁（行级锁）和乐观锁"><a href="#悲观锁（行级锁）和乐观锁" class="headerlink" title="悲观锁（行级锁）和乐观锁"></a>悲观锁（行级锁）和乐观锁</h2><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210213222734274.png" alt="image-20210213222734274"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>sql语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>mysql</tag>
      
      <tag>sql语言</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK动态代理</title>
    <link href="/posts/3755745285.html"/>
    <url>/posts/3755745285.html</url>
    
    <content type="html"><![CDATA[<p> 之后我们学到的AOP（面向切面编程）的底层就是这个哦，而这个的底层就是反射机制，至少要看一看反射机制再来看看这个呀！</p><span id="more"></span><h1 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h1><p>动态代理基于反射机制</p><p>掌握程度：</p><ul><li>什么是动态代理</li><li>知道动态代理能作什么</li></ul><p>使用代理模式的作用：</p><ul><li>功能增强：在原有的功能上，增加了额外的功能。新增加的功能叫做功能增强</li><li>控制访问：代理类不让你访问目标，例如商家不让用户访问厂家</li></ul><p>实现代理的方式：</p><ul><li>静态代理：<ul><li>自己手工实现，自己创建一个代理类</li><li>代理的目标类也是确定的<ul><li>实现简单，容易理解 </li></ul></li></ul></li><li>动态代理：在程序的执行过程中，使用jdk的反射机制，创建代理类对象，并动态的指定要代理的目标类<ul><li>静态代理中当目标类很多的时候，我们会使用动态代理<ul><li>因为目标类即使很多，代理类可以很少</li><li>当你修改了接口中的方法，不会影响代理类</li></ul></li></ul></li></ul><p>说白一点，动态代理就是具有创建对象的能力</p><h2 id="jdk动态代理的实现"><a href="#jdk动态代理的实现" class="headerlink" title="jdk动态代理的实现"></a>jdk动态代理的实现</h2><ul><li>jdk动态代理：<ul><li>使用java反射包中的类和接口实现动态代理功能</li><li>反射包java.lang.reflect，里面有三个类：<ul><li>invocationhandler<ul><li><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322185518876.png" alt="image-20210322185518876"></li></ul></li><li>Method<ul><li><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322185550552.png" alt="image-20210322185550552"></li></ul></li><li>Proxy<ul><li><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322185613718.png" alt="image-20210322185613718"></li></ul></li></ul></li></ul></li><li>cglib动态代理（了解）<ul><li>cglib是第三方的工具库，创建代理对象 </li><li>cglib原理是继承，通过继承目标类来创建它的子类，在子类中重写父类方法，实现功能的修改</li><li>正因为cgliv是继承，所以要求目标类和方法不是final的</li><li>cglib在很多框架中使用</li></ul></li></ul><p>cglib在代理效率上高于jdk。</p><p>但是一般的开发中不适用cglib，只需要理解即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tett1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        HelloService helloService=new HelloService();</span><br><span class="hljs-comment">//        helloService.sayHello(&quot;jxj&quot;);</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class c=Class.forName(<span class="hljs-string">&quot;com.jxj.HelloService&quot;</span>);<br>            Object obj=c.newInstance();<br>            Method m1 =c.getDeclaredMethod(<span class="hljs-string">&quot;sayHello&quot;</span>,String.class);<br>            Object retValue =m1.invoke(obj,<span class="hljs-string">&quot;jxj&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Class.forname后的参数必须带包名</p><p>上述是利用反射机制调用方法</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322190225001.png" alt="image-20210322190225001"></p><p>handler</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-comment">//必须实现InvocationHandler接口，完成代理类要做的功能(1.调用目标方法，2.执行功能增强)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySellHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Object target=<span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MySellHandler</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>   <span class="hljs-comment">// float price =factory.sell(amount);</span><br>        Object res =<span class="hljs-keyword">null</span>;<br><br>       res= method.invoke(target,args);<br>       <span class="hljs-keyword">if</span> (res!=<span class="hljs-keyword">null</span>)&#123;<br>           Float price = (Float) res;<br>           price+=<span class="hljs-number">25</span>;<br>           res=price;<br><br><br>       &#125;<br>        System.out.println(<span class="hljs-string">&quot;返你一个优惠卷&quot;</span>);<br><span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>mainshop</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainShop</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UsbSell factory =<span class="hljs-keyword">new</span> factory();<br>        InvocationHandler handler=<span class="hljs-keyword">new</span> MySellHandler(factory);<br>     Object proxy=   Proxy.newProxyInstance(factory.getClass().getClassLoader(),factory.getClass().getInterfaces(),handler);<br>        UsbSell usbSell=(UsbSell)proxy;<br>        <span class="hljs-keyword">float</span> price= usbSell.sell(<span class="hljs-number">1</span>);<br>        System.out.println(price);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210322230835265.png" alt="image-20210322230835265"></p><h2 id="动态代理的功能"><a href="#动态代理的功能" class="headerlink" title="动态代理的功能"></a>动态代理的功能</h2><p>可以在不改目标方法功能的前提下，可以在代理中增强自己的代码。</p><p>动态代理必须要有自己的接口</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>原生JAVAWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>计算机技术</tag>
      
      <tag>模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/posts/2414116852.html"/>
    <url>/posts/2414116852.html</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>想用java连接数据库吗，jdbc就是原生的连接数据库技术噢！</p><p>需先了解一种数据库，本笔记以mysql为例子</p><span id="more"></span><p>JDBC:java database connectivity（java语言连接数据库）</p><p>JDBC的本质：jdbc是sun公司指定的一套接口 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210210160127732.png" alt="image-20210210160127732"></p><h2 id="JDBC开发前的准备工作"><a href="#JDBC开发前的准备工作" class="headerlink" title="JDBC开发前的准备工作"></a>JDBC开发前的准备工作</h2><p>先有对应的jar包，先从官网下载对应的驱动jar包，然后将其配置到环境变量classpath中。</p><h2 id="JDBC编程六步"><a href="#JDBC编程六步" class="headerlink" title="JDBC编程六步"></a>JDBC编程六步</h2><ol><li><p>注册驱动（告诉java程序，即将连接的是哪个数据库）</p></li><li><p>获取链接（jvm与数据库进程之间的进程打开了，重量级的，所以一定要记得关闭）</p></li><li><p>获取数据库操作对象（专门执行sql语句的对象）</p></li><li><p>执行sql语句（DQL,DML）</p></li><li><p>处理查询结果集（只有处理的是select这种查询语句的时候，才有这个第五步）</p></li><li><p>释放资源（使用完资源要记得关闭资源，java和数据库属于进程间的东西，使用完要关闭）</p></li></ol><p>连接实例：（如下）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test103</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Statement stmt =<span class="hljs-keyword">null</span>;<br>Connection connection =<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>        Driver driver =<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver();<br><br>            DriverManager.registerDriver(driver);<br>            String url=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>;<br>            String user=<span class="hljs-string">&quot;root&quot;</span>;<br>            String password=<span class="hljs-string">&quot;jxj123456&quot;</span>;<br><br>            connection=DriverManager.getConnection(url,user,password);<br>            System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>+connection);<br>stmt=connection.createStatement();<span class="hljs-comment">//statement专门执行sql语句的</span><br>String sql =<span class="hljs-string">&quot;insert into t_student(name) values(&#x27;jxj&#x27;)&quot;</span>;<br><span class="hljs-keyword">int</span> count =stmt.executeUpdate(sql);<span class="hljs-comment">//是影响数据库的记录条数</span><br>System.out.println(count ==<span class="hljs-number">0</span>?<span class="hljs-string">&quot;保存失败&quot;</span>:<span class="hljs-string">&quot;保存成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(stmt !=<span class="hljs-keyword">null</span>)&#123;<br>stmt.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(connection !=<span class="hljs-keyword">null</span>)&#123;<br>connection.close();<br>&#125;&#125;<span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>jdbc中sql语句的最后不需要有分号； 写上报错</p><p>上述的注册驱动不常用，常用的注册驱动使用反射机制，因为这个接收的是字符串，我们可以使用配置文件。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210212234248396.png" alt="image-20210212234248396"></p><h2 id="url："><a href="#url：" class="headerlink" title="url："></a>url：</h2><p>统一资源定位符（网络中某个资源的绝对路径）</p><p>url包括协议+ip+端口+资源名</p><h2 id="使用资源绑定器-删除"><a href="#使用资源绑定器-删除" class="headerlink" title="使用资源绑定器(删除)"></a>使用资源绑定器(删除)</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test103</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ResourceBundle bundle =ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>String driver =bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>String url =bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>String user =bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>String password =bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br>Statement stmt =<span class="hljs-keyword">null</span>;<br>Connection connection =<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>Class.forName(driver);<br>       connection=DriverManager.getConnection(url,user,password);<br>            System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>+connection);<br>stmt=connection.createStatement();<span class="hljs-comment">//statement专门执行sql语句的</span><br>String sql =<span class="hljs-string">&quot;delete from t_student where name =&#x27;jxj&#x27; &quot;</span>;<br><span class="hljs-keyword">int</span> count =stmt.executeUpdate(sql);<span class="hljs-comment">//是影响数据库的记录条数，executeupdate只能进行增删改</span><br>System.out.println(count ==<span class="hljs-number">0</span>?<span class="hljs-string">&quot;删除失败&quot;</span>:<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(stmt !=<span class="hljs-keyword">null</span>)&#123;<br>stmt.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(connection !=<span class="hljs-keyword">null</span>)&#123;<br>connection.close();<br>&#125;&#125;<span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>jdbv.properties:</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/bjpn</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">jxj123456</span><br></code></pre></div></td></tr></table></figure><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210213001734130.png" alt="image-20210213001734130"></p><p>sql语句结果集的本质（上图）</p><p>jdbc中所有的下标都从1开始</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test103</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ResourceBundle bundle =ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>String driver =bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>String url =bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>String user =bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>String password =bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>Statement stmt =<span class="hljs-keyword">null</span>;<br>Connection connection =<span class="hljs-keyword">null</span>;<br>ResultSet rs =<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><br><br>           Class.forName(driver);<br>            <br><br>            connection=DriverManager.getConnection(url,user,password);<br>            System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>+connection);<br>stmt=connection.createStatement();<span class="hljs-comment">//statement专门执行sql语句的</span><br>String sql =<span class="hljs-string">&quot;select * from t_student &quot;</span>;<br>rs =stmt.executeQuery(sql);<span class="hljs-comment">//是影响数据库的记录条数</span><br><span class="hljs-keyword">while</span>(rs.next())&#123;<br>System.out.println(rs.getString(<span class="hljs-string">&quot;no&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;classno&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;sex&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+rs.getString(<span class="hljs-string">&quot;birth&quot;</span>));<br>&#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(rs !=<span class="hljs-keyword">null</span>)&#123;<br>rs.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(stmt !=<span class="hljs-keyword">null</span>)&#123;<br>stmt.close();<br>&#125;&#125;<br><span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">if</span>(connection !=<span class="hljs-keyword">null</span>)&#123;<br>connection.close();<br>&#125;&#125;<span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>查询数据库数据</p><p>增删改数据时返回的是int</p><p>查询时返回的是结果集</p><p>利用getstring的方法来获取，参数可以是列数也可以是字段名称</p><p>还可以以其他类型获取，比如用getint获取可以进行运算。</p><h2 id="IDEA-jdbc环境的准备"><a href="#IDEA-jdbc环境的准备" class="headerlink" title="IDEA jdbc环境的准备"></a>IDEA jdbc环境的准备</h2><p>先有jdbc的jar包，然后右键模块点open module setting 然后点加号把jar包引进来即可</p><h3 id="powerdesigner的下载和破解"><a href="#powerdesigner的下载和破解" class="headerlink" title="powerdesigner的下载和破解"></a>powerdesigner的下载和破解</h3><p>将破解文件替换入安装目录当中即可</p><p>简单的使用看：</p><p><a href="https://www.bilibili.com/video/BV1Bt41137iB?p=16">JDBC从入门到精通视频教程-JDBC实战精讲_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><h3 id="连接jdbc去登陆的案例"><a href="#连接jdbc去登陆的案例" class="headerlink" title="连接jdbc去登陆的案例"></a>连接jdbc去登陆的案例</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><span class="hljs-keyword">import</span> com.mysql.cj.protocol.Resultset;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Map&lt;String,String&gt; userLoginInfo=initUI();<br>        <span class="hljs-keyword">boolean</span> a =login(userLoginInfo);<br>        System.out.println(a?<span class="hljs-string">&quot;登录成功&quot;</span>:<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>&#123;<br>        Connection conn =<span class="hljs-keyword">null</span>;<br>        Statement stmt =<span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>            stmt =conn.createStatement();<br>            String sql=<span class="hljs-string">&quot;select * from t_user where loginName=&#x27;&quot;</span>+userLoginInfo.get(<span class="hljs-string">&quot;loginName&quot;</span>)+<span class="hljs-string">&quot;&#x27;and loginPwd=&#x27;&quot;</span>+userLoginInfo.get(<span class="hljs-string">&quot;loginPwd&quot;</span>)+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            rs=  stmt.executeQuery(sql);<br>            <span class="hljs-keyword">if</span> (rs.next())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title">initUI</span><span class="hljs-params">()</span> </span>&#123;<br>        Scanner s =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>        String loginName =s.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>        String loginPwd =s.nextLine();<br>        Map&lt;String,String&gt; userLoginInfo =<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginName&quot;</span>,loginName);<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginPwd&quot;</span>,loginPwd);<br>        <span class="hljs-keyword">return</span> userLoginInfo;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>上述的验证方法很容易产生sql注入</p><p>用户输入的信息中包含sql语句的关键字，这些关键字参与sql语句的编译过程。进而达到黑进去的目的。</p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210213115833311.png" alt="image-20210213115833311"></p><p>如何不会产生sql注入</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><br><span class="hljs-keyword">import</span> com.mysql.cj.protocol.Resultset;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Map&lt;String,String&gt; userLoginInfo=initUI();<br>        <span class="hljs-keyword">boolean</span> a =login(userLoginInfo);<br>        System.out.println(a?<span class="hljs-string">&quot;登录成功&quot;</span>:<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>&#123;<br>        Connection conn =<span class="hljs-keyword">null</span>;<br>        PreparedStatement ps =<span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        String loginName =userLoginInfo.get(<span class="hljs-string">&quot;loginName&quot;</span>);<br>        String loginPwd=userLoginInfo.get(<span class="hljs-string">&quot;loginPwd&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>            String sql=<span class="hljs-string">&quot;select * from t_user where loginName= ? and loginPwd= ?&quot;</span>;<br>            ps=conn.prepareStatement(sql);<br>            ps.setString(<span class="hljs-number">1</span>,loginName);<br>            ps.setString(<span class="hljs-number">2</span>,loginPwd);<br>            rs=  ps.executeQuery();<br>            <span class="hljs-keyword">if</span> (rs.next())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ps.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title">initUI</span><span class="hljs-params">()</span> </span>&#123;<br>        Scanner s =<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>        String loginName =s.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>        String loginPwd =s.nextLine();<br>        Map&lt;String,String&gt; userLoginInfo =<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginName&quot;</span>,loginName);<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginPwd&quot;</span>,loginPwd);<br>        <span class="hljs-keyword">return</span> userLoginInfo;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>利用preparestatement预编译的方法来预防。</p><h3 id="preparestatement和statement的对比"><a href="#preparestatement和statement的对比" class="headerlink" title="preparestatement和statement的对比"></a>preparestatement和statement的对比</h3><ul><li>后者存在sql注入问题，前者完美解决</li><li>后者编译一次执行一次，前者只编译一次，效率高</li><li>前者会在编译时进行安全检查</li><li>综上preparestatement使用较多</li></ul><p>那什么时候使用statement呢？</p><ul><li>在业务方面需要进行sql语句拼接的。必须使用statement</li></ul><h2 id="jdbc的事务处理"><a href="#jdbc的事务处理" class="headerlink" title="jdbc的事务处理"></a>jdbc的事务处理</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        PreparedStatement ps =<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>            conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>            String sql=<span class="hljs-string">&quot;update t_account set Money =? where Account =?&quot;</span>;<br>            ps =conn.prepareStatement(sql);<br>            ps.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>);<br>            ps.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;111&quot;</span>);<br>            <span class="hljs-keyword">int</span> count =ps.executeUpdate();<br>            ps.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">20000</span>);<br>            ps.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;222&quot;</span>);<br>             count +=ps.executeUpdate();<br>             conn.commit();<br>            System.out.println(count ==<span class="hljs-number">2</span>?<span class="hljs-string">&quot;转账成功&quot;</span>:<span class="hljs-string">&quot;转账失败&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            <span class="hljs-keyword">if</span> (conn !=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.rollback();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;&#125;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ps!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<span class="hljs-keyword">if</span> (conn!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>重点：</p><ul><li>conn.setAutoCommit(false);</li><li>conn.commit;</li><li>conn.rollback;</li></ul><h2 id="建立util来简化代码"><a href="#建立util来简化代码" class="headerlink" title="建立util来简化代码"></a>建立util来简化代码</h2><p>DBUtil：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc.DBUtil;<br><br><span class="hljs-keyword">import</span> com.mysql.cj.protocol.Resultset;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DBUtil</span> </span>&#123;<br>    <span class="hljs-comment">//为什么要用私有的构造方法呢？</span><br>    <span class="hljs-comment">//为了防止你new对象。</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">DBUtil</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br><br>         Connection conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/bjpn&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;jxj123456&quot;</span>);<br>         <span class="hljs-keyword">return</span> conn;<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;<br>         <span class="hljs-keyword">if</span> (rs !=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 rs.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">if</span> (ps !=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 ps.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">if</span> (conn !=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 conn.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br>         &#125;<br>     &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>主方法调用，并且使用模糊查询：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.jdbc;<br><br><span class="hljs-keyword">import</span> com.bjpn.jdbc.DBUtil.DBUtil;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTest03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        PreparedStatement ps=<span class="hljs-keyword">null</span>;<br>        ResultSet rs=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>           conn= DBUtil.getConnection();<br>            String sql=<span class="hljs-string">&quot;select ename from emp where ename like ?&quot;</span>;<br>            ps=conn.prepareStatement(sql);<br>            ps.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;_A%&quot;</span>);<br>            rs=ps.executeQuery();<br>            <span class="hljs-keyword">while</span> (rs.next())&#123;<br>                System.out.println(rs.getString(<span class="hljs-string">&quot;ename&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            DBUtil.close(conn,ps,rs);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="DAO封装"><a href="#DAO封装" class="headerlink" title="DAO封装"></a>DAO封装</h2><p>DAO是database Access Object 数据库访问对象</p><p>作用：数据库访问对象在开发时提供针对某张表的操作细节</p><p>优点：代码简洁</p><p>DAO类：提供数据库访问对象的类</p><h3 id="DAO类开发规则"><a href="#DAO类开发规则" class="headerlink" title="DAO类开发规则"></a>DAO类开发规则</h3><ul><li>一个DAO类封装的是一张表的开发细节</li><li>DAO类命名规则：表名+Aao</li><li>DAO类所在包命名规则：公司网站域名（倒过来）.dao</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>原生JAVAWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>计算机技术</tag>
      
      <tag>连接数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/posts/2691471937.html"/>
    <url>/posts/2691471937.html</url>
    
    <content type="html"><![CDATA[<h2 id="博客说明："><a href="#博客说明：" class="headerlink" title="博客说明："></a>博客说明：</h2><p><strong>也会在这里分享每天学习和生活的趣事，心情，毕竟生活才是主旋律嘛，比任何东西都要重要得多。</strong></p><hr><p>如果觉得我分享的东西好，可以长期关注这个博客，会持续更新的！！</p><br><p class="note note-success">此博客也仅仅用作学习，和交流，如果有什么建议，欢迎给我留言</p> ]]></content>
    
    
    <categories>
      
      <category>关于博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客说明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/posts/3084993745.html"/>
    <url>/posts/3084993745.html</url>
    
    <content type="html"><![CDATA[<p>本文介绍了到目前为止，几乎可以见到的排序算法，共十种。</p><span id="more"></span><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><ul><li>内部排序：指将需要的数据加载到内存来进行排序<ul><li>插入排序<ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>选择排序<ul><li>简单选择排序</li><li>堆排序</li></ul></li><li>交换排序<ul><li>冒泡排序</li><li>快速排序</li></ul></li><li>归并排序</li><li>基数排序</li></ul></li><li>外部排序：数据量很大时，会使用这个</li></ul><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间频度：</p><ul><li>一个算法花费时间与算法中语句的执行次数成正比，那个算法中语句执行次数多，他花费时间就多。</li><li>一个算法中执行的语句次数称为时间频度<ul><li>可以忽略常数项</li><li>可以忽略系数</li><li>可以忽略低次项</li></ul></li></ul><p>忽略后的东西就是时间复杂度，也可以想成时间复杂度是时间频度的超级简略版</p><h3 id="常数阶："><a href="#常数阶：" class="headerlink" title="常数阶："></a>常数阶：</h3><p>无论代码执行了多少行，只要没有循环等复杂结构，整个代码的时间复杂度就是o(1)</p><h3 id="对数阶：以2为底数的对数为例"><a href="#对数阶：以2为底数的对数为例" class="headerlink" title="对数阶：以2为底数的对数为例"></a>对数阶：以2为底数的对数为例</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>i*=<span class="hljs-number">2</span>;&#125;<br></code></pre></div></td></tr></table></figure><p>上述的时间复杂度就是以二为底数，可以尝试着这么理解</p><p>假设x次之后循环推出了，2的x次方=n。也就是说x=以二为底数的对数</p><h3 id="线性阶："><a href="#线性阶：" class="headerlink" title="线性阶："></a>线性阶：</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>j=i;<br>j++&#125;<br></code></pre></div></td></tr></table></figure><p>这段代码会执行n遍，会随着n的变化而变化</p><h3 id="线性对数阶"><a href="#线性对数阶" class="headerlink" title="线性对数阶"></a>线性对数阶</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(m=<span class="hljs-number">1</span>;m&lt;n;m++)&#123;<br>i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>i*=<span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里嵌套了一层，一个线性和对数，所以这就是线性对数阶</p><h3 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h3><p>就是双层的for循环就不提了，还有高次方阶到最后其实是一个道理，都是一样的东西</p><h2 id="空间复杂度（简略）"><a href="#空间复杂度（简略）" class="headerlink" title="空间复杂度（简略）"></a>空间复杂度（简略）</h2><ul><li>类似于时间复杂度的讨论，一个算法的空间复杂度定义为该算法所耗费的存储空间，他也是问题规模n的函数</li><li>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的亮度，有的算法占用的空间规模和n有关</li><li>在做算法分析的时候，主要讨论的还是时间复杂度，从用户体验上看，更看重的是程序执行的速度，一些缓存产品和算法本质就是用空间换时间</li></ul><h2 id="冒泡排序（bubble-sorting）"><a href="#冒泡排序（bubble-sorting）" class="headerlink" title="冒泡排序（bubble sorting）"></a>冒泡排序（bubble sorting）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length-<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">boolean</span> flag =<span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>                <span class="hljs-keyword">if</span>(arr[j+<span class="hljs-number">1</span>]&lt;arr[j])&#123;<br>                    flag=<span class="hljs-keyword">true</span>;<br>                    swap(arr,j+<span class="hljs-number">1</span>,j);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag==<span class="hljs-keyword">false</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a:arr)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;\t%d&quot;</span>,a);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> i1)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        temp=arr[i];<br>        arr[i]=arr[i1];<br>        arr[i1]=temp;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这个排序的本质是以俩俩邻着的兑换，每一次把最后的那个数排成自己想要的顺序，以此来排成顺序。</p><p>当然了，很容易看出，如果这个序列刚开始就比较整齐，那么这么多次循环简直是在浪费，所以就可以提出优化这个概念</p><p>所以上述代码上打了一个布尔标记，那么每一次小循环中，一旦换了位置那么必定说明，flag为true，也就是说还没有规整好，若一次都没有进去过就可以直接退出了</p><p>可以用System.currentTimeMills这个方法来获取1970到现在的毫秒</p><p>然后相减可以得到程序运行的时间差 </p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChooseSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,-<span class="hljs-number">1000</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">23</span>,<span class="hljs-number">45</span>,<span class="hljs-number">3</span>,<span class="hljs-number">53</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">512</span>,<span class="hljs-number">5</span>,<span class="hljs-number">45</span>,<span class="hljs-number">1235</span>,<span class="hljs-number">213</span>,<span class="hljs-number">5</span>,<span class="hljs-number">23</span>,<span class="hljs-number">523</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">321</span>,<span class="hljs-number">432</span>,<span class="hljs-number">14231</span>,<span class="hljs-number">432</span>,<span class="hljs-number">4</span>,<span class="hljs-number">12</span>,<span class="hljs-number">6534</span>,<span class="hljs-number">764</span>,<span class="hljs-number">856</span>,<span class="hljs-number">23</span>,<span class="hljs-number">12321</span>,<span class="hljs-number">3</span>,<span class="hljs-number">213</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">123</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">123</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">int</span> min =arr[i];<br>            <span class="hljs-keyword">int</span> minindex=i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i;j&lt;arr.length;j++)&#123;<br>                <span class="hljs-keyword">if</span> (min&gt;arr[j])&#123;<br>                min=arr[j];<br>                minindex=j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (arr[i]!=min)&#123;<br>                arr[minindex]=arr[i];<br>                arr[i]=min;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i:arr)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;\t%d&quot;</span>,i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> i1)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        temp=arr[i];<br>        arr[i]=arr[i1];<br>        arr[i1]=temp;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>从前面开始排序，有小的就直接换到前面来</p><h2 id="插入排序（insertion-sorting）"><a href="#插入排序（insertion-sorting）" class="headerlink" title="插入排序（insertion sorting）"></a>插入排序（insertion sorting）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertSort</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> arr[]= &#123;<span class="hljs-number">2</span>,<span class="hljs-number">65</span>,<span class="hljs-number">6</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">123</span>,<span class="hljs-number">213</span>,<span class="hljs-number">12</span>,<span class="hljs-number">675</span>&#125;;<br>insertSort(arr);<br>System.out.println(Arrays.toString(arr));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br><span class="hljs-comment">//这里把要排进去的值存起来</span><br><span class="hljs-comment">//然后永远跟自己的前一个进行比较</span><br><span class="hljs-keyword">int</span> insertvalue=arr[i];<br><span class="hljs-keyword">int</span> insertindex=i-<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (insertindex&gt;=<span class="hljs-number">0</span>&amp;&amp;insertvalue&lt;arr[insertindex]) &#123;<br>arr[insertindex+<span class="hljs-number">1</span>]=arr[insertindex];<br>insertindex--;<br>&#125;<br><span class="hljs-keyword">if</span> (insertindex!=i-<span class="hljs-number">1</span>) &#123;<br>arr[++insertindex]=insertvalue;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>排序算法的的时间好于冒泡排序，劣于选择排序</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>交换法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.function.IntPredicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">int</span>[] arr=&#123;<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">42</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">423</span>,<span class="hljs-number">4</span>,<span class="hljs-number">324</span>,<span class="hljs-number">32</span>,<span class="hljs-number">123</span>&#125;;<br>shellSort(arr);<br> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-comment">//      int temp=0;</span><br>      <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap =arr.length/<span class="hljs-number">2</span>; gap&gt;<span class="hljs-number">0</span>; gap/=<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i-gap; j &gt;=<span class="hljs-number">0</span>; j-=gap) &#123;<br><span class="hljs-keyword">if</span> (arr[j]&gt;arr[j+gap]) &#123;<br>swap(arr, j, j+gap);<br>&#125;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;希尔排序:&quot;</span>+(++count)+<span class="hljs-string">&quot;轮&quot;</span>+Arrays.toString(arr));<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp=arr[i];<br>    arr[i]=arr[j];<br>    arr[j]=temp;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>移位法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.function.IntPredicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>arr[i]=(<span class="hljs-keyword">int</span>)( Math.random()*<span class="hljs-number">800000</span>);<br>&#125;<br><span class="hljs-keyword">long</span> begin=System.currentTimeMillis();<br>shellSort(arr);<br><span class="hljs-keyword">long</span> end=System.currentTimeMillis(); <br>System.out.println(<span class="hljs-string">&quot;花费了：&quot;</span>+(end-begin));<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-comment">//      int temp=0;</span><br>      <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap =arr.length/<span class="hljs-number">2</span>; gap&gt;<span class="hljs-number">0</span>; gap/=<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">int</span> value =arr[i];<br><span class="hljs-keyword">int</span> index=i;<br><span class="hljs-keyword">while</span> (index-gap&gt;=<span class="hljs-number">0</span>&amp;&amp;arr[index-gap]&gt;value) &#123;<br>arr[index]=arr[index-gap];<br>index -=gap;<br>&#125;<br>arr[index]=value;<br>&#125;<br><span class="hljs-comment">//System.out.println(&quot;希尔排序:&quot;+(++count)+&quot;轮&quot;+Arrays.toString(arr));</span><br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp=arr[i];<br>    arr[i]=arr[j];<br>    arr[j]=temp;<br><br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这里和交换法最大的不同就是只要小就换位置，不管是否是正确位置，移位法利用着一个辅助指针来精确找到位置插进去，第二种这个希尔排序，快到离谱。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">800000</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">800000</span>; i++) &#123;<br>            arr[i]=(<span class="hljs-keyword">int</span>)( Math.random()*<span class="hljs-number">800000</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> begin=System.currentTimeMillis();<br>        quickSort(arr, <span class="hljs-number">0</span>, arr.length-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">long</span> end=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费了：&quot;</span>+(end-begin));<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-comment">// low,high 为每次处理数组时的首、尾元素索引</span><br><br>        <span class="hljs-comment">// 当low==high是表示该序列只有一个元素，不必排序了</span><br>        <span class="hljs-keyword">if</span> (low &gt;= high) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 选出哨兵元素和基准元素。这里左边的哨兵元素也是基准元素</span><br>        <span class="hljs-keyword">int</span> i = low, j = high, base = arr[low];<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-comment">// 右边哨兵从后向前找</span><br>            <span class="hljs-keyword">while</span> (arr[j] &gt;= base &amp;&amp; i &lt; j) &#123;<br>                j--;<br>            &#125;<br>            <span class="hljs-comment">// 左边哨兵从前向后找</span><br>            <span class="hljs-keyword">while</span> (arr[i] &lt;= base &amp;&amp; i &lt; j) &#123;<br>                i++;<br>            &#125;<br>            swap(arr, i, j); <span class="hljs-comment">// 交换元素</span><br>        &#125;<br>        swap(arr, low, j); <span class="hljs-comment">// 基准元素与右哨兵交换</span><br><br>        <span class="hljs-comment">// 递归调用，排序左子集合和右子集合</span><br>        quickSort(arr, low, j - <span class="hljs-number">1</span>);<br>        quickSort(arr, j + <span class="hljs-number">1</span>, high);<br><br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[],<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp=arr[i];<br>        arr[i]=arr[j];<br>        arr[j]=temp;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这个时间是非常快的</p><p>为什么哨兵元素和基准元素交换的时候是肯定符合顺序的？</p><p>因为是右边的元素先移动</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> []arr=&#123;<span class="hljs-number">8</span>,<span class="hljs-number">123</span>,<span class="hljs-number">21</span>,<span class="hljs-number">321</span>,<span class="hljs-number">3</span>,<span class="hljs-number">213</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">int</span> []temp=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br>        mergeSort(<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>,temp,arr);<br>        System.out.println(Arrays.toString(arr));<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span>[] temp,<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (left&lt;right)&#123;<br>            <span class="hljs-keyword">int</span> mid =(left+right)/<span class="hljs-number">2</span>;<br>            mergeSort(left,mid,temp,arr);<br>            mergeSort(mid+<span class="hljs-number">1</span>,right,temp,arr);<br>            merge(arr,left,mid,right,temp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> mid,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> []temp)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i=left;<br>        <span class="hljs-keyword">int</span> j=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<span class="hljs-comment">//指向temp数组的当前索引</span><br>        <span class="hljs-keyword">while</span> (i&lt;=mid&amp;&amp;j&lt;=right)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i]&lt;=arr[j])&#123;<br>                temp[t]=arr[i];<br>                t++;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                temp[t]=arr[j];<br>                t++;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (i&lt;=mid)&#123;<br>            temp[t]=arr[i];<br>            i++;<br>            t++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (j&lt;=right)&#123;<br>            temp[t]=arr[j];<br>            t++;<br>            j++;<br>        &#125;<br>        t=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tempLeft=left;<br>        <span class="hljs-keyword">while</span> (tempLeft&lt;=right)&#123;<br>            arr[tempLeft]=temp[t];<br>            t++;<br>            tempLeft++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>归并排序，可以说是一种分治，先把这个序列拆开，然后一点一点排然后最后合上</p><p>这里的速度来说的话和快速排序是不相上下的</p><h2 id="基数排序（桶排序）"><a href="#基数排序（桶排序）" class="headerlink" title="基数排序（桶排序）"></a>基数排序（桶排序）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jxj.sort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RadixSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">800000</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">800000</span>; i++) &#123;<br>            arr[i]=(<span class="hljs-keyword">int</span>)( Math.random()*<span class="hljs-number">800000</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> begin=System.currentTimeMillis();<br>        radixSort(arr);<br><br>        <span class="hljs-keyword">long</span> end=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费了：&quot;</span>+(end-begin));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> max=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i]&gt;max)&#123;<br>                max=arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> maxLength=(max+<span class="hljs-string">&quot;&quot;</span>).length();<br>        <span class="hljs-keyword">int</span>[] bucketElementCounts=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">int</span>[][] bucket=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][arr.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,n=<span class="hljs-number">1</span>;i&lt;maxLength;i++,n*=<span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length;j++)&#123;<br>                <span class="hljs-keyword">int</span> digitOfElement=arr[j]/n%<span class="hljs-number">10</span>;<br>                bucket[digitOfElement][bucketElementCounts[digitOfElement]++]=arr[j];<br>            &#125;<br>            <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">10</span>;k++)&#123;<br>                <span class="hljs-keyword">if</span> (bucketElementCounts[k]!=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;bucketElementCounts[k];j++)<br>                    arr[index++]=bucket[k][j];<br>                &#125;<br>                bucketElementCounts[k]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>相当的快，要想知道这个有几位数，+””.length即可 </p><p><img src="http://jin-xuanjie.gitee.io/note-pad/image-20210419185958600.png" alt="image-20210419185958600"></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序是利用堆这种数据结构来设计的一种排序算法，堆排序是一种选择排序。 </p><p>堆是具有如下性质的完全二叉树：</p><ul><li>每个结点的值都等于或大于左右子节点就叫做大顶堆</li><li>反之就叫做小顶堆</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机技术</tag>
      
      <tag>算法</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
